<axsl:stylesheet xmlns:axsl="http://www.w3.org/1999/XSL/Transform" xmlns:sch="http://www.ascc.net/xml/schematron" xmlns:iso="http://purl.oclc.org/dsdl/schematron" xmlns:mets="http://www.loc.gov/METS/" xmlns:fikdk="http://www.kdk.fi/standards/mets/kdk-extensions" xmlns:fi="http://digitalpreservation.fi/schemas/mets/fi-extensions" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:exsl="http://exslt.org/common" xmlns:sets="http://exslt.org/sets" xmlns:str="http://exslt.org/strings" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0"><!--Implementers: please note that overriding process-prolog or process-root is 
    the preferred method for meta-stylesheets to use where possible. -->
<axsl:param name="archiveDirParameter"/><axsl:param name="archiveNameParameter"/><axsl:param name="fileNameParameter"/><axsl:param name="fileDirParameter"/>

<!--PHASES-->


<!--PROLOG-->
<axsl:output xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:saxon="http://icl.com/saxon" method="xml" omit-xml-declaration="yes" standalone="yes" indent="yes"/>

<!--KEYS-->


<!--DEFAULT RULES-->


<!--MODE: SCHEMATRON-SELECT-FULL-PATH-->
<!--This mode can be used to generate an ugly though full XPath for locators-->
<axsl:template match="*" mode="schematron-select-full-path"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:template>

<!--MODE: SCHEMATRON-FULL-PATH-->
<!--This mode can be used to generate an ugly though full XPath for locators-->
<axsl:template match="*" mode="schematron-get-full-path"><axsl:apply-templates select="parent::*" mode="schematron-get-full-path"/><axsl:text>/</axsl:text><axsl:choose><axsl:when test="namespace-uri()=''"><axsl:value-of select="name()"/><axsl:variable name="p_1" select="1+    count(preceding-sibling::*[name()=name(current())])"/><axsl:if test="$p_1&gt;1 or following-sibling::*[name()=name(current())]">[<axsl:value-of select="$p_1"/>]</axsl:if></axsl:when><axsl:otherwise><axsl:text>*[local-name()='</axsl:text><axsl:value-of select="local-name()"/><axsl:text>' and namespace-uri()='</axsl:text><axsl:value-of select="namespace-uri()"/><axsl:text>']</axsl:text><axsl:variable name="p_2" select="1+   count(preceding-sibling::*[local-name()=local-name(current())])"/><axsl:if test="$p_2&gt;1 or following-sibling::*[local-name()=local-name(current())]">[<axsl:value-of select="$p_2"/>]</axsl:if></axsl:otherwise></axsl:choose></axsl:template><axsl:template match="@*" mode="schematron-get-full-path"><axsl:text>/</axsl:text><axsl:choose><axsl:when test="namespace-uri()=''">@<axsl:value-of select="name()"/></axsl:when><axsl:otherwise><axsl:text>@*[local-name()='</axsl:text><axsl:value-of select="local-name()"/><axsl:text>' and namespace-uri()='</axsl:text><axsl:value-of select="namespace-uri()"/><axsl:text>']</axsl:text></axsl:otherwise></axsl:choose></axsl:template>

<!--MODE: SCHEMATRON-FULL-PATH-2-->
<!--This mode can be used to generate prefixed XPath for humans-->
<axsl:template match="node() | @*" mode="schematron-get-full-path-2"><axsl:for-each select="ancestor-or-self::*"><axsl:text>/</axsl:text><axsl:value-of select="name(.)"/><axsl:if test="preceding-sibling::*[name(.)=name(current())]"><axsl:text>[</axsl:text><axsl:value-of select="count(preceding-sibling::*[name(.)=name(current())])+1"/><axsl:text>]</axsl:text></axsl:if></axsl:for-each><axsl:if test="not(self::*)"><axsl:text/>/@<axsl:value-of select="name(.)"/></axsl:if></axsl:template>

<!--MODE: GENERATE-ID-FROM-PATH -->
<axsl:template match="/" mode="generate-id-from-path"/><axsl:template match="text()" mode="generate-id-from-path"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:value-of select="concat('.text-', 1+count(preceding-sibling::text()), '-')"/></axsl:template><axsl:template match="comment()" mode="generate-id-from-path"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:value-of select="concat('.comment-', 1+count(preceding-sibling::comment()), '-')"/></axsl:template><axsl:template match="processing-instruction()" mode="generate-id-from-path"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:value-of select="concat('.processing-instruction-', 1+count(preceding-sibling::processing-instruction()), '-')"/></axsl:template><axsl:template match="@*" mode="generate-id-from-path"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:value-of select="concat('.@', name())"/></axsl:template><axsl:template match="*" mode="generate-id-from-path" priority="-0.5"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:text>.</axsl:text><axsl:value-of select="concat('.',name(),'-',1+count(preceding-sibling::*[name()=name(current())]),'-')"/></axsl:template><!--MODE: SCHEMATRON-FULL-PATH-3-->
<!--This mode can be used to generate prefixed XPath for humans 
	(Top-level element has index)-->
<axsl:template match="node() | @*" mode="schematron-get-full-path-3"><axsl:for-each select="ancestor-or-self::*"><axsl:text>/</axsl:text><axsl:value-of select="name(.)"/><axsl:if test="parent::*"><axsl:text>[</axsl:text><axsl:value-of select="count(preceding-sibling::*[name(.)=name(current())])+1"/><axsl:text>]</axsl:text></axsl:if></axsl:for-each><axsl:if test="not(self::*)"><axsl:text/>/@<axsl:value-of select="name(.)"/></axsl:if></axsl:template>

<!--MODE: GENERATE-ID-2 -->
<axsl:template match="/" mode="generate-id-2">U</axsl:template><axsl:template match="*" mode="generate-id-2" priority="2"><axsl:text>U</axsl:text><axsl:number level="multiple" count="*"/></axsl:template><axsl:template match="node()" mode="generate-id-2"><axsl:text>U.</axsl:text><axsl:number level="multiple" count="*"/><axsl:text>n</axsl:text><axsl:number count="node()"/></axsl:template><axsl:template match="@*" mode="generate-id-2"><axsl:text>U.</axsl:text><axsl:number level="multiple" count="*"/><axsl:text>_</axsl:text><axsl:value-of select="string-length(local-name(.))"/><axsl:text>_</axsl:text><axsl:value-of select="translate(name(),':','.')"/></axsl:template><!--Strip characters--><axsl:template match="text()" priority="-1"/>

<!--SCHEMA METADATA-->
<axsl:template match="/"><svrl:schematron-output xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" title="METS internal validation" schemaVersion="1.7.0"><axsl:comment><axsl:value-of select="$archiveDirParameter"/>   
		 <axsl:value-of select="$archiveNameParameter"/>  
		 <axsl:value-of select="$fileNameParameter"/>  
		 <axsl:value-of select="$fileDirParameter"/></axsl:comment><svrl:ns-prefix-in-attribute-values uri="http://www.loc.gov/METS/" prefix="mets"/><svrl:ns-prefix-in-attribute-values uri="http://www.kdk.fi/standards/mets/kdk-extensions" prefix="fikdk"/><svrl:ns-prefix-in-attribute-values uri="http://digitalpreservation.fi/schemas/mets/fi-extensions" prefix="fi"/><svrl:ns-prefix-in-attribute-values uri="http://www.w3.org/1999/xlink" prefix="xlink"/><svrl:ns-prefix-in-attribute-values uri="http://exslt.org/common" prefix="exsl"/><svrl:ns-prefix-in-attribute-values uri="http://exslt.org/sets" prefix="sets"/><svrl:ns-prefix-in-attribute-values uri="http://exslt.org/strings" prefix="str"/><svrl:ns-prefix-in-attribute-values uri="http://www.w3.org/2001/XMLSchema-instance" prefix="xsi"/><svrl:ns-prefix-in-attribute-values uri="https://www.w3.org/XML/1998/namespace" prefix="xml"/><svrl:active-pattern><axsl:attribute name="id">mets_root</axsl:attribute><axsl:attribute name="name">mets_root</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M10"/><svrl:active-pattern><axsl:attribute name="id">mets_profile</axsl:attribute><axsl:attribute name="name">mets_profile</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M11"/><svrl:active-pattern><axsl:attribute name="id">mets_profile_deprecated</axsl:attribute><axsl:attribute name="name">mets_profile_deprecated</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M12"/><svrl:active-pattern><axsl:attribute name="id">mets_mets_attribute_list</axsl:attribute><axsl:attribute name="name">mets_mets_attribute_list</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M13"/><svrl:active-pattern><axsl:attribute name="id">mets_dmdSec_attribute_list</axsl:attribute><axsl:attribute name="name">mets_dmdSec_attribute_list</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M14"/><svrl:active-pattern><axsl:attribute name="id">mets_amdSec_attribute_list</axsl:attribute><axsl:attribute name="name">mets_amdSec_attribute_list</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M15"/><svrl:active-pattern><axsl:attribute name="id">mets_structMap_attribute_list</axsl:attribute><axsl:attribute name="name">mets_structMap_attribute_list</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M16"/><svrl:active-pattern><axsl:attribute name="id">mets_metsHdr_attribute_list</axsl:attribute><axsl:attribute name="name">mets_metsHdr_attribute_list</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M17"/><svrl:active-pattern><axsl:attribute name="id">mets_fileSec_attribute_list</axsl:attribute><axsl:attribute name="name">mets_fileSec_attribute_list</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M18"/><svrl:active-pattern><axsl:attribute name="id">mets_amdSec_root_attribute_list</axsl:attribute><axsl:attribute name="name">mets_amdSec_root_attribute_list</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M19"/><svrl:active-pattern><axsl:attribute name="id">mets_fileGrp_attribute_list</axsl:attribute><axsl:attribute name="name">mets_fileGrp_attribute_list</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M20"/><svrl:active-pattern><axsl:attribute name="id">mets_fptr_attribute_list</axsl:attribute><axsl:attribute name="name">mets_fptr_attribute_list</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M21"/><svrl:active-pattern><axsl:attribute name="id">mets_file_attribute_list</axsl:attribute><axsl:attribute name="name">mets_file_attribute_list</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M22"/><svrl:active-pattern><axsl:attribute name="id">mets_par_attribute_list</axsl:attribute><axsl:attribute name="name">mets_par_attribute_list</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M23"/><svrl:active-pattern><axsl:attribute name="id">mets_seq_attribute_list</axsl:attribute><axsl:attribute name="name">mets_seq_attribute_list</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M24"/><svrl:active-pattern><axsl:attribute name="id">mets_area_attribute_list</axsl:attribute><axsl:attribute name="name">mets_area_attribute_list</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M25"/><svrl:active-pattern><axsl:attribute name="id">mets_CATALOG_SPECIFICATION</axsl:attribute><axsl:attribute name="name">mets_CATALOG_SPECIFICATION</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M26"/><svrl:active-pattern><axsl:attribute name="id">mets_specification</axsl:attribute><axsl:attribute name="name">mets_specification</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M27"/><svrl:active-pattern><axsl:attribute name="id">mets_OBJID</axsl:attribute><axsl:attribute name="name">mets_OBJID</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M28"/><svrl:active-pattern><axsl:attribute name="id">mets_OBJID_value</axsl:attribute><axsl:attribute name="name">mets_OBJID_value</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M29"/><svrl:active-pattern><axsl:attribute name="id">mets_CONTRACTID</axsl:attribute><axsl:attribute name="name">mets_CONTRACTID</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M30"/><svrl:active-pattern><axsl:attribute name="id">mets_CONTRACTID_value</axsl:attribute><axsl:attribute name="name">mets_CONTRACTID_value</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M31"/><svrl:active-pattern><axsl:attribute name="id">mets_CONTENTID_value</axsl:attribute><axsl:attribute name="name">mets_CONTENTID_value</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M32"/><svrl:active-pattern><axsl:attribute name="id">mets_PROFILE</axsl:attribute><axsl:attribute name="name">mets_PROFILE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M33"/><svrl:active-pattern><axsl:attribute name="id">mets_metsHdr</axsl:attribute><axsl:attribute name="name">mets_metsHdr</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M34"/><svrl:active-pattern><axsl:attribute name="id">mets_dmdSec</axsl:attribute><axsl:attribute name="name">mets_dmdSec</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M35"/><svrl:active-pattern><axsl:attribute name="id">mets_amdSec</axsl:attribute><axsl:attribute name="name">mets_amdSec</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M36"/><svrl:active-pattern><axsl:attribute name="id">mets_amdSec_amdSec_max</axsl:attribute><axsl:attribute name="name">mets_amdSec_amdSec_max</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M37"/><svrl:active-pattern><axsl:attribute name="id">mets_structMap</axsl:attribute><axsl:attribute name="name">mets_structMap</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M38"/><svrl:active-pattern><axsl:attribute name="id">mets_structLink</axsl:attribute><axsl:attribute name="name">mets_structLink</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M39"/><svrl:active-pattern><axsl:attribute name="id">mets_behaviorSec</axsl:attribute><axsl:attribute name="name">mets_behaviorSec</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M40"/><svrl:active-pattern><axsl:attribute name="id">mets_metsHdr_CREATEDATE</axsl:attribute><axsl:attribute name="name">mets_metsHdr_CREATEDATE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M41"/><svrl:active-pattern><axsl:attribute name="id">mets_RECORDSTATUS_values_csc</axsl:attribute><axsl:attribute name="name">mets_RECORDSTATUS_values_csc</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M42"/><svrl:active-pattern><axsl:attribute name="id">mets_RECORDSTATUS_values</axsl:attribute><axsl:attribute name="name">mets_RECORDSTATUS_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M43"/><svrl:active-pattern><axsl:attribute name="id">mets_metsHdr_agent</axsl:attribute><axsl:attribute name="name">mets_metsHdr_agent</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M44"/><svrl:active-pattern><axsl:attribute name="id">mets_agent_ROLE</axsl:attribute><axsl:attribute name="name">mets_agent_ROLE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M45"/><svrl:active-pattern><axsl:attribute name="id">mets_agent_TYPE</axsl:attribute><axsl:attribute name="name">mets_agent_TYPE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M46"/><svrl:active-pattern><axsl:attribute name="id">mets_agent_creator</axsl:attribute><axsl:attribute name="name">mets_agent_creator</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M47"/><svrl:active-pattern><axsl:attribute name="id">mets_metsHdr_altRecordID</axsl:attribute><axsl:attribute name="name">mets_metsHdr_altRecordID</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M48"/><svrl:active-pattern><axsl:attribute name="id">mets_amdSec_techMD</axsl:attribute><axsl:attribute name="name">mets_amdSec_techMD</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M49"/><svrl:active-pattern><axsl:attribute name="id">mets_amdSec_digiprovMD</axsl:attribute><axsl:attribute name="name">mets_amdSec_digiprovMD</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M50"/><svrl:active-pattern><axsl:attribute name="id">mets_dmdSec_mdWrap</axsl:attribute><axsl:attribute name="name">mets_dmdSec_mdWrap</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M51"/><svrl:active-pattern><axsl:attribute name="id">mets_dmdSec_mdRef</axsl:attribute><axsl:attribute name="name">mets_dmdSec_mdRef</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M52"/><svrl:active-pattern><axsl:attribute name="id">mets_techMD_mdWrap</axsl:attribute><axsl:attribute name="name">mets_techMD_mdWrap</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M53"/><svrl:active-pattern><axsl:attribute name="id">mets_techMD_mdRef</axsl:attribute><axsl:attribute name="name">mets_techMD_mdRef</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M54"/><svrl:active-pattern><axsl:attribute name="id">mets_rightsMD_mdWrap</axsl:attribute><axsl:attribute name="name">mets_rightsMD_mdWrap</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M55"/><svrl:active-pattern><axsl:attribute name="id">mets_rightsMD_mdRef</axsl:attribute><axsl:attribute name="name">mets_rightsMD_mdRef</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M56"/><svrl:active-pattern><axsl:attribute name="id">mets_sourceMD_mdWrap</axsl:attribute><axsl:attribute name="name">mets_sourceMD_mdWrap</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M57"/><svrl:active-pattern><axsl:attribute name="id">mets_sourceMD_mdRef</axsl:attribute><axsl:attribute name="name">mets_sourceMD_mdRef</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M58"/><svrl:active-pattern><axsl:attribute name="id">mets_digiprovMD_mdWrap_mdRef</axsl:attribute><axsl:attribute name="name">mets_digiprovMD_mdWrap_mdRef</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M59"/><svrl:active-pattern><axsl:attribute name="id">mets_dmdSec_CREATED</axsl:attribute><axsl:attribute name="name">mets_dmdSec_CREATED</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M60"/><svrl:active-pattern><axsl:attribute name="id">mets_amdSec_CREATED</axsl:attribute><axsl:attribute name="name">mets_amdSec_CREATED</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M61"/><svrl:active-pattern><axsl:attribute name="id">mets_dmdSec_MDTYPE</axsl:attribute><axsl:attribute name="name">mets_dmdSec_MDTYPE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M62"/><svrl:active-pattern><axsl:attribute name="id">mets_techMD_MDTYPE</axsl:attribute><axsl:attribute name="name">mets_techMD_MDTYPE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M63"/><svrl:active-pattern><axsl:attribute name="id">mets_rightsMD_MDTYPE</axsl:attribute><axsl:attribute name="name">mets_rightsMD_MDTYPE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M64"/><svrl:active-pattern><axsl:attribute name="id">mets_digiprovMD_MDTYPE</axsl:attribute><axsl:attribute name="name">mets_digiprovMD_MDTYPE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M65"/><svrl:active-pattern><axsl:attribute name="id">mets_dmdSec_PID</axsl:attribute><axsl:attribute name="name">mets_dmdSec_PID</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M66"/><svrl:active-pattern><axsl:attribute name="id">mets_amdSec_PID</axsl:attribute><axsl:attribute name="name">mets_amdSec_PID</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M67"/><svrl:active-pattern><axsl:attribute name="id">mets_dmdSec_PIDTYPE</axsl:attribute><axsl:attribute name="name">mets_dmdSec_PIDTYPE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M68"/><svrl:active-pattern><axsl:attribute name="id">mets_amdSec_PIDTYPE</axsl:attribute><axsl:attribute name="name">mets_amdSec_PIDTYPE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M69"/><svrl:active-pattern><axsl:attribute name="id">mets_mdWrap_xmlData</axsl:attribute><axsl:attribute name="name">mets_mdWrap_xmlData</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M70"/><svrl:active-pattern><axsl:attribute name="id">mets_mdWrap_binData</axsl:attribute><axsl:attribute name="name">mets_mdWrap_binData</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M71"/><svrl:active-pattern><axsl:attribute name="id">mets_OTHERMDTYPE</axsl:attribute><axsl:attribute name="name">mets_OTHERMDTYPE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M72"/><svrl:active-pattern><axsl:attribute name="id">mets_no_OTHERMDTYPE</axsl:attribute><axsl:attribute name="name">mets_no_OTHERMDTYPE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M73"/><svrl:active-pattern><axsl:attribute name="id">mets_mdWrap_CHECKSUM</axsl:attribute><axsl:attribute name="name">mets_mdWrap_CHECKSUM</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M74"/><svrl:active-pattern><axsl:attribute name="id">mets_mdWrap_CHECKSUMTYPE</axsl:attribute><axsl:attribute name="name">mets_mdWrap_CHECKSUMTYPE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M75"/><svrl:active-pattern><axsl:attribute name="id">mets_MDTYPEVERSION</axsl:attribute><axsl:attribute name="name">mets_MDTYPEVERSION</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M76"/><svrl:active-pattern><axsl:attribute name="id">mets_techMD_MDTYPEVERSION_values_OBJECT</axsl:attribute><axsl:attribute name="name">mets_techMD_MDTYPEVERSION_values_OBJECT</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M77"/><svrl:active-pattern><axsl:attribute name="id">mets_techMD_MDTYPEVERSION_values_MIX</axsl:attribute><axsl:attribute name="name">mets_techMD_MDTYPEVERSION_values_MIX</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M78"/><svrl:active-pattern><axsl:attribute name="id">mets_rightsMD_MDTYPEVERSION_values_RIGHTS</axsl:attribute><axsl:attribute name="name">mets_rightsMD_MDTYPEVERSION_values_RIGHTS</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M79"/><svrl:active-pattern><axsl:attribute name="id">mets_digiprovMD_MDTYPEVERSION_values_OBJECT</axsl:attribute><axsl:attribute name="name">mets_digiprovMD_MDTYPEVERSION_values_OBJECT</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M80"/><svrl:active-pattern><axsl:attribute name="id">mets_digiprovMD_MDTYPEVERSION_values_EVENT</axsl:attribute><axsl:attribute name="name">mets_digiprovMD_MDTYPEVERSION_values_EVENT</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M81"/><svrl:active-pattern><axsl:attribute name="id">mets_digiprovMD_MDTYPEVERSION_values_AGENT</axsl:attribute><axsl:attribute name="name">mets_digiprovMD_MDTYPEVERSION_values_AGENT</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M82"/><svrl:active-pattern><axsl:attribute name="id">mets_dmdSec_MDTYPEVERSION_values_DC</axsl:attribute><axsl:attribute name="name">mets_dmdSec_MDTYPEVERSION_values_DC</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M83"/><svrl:active-pattern><axsl:attribute name="id">mets_dmdSec_MDTYPEVERSION_values_MODS</axsl:attribute><axsl:attribute name="name">mets_dmdSec_MDTYPEVERSION_values_MODS</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M84"/><svrl:active-pattern><axsl:attribute name="id">mets_dmdSec_MDTYPEVERSION_values_EAD</axsl:attribute><axsl:attribute name="name">mets_dmdSec_MDTYPEVERSION_values_EAD</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M85"/><svrl:active-pattern><axsl:attribute name="id">mets_dmdSec_MDTYPEVERSION_values_EAC</axsl:attribute><axsl:attribute name="name">mets_dmdSec_MDTYPEVERSION_values_EAC</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M86"/><svrl:active-pattern><axsl:attribute name="id">mets_dmdSec_MDTYPEVERSION_values_LIDO</axsl:attribute><axsl:attribute name="name">mets_dmdSec_MDTYPEVERSION_values_LIDO</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M87"/><svrl:active-pattern><axsl:attribute name="id">mets_dmdSec_MDTYPEVERSION_values_VRA</axsl:attribute><axsl:attribute name="name">mets_dmdSec_MDTYPEVERSION_values_VRA</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M88"/><svrl:active-pattern><axsl:attribute name="id">mets_dmdSec_MDTYPEVERSION_values_DDI</axsl:attribute><axsl:attribute name="name">mets_dmdSec_MDTYPEVERSION_values_DDI</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M89"/><svrl:active-pattern><axsl:attribute name="id">mets_dmdSec_MDTYPEVERSION_values_MARC</axsl:attribute><axsl:attribute name="name">mets_dmdSec_MDTYPEVERSION_values_MARC</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M90"/><svrl:active-pattern><axsl:attribute name="id">mets_techMD_MDTYPEVERSION_values_AudioMD</axsl:attribute><axsl:attribute name="name">mets_techMD_MDTYPEVERSION_values_AudioMD</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M91"/><svrl:active-pattern><axsl:attribute name="id">mets_techMD_MDTYPEVERSION_values_VideoMD</axsl:attribute><axsl:attribute name="name">mets_techMD_MDTYPEVERSION_values_VideoMD</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M92"/><svrl:active-pattern><axsl:attribute name="id">mets_techMD_MDTYPEVERSION_values_ADDML</axsl:attribute><axsl:attribute name="name">mets_techMD_MDTYPEVERSION_values_ADDML</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M93"/><svrl:active-pattern><axsl:attribute name="id">mets_techMD_MDTYPEVERSION_values_EAD3</axsl:attribute><axsl:attribute name="name">mets_techMD_MDTYPEVERSION_values_EAD3</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M94"/><svrl:active-pattern><axsl:attribute name="id">mets_techMD_MDTYPEVERSION_values_DATACITE</axsl:attribute><axsl:attribute name="name">mets_techMD_MDTYPEVERSION_values_DATACITE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M95"/><svrl:active-pattern><axsl:attribute name="id">mets_mdRef_OTHERMDTYPE</axsl:attribute><axsl:attribute name="name">mets_mdRef_OTHERMDTYPE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M96"/><svrl:active-pattern><axsl:attribute name="id">mets_mdRef_OTHERLOCTYPE</axsl:attribute><axsl:attribute name="name">mets_mdRef_OTHERLOCTYPE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M97"/><svrl:active-pattern><axsl:attribute name="id">mets_mdRef_href</axsl:attribute><axsl:attribute name="name">mets_mdRef_href</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M98"/><svrl:active-pattern><axsl:attribute name="id">mets_mdRef_type</axsl:attribute><axsl:attribute name="name">mets_mdRef_type</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M99"/><svrl:active-pattern><axsl:attribute name="id">mets_mdRef_CHECKSUM</axsl:attribute><axsl:attribute name="name">mets_mdRef_CHECKSUM</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M100"/><svrl:active-pattern><axsl:attribute name="id">mets_mdRef_CHECKSUMTYPE</axsl:attribute><axsl:attribute name="name">mets_mdRef_CHECKSUMTYPE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M101"/><svrl:active-pattern><axsl:attribute name="id">mets_mdRef_MDTYPE_values</axsl:attribute><axsl:attribute name="name">mets_mdRef_MDTYPE_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M102"/><svrl:active-pattern><axsl:attribute name="id">mets_mdRef_OTHERMDTYPE_values</axsl:attribute><axsl:attribute name="name">mets_mdRef_OTHERMDTYPE_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M103"/><svrl:active-pattern><axsl:attribute name="id">mets_mdRef_LOCTYPE_values</axsl:attribute><axsl:attribute name="name">mets_mdRef_LOCTYPE_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M104"/><svrl:active-pattern><axsl:attribute name="id">mets_mdRef_OTHERLOCTYPE_values</axsl:attribute><axsl:attribute name="name">mets_mdRef_OTHERLOCTYPE_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M105"/><svrl:active-pattern><axsl:attribute name="id">mets_mdRef_type_values</axsl:attribute><axsl:attribute name="name">mets_mdRef_type_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M106"/><svrl:active-pattern><axsl:attribute name="id">mets_fileGrp_file</axsl:attribute><axsl:attribute name="name">mets_fileGrp_file</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M107"/><svrl:active-pattern><axsl:attribute name="id">mets_file_ADMID</axsl:attribute><axsl:attribute name="name">mets_file_ADMID</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M108"/><svrl:active-pattern><axsl:attribute name="id">mets_file_CHECKSUM</axsl:attribute><axsl:attribute name="name">mets_file_CHECKSUM</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M109"/><svrl:active-pattern><axsl:attribute name="id">mets_file_CHECKSUMTYPE</axsl:attribute><axsl:attribute name="name">mets_file_CHECKSUMTYPE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M110"/><svrl:active-pattern><axsl:attribute name="id">mets_file_FLocat</axsl:attribute><axsl:attribute name="name">mets_file_FLocat</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M111"/><svrl:active-pattern><axsl:attribute name="id">mets_file_FLocat_max</axsl:attribute><axsl:attribute name="name">mets_file_FLocat_max</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M112"/><svrl:active-pattern><axsl:attribute name="id">mets_file_FContent</axsl:attribute><axsl:attribute name="name">mets_file_FContent</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M113"/><svrl:active-pattern><axsl:attribute name="id">mets_file_file</axsl:attribute><axsl:attribute name="name">mets_file_file</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M114"/><svrl:active-pattern><axsl:attribute name="id">mets_file_transformFile</axsl:attribute><axsl:attribute name="name">mets_file_transformFile</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M115"/><svrl:active-pattern><axsl:attribute name="id">mets_FLocat_href</axsl:attribute><axsl:attribute name="name">mets_FLocat_href</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M116"/><svrl:active-pattern><axsl:attribute name="id">mets_FLocat_type</axsl:attribute><axsl:attribute name="name">mets_FLocat_type</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M117"/><svrl:active-pattern><axsl:attribute name="id">mets_FLocat_OTHERLOCTYPE</axsl:attribute><axsl:attribute name="name">mets_FLocat_OTHERLOCTYPE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M118"/><svrl:active-pattern><axsl:attribute name="id">mets_FLocat_LOCTYPE</axsl:attribute><axsl:attribute name="name">mets_FLocat_LOCTYPE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M119"/><svrl:active-pattern><axsl:attribute name="id">mets_FLocat_type_values</axsl:attribute><axsl:attribute name="name">mets_FLocat_type_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M120"/><svrl:active-pattern><axsl:attribute name="id">mets_structMap_div</axsl:attribute><axsl:attribute name="name">mets_structMap_div</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M121"/><svrl:active-pattern><axsl:attribute name="id">mets_structMap_div_max</axsl:attribute><axsl:attribute name="name">mets_structMap_div_max</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M122"/><svrl:active-pattern><axsl:attribute name="id">mets_structMap_PID</axsl:attribute><axsl:attribute name="name">mets_structMap_PID</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M123"/><svrl:active-pattern><axsl:attribute name="id">mets_structMap_PIDTYPE</axsl:attribute><axsl:attribute name="name">mets_structMap_PIDTYPE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M124"/><svrl:active-pattern><axsl:attribute name="id">mets_div_TYPE</axsl:attribute><axsl:attribute name="name">mets_div_TYPE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M125"/><svrl:active-pattern><axsl:attribute name="id">mets_fptr_FILEID</axsl:attribute><axsl:attribute name="name">mets_fptr_FILEID</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M126"/><svrl:active-pattern><axsl:attribute name="id">mets_mptr_href</axsl:attribute><axsl:attribute name="name">mets_mptr_href</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M127"/><svrl:active-pattern><axsl:attribute name="id">mets_mptr_type</axsl:attribute><axsl:attribute name="name">mets_mptr_type</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M128"/><svrl:active-pattern><axsl:attribute name="id">mets_mptr_OTHERLOCTYPE</axsl:attribute><axsl:attribute name="name">mets_mptr_OTHERLOCTYPE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M129"/><svrl:active-pattern><axsl:attribute name="id">mets_mptr_LOCTYPE_values</axsl:attribute><axsl:attribute name="name">mets_mptr_LOCTYPE_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M130"/><svrl:active-pattern><axsl:attribute name="id">mets_mptr_type_values</axsl:attribute><axsl:attribute name="name">mets_mptr_type_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M131"/><svrl:active-pattern><axsl:attribute name="id">link_div_dmdid</axsl:attribute><axsl:attribute name="name">link_div_dmdid</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M135"/><svrl:active-pattern><axsl:attribute name="id">link_file_admid</axsl:attribute><axsl:attribute name="name">link_file_admid</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M136"/><svrl:active-pattern><axsl:attribute name="id">link_stream_admid</axsl:attribute><axsl:attribute name="name">link_stream_admid</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M137"/><svrl:active-pattern><axsl:attribute name="id">link_div_admid</axsl:attribute><axsl:attribute name="name">link_div_admid</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M138"/><svrl:active-pattern><axsl:attribute name="id">link_fptr_fileid</axsl:attribute><axsl:attribute name="name">link_fptr_fileid</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M139"/><svrl:active-pattern><axsl:attribute name="id">link_area_fileid</axsl:attribute><axsl:attribute name="name">link_area_fileid</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M140"/><svrl:active-pattern><axsl:attribute name="id">id_references_desc</axsl:attribute><axsl:attribute name="name">id_references_desc</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M146"/><svrl:active-pattern><axsl:attribute name="id">id_references_adm</axsl:attribute><axsl:attribute name="name">id_references_adm</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M147"/><svrl:active-pattern><axsl:attribute name="id">id_references_file</axsl:attribute><axsl:attribute name="name">id_references_file</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M148"/><svrl:active-pattern><axsl:attribute name="id">unique_objid</axsl:attribute><axsl:attribute name="name">unique_objid</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M149"/><svrl:active-pattern><axsl:attribute name="id">mets_mets_attribute_list_old</axsl:attribute><axsl:attribute name="name">mets_mets_attribute_list_old</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M150"/><svrl:active-pattern><axsl:attribute name="id">mets_dmdSec_attribute_list_old</axsl:attribute><axsl:attribute name="name">mets_dmdSec_attribute_list_old</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M151"/><svrl:active-pattern><axsl:attribute name="id">mets_amdSec_attribute_list_old</axsl:attribute><axsl:attribute name="name">mets_amdSec_attribute_list_old</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M152"/><svrl:active-pattern><axsl:attribute name="id">mets_structMap_attribute_list_old</axsl:attribute><axsl:attribute name="name">mets_structMap_attribute_list_old</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M153"/><svrl:active-pattern><axsl:attribute name="id">mets_CATALOG_SPECIFICATION_old</axsl:attribute><axsl:attribute name="name">mets_CATALOG_SPECIFICATION_old</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M154"/><svrl:active-pattern><axsl:attribute name="id">mets_specification_old</axsl:attribute><axsl:attribute name="name">mets_specification_old</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M155"/><svrl:active-pattern><axsl:attribute name="id">mets_CONTENTID_value_old</axsl:attribute><axsl:attribute name="name">mets_CONTENTID_value_old</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M156"/><svrl:active-pattern><axsl:attribute name="id">mets_no_CONTENTID_old</axsl:attribute><axsl:attribute name="name">mets_no_CONTENTID_old</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M157"/><svrl:active-pattern><axsl:attribute name="id">mets_no_CONTENTID</axsl:attribute><axsl:attribute name="name">mets_no_CONTENTID</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M158"/><svrl:active-pattern><axsl:attribute name="id">mets_dmdSec_CREATED_old</axsl:attribute><axsl:attribute name="name">mets_dmdSec_CREATED_old</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M159"/><svrl:active-pattern><axsl:attribute name="id">mets_amdSec_CREATED_old</axsl:attribute><axsl:attribute name="name">mets_amdSec_CREATED_old</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M160"/><svrl:active-pattern><axsl:attribute name="id">mets_dmdSec_PID_old</axsl:attribute><axsl:attribute name="name">mets_dmdSec_PID_old</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M161"/><svrl:active-pattern><axsl:attribute name="id">mets_amdSec_PID_old</axsl:attribute><axsl:attribute name="name">mets_amdSec_PID_old</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M162"/><svrl:active-pattern><axsl:attribute name="id">mets_dmdSec_PIDTYPE_old</axsl:attribute><axsl:attribute name="name">mets_dmdSec_PIDTYPE_old</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M163"/><svrl:active-pattern><axsl:attribute name="id">mets_amdSec_PIDTYPE_old</axsl:attribute><axsl:attribute name="name">mets_amdSec_PIDTYPE_old</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M164"/><svrl:active-pattern><axsl:attribute name="id">mets14_structMap_PID</axsl:attribute><axsl:attribute name="name">mets14_structMap_PID</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M165"/><svrl:active-pattern><axsl:attribute name="id">mets14_structMap_PIDTYPE</axsl:attribute><axsl:attribute name="name">mets14_structMap_PIDTYPE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M166"/><svrl:active-pattern><axsl:attribute name="id">mets_structMap_PID_old</axsl:attribute><axsl:attribute name="name">mets_structMap_PID_old</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M167"/><svrl:active-pattern><axsl:attribute name="id">mets_structMap_PIDTYPE_old</axsl:attribute><axsl:attribute name="name">mets_structMap_PIDTYPE_old</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M168"/><svrl:active-pattern><axsl:attribute name="id">mets14_rightsMD_MDTYPE</axsl:attribute><axsl:attribute name="name">mets14_rightsMD_MDTYPE</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M169"/><svrl:active-pattern><axsl:attribute name="id">mets15_techMD_MDTYPEVERSION_values_OBJECT</axsl:attribute><axsl:attribute name="name">mets15_techMD_MDTYPEVERSION_values_OBJECT</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M170"/><svrl:active-pattern><axsl:attribute name="id">mets15_rightsMD_MDTYPEVERSION_values_RIGHTS</axsl:attribute><axsl:attribute name="name">mets15_rightsMD_MDTYPEVERSION_values_RIGHTS</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M171"/><svrl:active-pattern><axsl:attribute name="id">mets15_digiprovMD_MDTYPEVERSION_values_OBJECT</axsl:attribute><axsl:attribute name="name">mets15_digiprovMD_MDTYPEVERSION_values_OBJECT</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M172"/><svrl:active-pattern><axsl:attribute name="id">mets15_digiprovMD_MDTYPEVERSION_values_EVENT</axsl:attribute><axsl:attribute name="name">mets15_digiprovMD_MDTYPEVERSION_values_EVENT</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M173"/><svrl:active-pattern><axsl:attribute name="id">mets15_digiprovMD_MDTYPEVERSION_values_AGENT</axsl:attribute><axsl:attribute name="name">mets15_digiprovMD_MDTYPEVERSION_values_AGENT</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M174"/><svrl:active-pattern><axsl:attribute name="id">mets_file_stream</axsl:attribute><axsl:attribute name="name">mets_file_stream</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M175"/><svrl:active-pattern><axsl:attribute name="id">mets_mdRef_OTHERMDTYPE_values_old</axsl:attribute><axsl:attribute name="name">mets_mdRef_OTHERMDTYPE_values_old</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M176"/></svrl:schematron-output></axsl:template>

<!--SCHEMATRON PATTERNS-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon">METS internal validation</svrl:text>

<!--PATTERN mets_root-->


	<!--RULE -->
<axsl:template match="/" priority="1000" mode="M10"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="/"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="mets:mets"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="mets:mets"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				This is not a METS document.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M10"/></axsl:template><axsl:template match="text()" priority="-1" mode="M10"/><axsl:template match="@*|node()" priority="-2" mode="M10"><axsl:apply-templates select="@*|*" mode="M10"/></axsl:template>

<!--PATTERN mets_profile-->


	<!--RULE -->
<axsl:template match="mets:mets[@PROFILE and not(contains(@PROFILE, ';')) and (true())]" priority="1001" mode="M11"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[@PROFILE and not(contains(@PROFILE, ';')) and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('http://www.kdk.fi/kdk-mets-profile; http://digitalpreservation.fi/mets-profiles/cultural-heritage; http://digitalpreservation.fi/mets-profiles/research-data'),'; '), concat('; ',normalize-space(@PROFILE),'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('http://www.kdk.fi/kdk-mets-profile; http://digitalpreservation.fi/mets-profiles/cultural-heritage; http://digitalpreservation.fi/mets-profiles/research-data'),'; '), concat('; ',normalize-space(@PROFILE),'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@PROFILE"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@PROFILE)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('http://www.kdk.fi/kdk-mets-profile; http://digitalpreservation.fi/mets-profiles/cultural-heritage; http://digitalpreservation.fi/mets-profiles/research-data'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M11"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:mets/@PROFILE[contains(., ';') and (true())]" priority="1000" mode="M11"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets/@PROFILE[contains(., ';') and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('http://www.kdk.fi/kdk-mets-profile; http://digitalpreservation.fi/mets-profiles/cultural-heritage; http://digitalpreservation.fi/mets-profiles/research-data'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('http://www.kdk.fi/kdk-mets-profile; http://digitalpreservation.fi/mets-profiles/cultural-heritage; http://digitalpreservation.fi/mets-profiles/research-data'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('http://www.kdk.fi/kdk-mets-profile; http://digitalpreservation.fi/mets-profiles/cultural-heritage; http://digitalpreservation.fi/mets-profiles/research-data'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M11"/></axsl:template><axsl:template match="text()" priority="-1" mode="M11"/><axsl:template match="@*|node()" priority="-2" mode="M11"><axsl:apply-templates select="@*|*" mode="M11"/></axsl:template>

<!--PATTERN mets_profile_deprecated-->


	<!--RULE -->
<axsl:template match="mets:mets[@PROFILE and (true())]" priority="1000" mode="M12"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[@PROFILE and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--REPORT -->
<axsl:if test="(normalize-space(@PROFILE)=string('http://www.kdk.fi/kdk-mets-profile')) and (normalize-space(string(''))=''                         or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification,'; ')))))                         or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(normalize-space(@PROFILE)=string('http://www.kdk.fi/kdk-mets-profile')) and (normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification,'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text> 
				INFO: Value '<axsl:text/><axsl:value-of select="@PROFILE"/><axsl:text/>' is deprecated in attribute '<axsl:text/><axsl:value-of select="name(@PROFILE)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string('http://digitalpreservation.fi/mets-profiles/cultural-heritage; http://digitalpreservation.fi/mets-profiles/research-data')"/><axsl:text/>
			</svrl:text></svrl:successful-report></axsl:if><axsl:apply-templates select="@*|*" mode="M12"/></axsl:template><axsl:template match="text()" priority="-1" mode="M12"/><axsl:template match="@*|node()" priority="-2" mode="M12"><axsl:apply-templates select="@*|*" mode="M12"/></axsl:template>

<!--PATTERN mets_mets_attribute_list-->


	<!--RULE -->
<axsl:template match="mets:mets[(substring(normalize-space(/mets:mets/@PROFILE),0,44)='http://digitalpreservation.fi/mets-profiles')]" priority="1000" mode="M13"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[(substring(normalize-space(/mets:mets/@PROFILE),0,44)='http://digitalpreservation.fi/mets-profiles')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(@*) = count(@xsi:schemaLocation | @PROFILE | @OBJID | @LABEL | @ID | @TYPE | @fi:CATALOG | @fi:SPECIFICATION | @fi:CONTENTID | @fi:CONTRACTID)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(@*) = count(@xsi:schemaLocation | @PROFILE | @OBJID | @LABEL | @ID | @TYPE | @fi:CATALOG | @fi:SPECIFICATION | @fi:CONTENTID | @fi:CONTRACTID)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Unknown attribute(s) in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M13"/></axsl:template><axsl:template match="text()" priority="-1" mode="M13"/><axsl:template match="@*|node()" priority="-2" mode="M13"><axsl:apply-templates select="@*|*" mode="M13"/></axsl:template>

<!--PATTERN mets_dmdSec_attribute_list-->


	<!--RULE -->
<axsl:template match="mets:dmdSec[(substring(normalize-space(/mets:mets/@PROFILE),0,44)='http://digitalpreservation.fi/mets-profiles')]" priority="1000" mode="M14"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec[(substring(normalize-space(/mets:mets/@PROFILE),0,44)='http://digitalpreservation.fi/mets-profiles')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(@*) = count(@ID | @CREATED | @GROUPID | @ADMID | @STATUS | @fi:CREATED | @fi:PID | @fi:PIDTYPE | @xml:lang)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(@*) = count(@ID | @CREATED | @GROUPID | @ADMID | @STATUS | @fi:CREATED | @fi:PID | @fi:PIDTYPE | @xml:lang)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Unknown attribute(s) in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M14"/></axsl:template><axsl:template match="text()" priority="-1" mode="M14"/><axsl:template match="@*|node()" priority="-2" mode="M14"><axsl:apply-templates select="@*|*" mode="M14"/></axsl:template>

<!--PATTERN mets_amdSec_attribute_list-->


	<!--RULE -->
<axsl:template match="mets:amdSec/*[(substring(normalize-space(/mets:mets/@PROFILE),0,44)='http://digitalpreservation.fi/mets-profiles')]" priority="1000" mode="M15"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:amdSec/*[(substring(normalize-space(/mets:mets/@PROFILE),0,44)='http://digitalpreservation.fi/mets-profiles')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(@*) = count(@ID | @CREATED | @GROUPID | @ADMID | @STATUS | @fi:CREATED | @fi:PID | @fi:PIDTYPE | @xml:lang)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(@*) = count(@ID | @CREATED | @GROUPID | @ADMID | @STATUS | @fi:CREATED | @fi:PID | @fi:PIDTYPE | @xml:lang)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Unknown attribute(s) in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M15"/></axsl:template><axsl:template match="text()" priority="-1" mode="M15"/><axsl:template match="@*|node()" priority="-2" mode="M15"><axsl:apply-templates select="@*|*" mode="M15"/></axsl:template>

<!--PATTERN mets_structMap_attribute_list-->


	<!--RULE -->
<axsl:template match="mets:structMap[(substring(normalize-space(/mets:mets/@PROFILE),0,44)='http://digitalpreservation.fi/mets-profiles')]" priority="1000" mode="M16"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:structMap[(substring(normalize-space(/mets:mets/@PROFILE),0,44)='http://digitalpreservation.fi/mets-profiles')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(@*) = count(@ID | @TYPE | @LABEL | @fi:PID | @fi:PIDTYPE)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(@*) = count(@ID | @TYPE | @LABEL | @fi:PID | @fi:PIDTYPE)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Unknown attribute(s) in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M16"/></axsl:template><axsl:template match="text()" priority="-1" mode="M16"/><axsl:template match="@*|node()" priority="-2" mode="M16"><axsl:apply-templates select="@*|*" mode="M16"/></axsl:template>

<!--PATTERN mets_metsHdr_attribute_list-->


	<!--RULE -->
<axsl:template match="mets:metsHdr[(true())]" priority="1000" mode="M17"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:metsHdr[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(@*) = count(@CREATEDATE | @LASTMODDATE | @RECORDSTATUS | @ID | @ADMID)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(@*) = count(@CREATEDATE | @LASTMODDATE | @RECORDSTATUS | @ID | @ADMID)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Unknown attribute(s) in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M17"/></axsl:template><axsl:template match="text()" priority="-1" mode="M17"/><axsl:template match="@*|node()" priority="-2" mode="M17"><axsl:apply-templates select="@*|*" mode="M17"/></axsl:template>

<!--PATTERN mets_fileSec_attribute_list-->


	<!--RULE -->
<axsl:template match="mets:fileSec[(true())]" priority="1000" mode="M18"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:fileSec[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(@*) = count(@ID)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(@*) = count(@ID)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Unknown attribute(s) in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M18"/></axsl:template><axsl:template match="text()" priority="-1" mode="M18"/><axsl:template match="@*|node()" priority="-2" mode="M18"><axsl:apply-templates select="@*|*" mode="M18"/></axsl:template>

<!--PATTERN mets_amdSec_root_attribute_list-->


	<!--RULE -->
<axsl:template match="mets:amdSec[(true())]" priority="1000" mode="M19"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:amdSec[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(@*) = count(@ID)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(@*) = count(@ID)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Unknown attribute(s) in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M19"/></axsl:template><axsl:template match="text()" priority="-1" mode="M19"/><axsl:template match="@*|node()" priority="-2" mode="M19"><axsl:apply-templates select="@*|*" mode="M19"/></axsl:template>

<!--PATTERN mets_fileGrp_attribute_list-->


	<!--RULE -->
<axsl:template match="mets:fileGrp[(true())]" priority="1000" mode="M20"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:fileGrp[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(@*) = count(@ID | @USE | @ADMID | @VERSDATE)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(@*) = count(@ID | @USE | @ADMID | @VERSDATE)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Unknown attribute(s) in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M20"/></axsl:template><axsl:template match="text()" priority="-1" mode="M20"/><axsl:template match="@*|node()" priority="-2" mode="M20"><axsl:apply-templates select="@*|*" mode="M20"/></axsl:template>

<!--PATTERN mets_fptr_attribute_list-->


	<!--RULE -->
<axsl:template match="mets:fptr[(true())]" priority="1000" mode="M21"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:fptr[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(@*) = count(@ID | @CONTENTIDS | @FILEID)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(@*) = count(@ID | @CONTENTIDS | @FILEID)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Unknown attribute(s) in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M21"/></axsl:template><axsl:template match="text()" priority="-1" mode="M21"/><axsl:template match="@*|node()" priority="-2" mode="M21"><axsl:apply-templates select="@*|*" mode="M21"/></axsl:template>

<!--PATTERN mets_file_attribute_list-->


	<!--RULE -->
<axsl:template match="mets:file[(true())]" priority="1000" mode="M22"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:file[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(@*) = count(@ID | @GROUPID | @OWNERID | @USE | @ADMID | @MIMETYPE | @SIZE | @CREATED | @CHECKSUM | @CHECKSUMTYPE | @SEQ | @DMDID | @BEGIN | @END | @BETYPE)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(@*) = count(@ID | @GROUPID | @OWNERID | @USE | @ADMID | @MIMETYPE | @SIZE | @CREATED | @CHECKSUM | @CHECKSUMTYPE | @SEQ | @DMDID | @BEGIN | @END | @BETYPE)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Unknown attribute(s) in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M22"/></axsl:template><axsl:template match="text()" priority="-1" mode="M22"/><axsl:template match="@*|node()" priority="-2" mode="M22"><axsl:apply-templates select="@*|*" mode="M22"/></axsl:template>

<!--PATTERN mets_par_attribute_list-->


	<!--RULE -->
<axsl:template match="mets:par[(true())]" priority="1000" mode="M23"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:par[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(@*) = count(@ID | @ORDER | @ORDERLABEL | @LABEL)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(@*) = count(@ID | @ORDER | @ORDERLABEL | @LABEL)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Unknown attribute(s) in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M23"/></axsl:template><axsl:template match="text()" priority="-1" mode="M23"/><axsl:template match="@*|node()" priority="-2" mode="M23"><axsl:apply-templates select="@*|*" mode="M23"/></axsl:template>

<!--PATTERN mets_seq_attribute_list-->


	<!--RULE -->
<axsl:template match="mets:seq[(true())]" priority="1000" mode="M24"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:seq[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(@*) = count(@ID | @ORDER | @ORDERLABEL | @LABEL)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(@*) = count(@ID | @ORDER | @ORDERLABEL | @LABEL)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Unknown attribute(s) in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M24"/></axsl:template><axsl:template match="text()" priority="-1" mode="M24"/><axsl:template match="@*|node()" priority="-2" mode="M24"><axsl:apply-templates select="@*|*" mode="M24"/></axsl:template>

<!--PATTERN mets_area_attribute_list-->


	<!--RULE -->
<axsl:template match="mets:area[(true())]" priority="1000" mode="M25"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:area[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(@*) = count(@ID | @ORDER | @ORDERLABEL | @LABEL | @FILEID | @SHAPE | @COORDS | @BEGIN | @END | @BETYPE | @EXTENT | @EXTTYPE | @ADMID | @CONTENTIDS)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(@*) = count(@ID | @ORDER | @ORDERLABEL | @LABEL | @FILEID | @SHAPE | @COORDS | @BEGIN | @END | @BETYPE | @EXTENT | @EXTTYPE | @ADMID | @CONTENTIDS)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Unknown attribute(s) in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M25"/></axsl:template><axsl:template match="text()" priority="-1" mode="M25"/><axsl:template match="@*|node()" priority="-2" mode="M25"><axsl:apply-templates select="@*|*" mode="M25"/></axsl:template>

<!--PATTERN mets_CATALOG_SPECIFICATION-->


	<!--RULE -->
<axsl:template match="mets:mets[(substring(@PROFILE,0,44)='http://digitalpreservation.fi/mets-profiles')]" priority="1000" mode="M26"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[(substring(@PROFILE,0,44)='http://digitalpreservation.fi/mets-profiles')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@fi:CATALOG or @fi:SPECIFICATION) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@fi:CATALOG or @fi:SPECIFICATION) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@fi:CATALOG')"/><axsl:text/>' or '<axsl:text/><axsl:value-of select="string('@fi:SPECIFICATION')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M26"/></axsl:template><axsl:template match="text()" priority="-1" mode="M26"/><axsl:template match="@*|node()" priority="-2" mode="M26"><axsl:apply-templates select="@*|*" mode="M26"/></axsl:template>

<!--PATTERN mets_specification-->


	<!--RULE -->
<axsl:template match="mets:mets[@fi:CATALOG and @fi:SPECIFICATION]" priority="1001" mode="M27"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[@fi:CATALOG and @fi:SPECIFICATION]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="normalize-space(@fi:CATALOG) = normalize-space(@fi:SPECIFICATION)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="normalize-space(@fi:CATALOG) = normalize-space(@fi:SPECIFICATION)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attributes '<axsl:text/><axsl:value-of select="name(@fi:CATALOG)"/><axsl:text/>' and '<axsl:text/><axsl:value-of select="name(@fi:SPECIFICATION)"/><axsl:text/>' must refer to the same specification.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M27"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:mets[@fikdk:CATALOG and @fikdk:SPECIFICATION]" priority="1000" mode="M27"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[@fikdk:CATALOG and @fikdk:SPECIFICATION]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="normalize-space(@fi:CATALOG) = normalize-space(@fi:SPECIFICATION)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="normalize-space(@fi:CATALOG) = normalize-space(@fi:SPECIFICATION)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
                                Attributes '<axsl:text/><axsl:value-of select="name(@fikdk:CATALOG)"/><axsl:text/>' and '<axsl:text/><axsl:value-of select="name(@fikdk:SPECIFICATION)"/><axsl:text/>' must refer to the same specification.
                        </svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M27"/></axsl:template><axsl:template match="text()" priority="-1" mode="M27"/><axsl:template match="@*|node()" priority="-2" mode="M27"><axsl:apply-templates select="@*|*" mode="M27"/></axsl:template>

<!--PATTERN mets_OBJID-->


	<!--RULE -->
<axsl:template match="mets:mets[(true())]" priority="1000" mode="M28"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@OBJID) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@OBJID) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@OBJID')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M28"/></axsl:template><axsl:template match="text()" priority="-1" mode="M28"/><axsl:template match="@*|node()" priority="-2" mode="M28"><axsl:apply-templates select="@*|*" mode="M28"/></axsl:template>

<!--PATTERN mets_OBJID_value-->


	<!--RULE -->
<axsl:template match="mets:mets[@OBJID and (true())]" priority="1000" mode="M29"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[@OBJID and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(string-length(normalize-space(@OBJID)) &gt; 0) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(string-length(normalize-space(@OBJID)) &gt; 0) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@OBJID)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' is not allowed to be empty. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M29"/></axsl:template><axsl:template match="text()" priority="-1" mode="M29"/><axsl:template match="@*|node()" priority="-2" mode="M29"><axsl:apply-templates select="@*|*" mode="M29"/></axsl:template>

<!--PATTERN mets_CONTRACTID-->


	<!--RULE -->
<axsl:template match="mets:mets[(substring(normalize-space(/mets:mets/@PROFILE),0,44)='http://digitalpreservation.fi/mets-profiles')]" priority="1000" mode="M30"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[(substring(normalize-space(/mets:mets/@PROFILE),0,44)='http://digitalpreservation.fi/mets-profiles')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@fi:CONTRACTID) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@fi:CONTRACTID) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@fi:CONTRACTID')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M30"/></axsl:template><axsl:template match="text()" priority="-1" mode="M30"/><axsl:template match="@*|node()" priority="-2" mode="M30"><axsl:apply-templates select="@*|*" mode="M30"/></axsl:template>

<!--PATTERN mets_CONTRACTID_value-->


	<!--RULE -->
<axsl:template match="mets:mets[@fi:CONTRACTID and (substring(normalize-space(/mets:mets/@PROFILE),0,44)='http://digitalpreservation.fi/mets-profiles')]" priority="1000" mode="M31"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[@fi:CONTRACTID and (substring(normalize-space(/mets:mets/@PROFILE),0,44)='http://digitalpreservation.fi/mets-profiles')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(string-length(normalize-space(@fi:CONTRACTID)) &gt; 0) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(string-length(normalize-space(@fi:CONTRACTID)) &gt; 0) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@fi:CONTRACTID)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' is not allowed to be empty. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M31"/></axsl:template><axsl:template match="text()" priority="-1" mode="M31"/><axsl:template match="@*|node()" priority="-2" mode="M31"><axsl:apply-templates select="@*|*" mode="M31"/></axsl:template>

<!--PATTERN mets_CONTENTID_value-->


	<!--RULE -->
<axsl:template match="mets:mets[@fi:CONTENTID and (true())]" priority="1000" mode="M32"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[@fi:CONTENTID and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(string-length(normalize-space(@fi:CONTENTID)) &gt; 0) or not(normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(string-length(normalize-space(@fi:CONTENTID)) &gt; 0) or not(normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@fi:CONTENTID)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' is not allowed to be empty. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M32"/></axsl:template><axsl:template match="text()" priority="-1" mode="M32"/><axsl:template match="@*|node()" priority="-2" mode="M32"><axsl:apply-templates select="@*|*" mode="M32"/></axsl:template>

<!--PATTERN mets_PROFILE-->


	<!--RULE -->
<axsl:template match="mets:mets[(true())]" priority="1000" mode="M33"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@PROFILE) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@PROFILE) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@PROFILE')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M33"/></axsl:template><axsl:template match="text()" priority="-1" mode="M33"/><axsl:template match="@*|node()" priority="-2" mode="M33"><axsl:apply-templates select="@*|*" mode="M33"/></axsl:template>

<!--PATTERN mets_metsHdr-->


	<!--RULE -->
<axsl:template match="mets:mets[(true())]" priority="1000" mode="M34"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./mets:metsHdr) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./mets:metsHdr) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('mets:metsHdr')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M34"/></axsl:template><axsl:template match="text()" priority="-1" mode="M34"/><axsl:template match="@*|node()" priority="-2" mode="M34"><axsl:apply-templates select="@*|*" mode="M34"/></axsl:template>

<!--PATTERN mets_dmdSec-->


	<!--RULE -->
<axsl:template match="mets:mets[(true())]" priority="1000" mode="M35"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./mets:dmdSec) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./mets:dmdSec) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('mets:dmdSec')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M35"/></axsl:template><axsl:template match="text()" priority="-1" mode="M35"/><axsl:template match="@*|node()" priority="-2" mode="M35"><axsl:apply-templates select="@*|*" mode="M35"/></axsl:template>

<!--PATTERN mets_amdSec-->


	<!--RULE -->
<axsl:template match="mets:mets[(true())]" priority="1000" mode="M36"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./mets:amdSec) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./mets:amdSec) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('mets:amdSec')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M36"/></axsl:template><axsl:template match="text()" priority="-1" mode="M36"/><axsl:template match="@*|node()" priority="-2" mode="M36"><axsl:apply-templates select="@*|*" mode="M36"/></axsl:template>

<!--PATTERN mets_amdSec_amdSec_max-->


	<!--RULE -->
<axsl:template match="mets:mets[mets:amdSec and (true())]" priority="1000" mode="M37"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[mets:amdSec and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(./mets:amdSec) &lt;= number(1)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(./mets:amdSec) &lt;= number(1)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Maximum of <axsl:text/><axsl:value-of select="1"/><axsl:text/> elements '<axsl:text/><axsl:value-of select="name(mets:amdSec)"/><axsl:text/>' are allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M37"/></axsl:template><axsl:template match="text()" priority="-1" mode="M37"/><axsl:template match="@*|node()" priority="-2" mode="M37"><axsl:apply-templates select="@*|*" mode="M37"/></axsl:template>

<!--PATTERN mets_structMap-->


	<!--RULE -->
<axsl:template match="mets:mets[(true())]" priority="1000" mode="M38"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./mets:structMap) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./mets:structMap) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('mets:structMap')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M38"/></axsl:template><axsl:template match="text()" priority="-1" mode="M38"/><axsl:template match="@*|node()" priority="-2" mode="M38"><axsl:apply-templates select="@*|*" mode="M38"/></axsl:template>

<!--PATTERN mets_structLink-->


	<!--RULE -->
<axsl:template match="mets:mets[(true())]" priority="1000" mode="M39"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./mets:structLink)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./mets:structLink)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(mets:structLink)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M39"/></axsl:template><axsl:template match="text()" priority="-1" mode="M39"/><axsl:template match="@*|node()" priority="-2" mode="M39"><axsl:apply-templates select="@*|*" mode="M39"/></axsl:template>

<!--PATTERN mets_behaviorSec-->


	<!--RULE -->
<axsl:template match="mets:mets[(true())]" priority="1000" mode="M40"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./mets:behaviorSec)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./mets:behaviorSec)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(mets:behaviorSec)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M40"/></axsl:template><axsl:template match="text()" priority="-1" mode="M40"/><axsl:template match="@*|node()" priority="-2" mode="M40"><axsl:apply-templates select="@*|*" mode="M40"/></axsl:template>

<!--PATTERN mets_metsHdr_CREATEDATE-->


	<!--RULE -->
<axsl:template match="mets:metsHdr[(true())]" priority="1000" mode="M41"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:metsHdr[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@CREATEDATE) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@CREATEDATE) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@CREATEDATE')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M41"/></axsl:template><axsl:template match="text()" priority="-1" mode="M41"/><axsl:template match="@*|node()" priority="-2" mode="M41"><axsl:apply-templates select="@*|*" mode="M41"/></axsl:template>

<!--PATTERN mets_RECORDSTATUS_values_csc-->


	<!--RULE -->
<axsl:template match="mets:metsHdr[@RECORDSTATUS and not(contains(@RECORDSTATUS, ';')) and (count(mets:agent)=1 and normalize-space(mets:agent/mets:name)='CSC - IT Center for Science Ltd.')]" priority="1001" mode="M42"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:metsHdr[@RECORDSTATUS and not(contains(@RECORDSTATUS, ';')) and (count(mets:agent)=1 and normalize-space(mets:agent/mets:name)='CSC - IT Center for Science Ltd.')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('submission; update; dissemination'),'; '), concat('; ',normalize-space(@RECORDSTATUS),'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('submission; update; dissemination'),'; '), concat('; ',normalize-space(@RECORDSTATUS),'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@RECORDSTATUS"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@RECORDSTATUS)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('submission; update; dissemination'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M42"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:metsHdr/@RECORDSTATUS[contains(., ';') and (count(mets:agent)=1 and normalize-space(mets:agent/mets:name)='CSC - IT Center for Science Ltd.')]" priority="1000" mode="M42"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:metsHdr/@RECORDSTATUS[contains(., ';') and (count(mets:agent)=1 and normalize-space(mets:agent/mets:name)='CSC - IT Center for Science Ltd.')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('submission; update; dissemination'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('submission; update; dissemination'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('submission; update; dissemination'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M42"/></axsl:template><axsl:template match="text()" priority="-1" mode="M42"/><axsl:template match="@*|node()" priority="-2" mode="M42"><axsl:apply-templates select="@*|*" mode="M42"/></axsl:template>

<!--PATTERN mets_RECORDSTATUS_values-->


	<!--RULE -->
<axsl:template match="mets:metsHdr[@RECORDSTATUS and not(contains(@RECORDSTATUS, ';')) and (count(mets:agent)!=1 or normalize-space(mets:agent/mets:name)!='CSC - IT Center for Science Ltd.')]" priority="1001" mode="M43"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:metsHdr[@RECORDSTATUS and not(contains(@RECORDSTATUS, ';')) and (count(mets:agent)!=1 or normalize-space(mets:agent/mets:name)!='CSC - IT Center for Science Ltd.')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('submission'),'; '), concat('; ',normalize-space(@RECORDSTATUS),'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('submission'),'; '), concat('; ',normalize-space(@RECORDSTATUS),'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@RECORDSTATUS"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@RECORDSTATUS)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('submission'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M43"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:metsHdr/@RECORDSTATUS[contains(., ';') and (count(mets:agent)!=1 or normalize-space(mets:agent/mets:name)!='CSC - IT Center for Science Ltd.')]" priority="1000" mode="M43"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:metsHdr/@RECORDSTATUS[contains(., ';') and (count(mets:agent)!=1 or normalize-space(mets:agent/mets:name)!='CSC - IT Center for Science Ltd.')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('submission'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('submission'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('submission'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M43"/></axsl:template><axsl:template match="text()" priority="-1" mode="M43"/><axsl:template match="@*|node()" priority="-2" mode="M43"><axsl:apply-templates select="@*|*" mode="M43"/></axsl:template>

<!--PATTERN mets_metsHdr_agent-->


	<!--RULE -->
<axsl:template match="mets:metsHdr[(true())]" priority="1000" mode="M44"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:metsHdr[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./mets:agent) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./mets:agent) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('mets:agent')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M44"/></axsl:template><axsl:template match="text()" priority="-1" mode="M44"/><axsl:template match="@*|node()" priority="-2" mode="M44"><axsl:apply-templates select="@*|*" mode="M44"/></axsl:template>

<!--PATTERN mets_agent_ROLE-->


	<!--RULE -->
<axsl:template match="mets:metsHdr/mets:agent[(true())]" priority="1000" mode="M45"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:metsHdr/mets:agent[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@ROLE) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@ROLE) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@ROLE')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M45"/></axsl:template><axsl:template match="text()" priority="-1" mode="M45"/><axsl:template match="@*|node()" priority="-2" mode="M45"><axsl:apply-templates select="@*|*" mode="M45"/></axsl:template>

<!--PATTERN mets_agent_TYPE-->


	<!--RULE -->
<axsl:template match="mets:metsHdr/mets:agent[(true())]" priority="1000" mode="M46"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:metsHdr/mets:agent[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@TYPE) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@TYPE) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@TYPE')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M46"/></axsl:template><axsl:template match="text()" priority="-1" mode="M46"/><axsl:template match="@*|node()" priority="-2" mode="M46"><axsl:apply-templates select="@*|*" mode="M46"/></axsl:template>

<!--PATTERN mets_agent_creator-->


	<!--RULE -->
<axsl:template match="mets:metsHdr[(true())]" priority="1000" mode="M47"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:metsHdr[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(mets:agent[normalize-space(@ROLE)=string('CREATOR') and normalize-space(@TYPE)=string('ORGANIZATION')]) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(mets:agent[normalize-space(@ROLE)=string('CREATOR') and normalize-space(@TYPE)=string('ORGANIZATION')]) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Such element 'mets:agent' is required in '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>', where attributes '@ROLE' and '@TYPE' include values '<axsl:text/><axsl:value-of select="string('CREATOR')"/><axsl:text/>' and '<axsl:text/><axsl:value-of select="string('ORGANIZATION')"/><axsl:text/>', respectively.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M47"/></axsl:template><axsl:template match="text()" priority="-1" mode="M47"/><axsl:template match="@*|node()" priority="-2" mode="M47"><axsl:apply-templates select="@*|*" mode="M47"/></axsl:template>

<!--PATTERN mets_metsHdr_altRecordID-->


	<!--RULE -->
<axsl:template match="mets:metsHdr[(true())]" priority="1000" mode="M48"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:metsHdr[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./mets:altRecordID)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./mets:altRecordID)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(mets:altRecordID)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M48"/></axsl:template><axsl:template match="text()" priority="-1" mode="M48"/><axsl:template match="@*|node()" priority="-2" mode="M48"><axsl:apply-templates select="@*|*" mode="M48"/></axsl:template>

<!--PATTERN mets_amdSec_techMD-->


	<!--RULE -->
<axsl:template match="mets:amdSec[(count(../mets:amdSec)=1)]" priority="1000" mode="M49"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:amdSec[(count(../mets:amdSec)=1)]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./mets:techMD) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./mets:techMD) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('mets:techMD')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M49"/></axsl:template><axsl:template match="text()" priority="-1" mode="M49"/><axsl:template match="@*|node()" priority="-2" mode="M49"><axsl:apply-templates select="@*|*" mode="M49"/></axsl:template>

<!--PATTERN mets_amdSec_digiprovMD-->


	<!--RULE -->
<axsl:template match="mets:amdSec[(count(../mets:amdSec)=1)]" priority="1000" mode="M50"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:amdSec[(count(../mets:amdSec)=1)]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./mets:digiprovMD) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./mets:digiprovMD) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('mets:digiprovMD')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M50"/></axsl:template><axsl:template match="text()" priority="-1" mode="M50"/><axsl:template match="@*|node()" priority="-2" mode="M50"><axsl:apply-templates select="@*|*" mode="M50"/></axsl:template>

<!--PATTERN mets_dmdSec_mdWrap-->


	<!--RULE -->
<axsl:template match="mets:dmdSec[(true())]" priority="1000" mode="M51"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./mets:mdWrap) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./mets:mdWrap) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('mets:mdWrap')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M51"/></axsl:template><axsl:template match="text()" priority="-1" mode="M51"/><axsl:template match="@*|node()" priority="-2" mode="M51"><axsl:apply-templates select="@*|*" mode="M51"/></axsl:template>

<!--PATTERN mets_dmdSec_mdRef-->


	<!--RULE -->
<axsl:template match="mets:dmdSec[(true())]" priority="1000" mode="M52"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./mets:mdRef)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./mets:mdRef)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(mets:mdRef)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M52"/></axsl:template><axsl:template match="text()" priority="-1" mode="M52"/><axsl:template match="@*|node()" priority="-2" mode="M52"><axsl:apply-templates select="@*|*" mode="M52"/></axsl:template>

<!--PATTERN mets_techMD_mdWrap-->


	<!--RULE -->
<axsl:template match="mets:techMD[(true())]" priority="1000" mode="M53"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./mets:mdWrap) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./mets:mdWrap) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('mets:mdWrap')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M53"/></axsl:template><axsl:template match="text()" priority="-1" mode="M53"/><axsl:template match="@*|node()" priority="-2" mode="M53"><axsl:apply-templates select="@*|*" mode="M53"/></axsl:template>

<!--PATTERN mets_techMD_mdRef-->


	<!--RULE -->
<axsl:template match="mets:techMD[(true())]" priority="1000" mode="M54"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./mets:mdRef)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./mets:mdRef)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(mets:mdRef)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M54"/></axsl:template><axsl:template match="text()" priority="-1" mode="M54"/><axsl:template match="@*|node()" priority="-2" mode="M54"><axsl:apply-templates select="@*|*" mode="M54"/></axsl:template>

<!--PATTERN mets_rightsMD_mdWrap-->


	<!--RULE -->
<axsl:template match="mets:rightsMD[(true())]" priority="1000" mode="M55"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:rightsMD[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./mets:mdWrap) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./mets:mdWrap) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('mets:mdWrap')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M55"/></axsl:template><axsl:template match="text()" priority="-1" mode="M55"/><axsl:template match="@*|node()" priority="-2" mode="M55"><axsl:apply-templates select="@*|*" mode="M55"/></axsl:template>

<!--PATTERN mets_rightsMD_mdRef-->


	<!--RULE -->
<axsl:template match="mets:rightsMD[(true())]" priority="1000" mode="M56"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:rightsMD[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./mets:mdRef)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./mets:mdRef)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(mets:mdRef)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M56"/></axsl:template><axsl:template match="text()" priority="-1" mode="M56"/><axsl:template match="@*|node()" priority="-2" mode="M56"><axsl:apply-templates select="@*|*" mode="M56"/></axsl:template>

<!--PATTERN mets_sourceMD_mdWrap-->


	<!--RULE -->
<axsl:template match="mets:sourceMD[(true())]" priority="1000" mode="M57"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:sourceMD[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./mets:mdWrap) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./mets:mdWrap) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('mets:mdWrap')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M57"/></axsl:template><axsl:template match="text()" priority="-1" mode="M57"/><axsl:template match="@*|node()" priority="-2" mode="M57"><axsl:apply-templates select="@*|*" mode="M57"/></axsl:template>

<!--PATTERN mets_sourceMD_mdRef-->


	<!--RULE -->
<axsl:template match="mets:sourceMD[(true())]" priority="1000" mode="M58"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:sourceMD[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./mets:mdRef)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./mets:mdRef)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(mets:mdRef)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M58"/></axsl:template><axsl:template match="text()" priority="-1" mode="M58"/><axsl:template match="@*|node()" priority="-2" mode="M58"><axsl:apply-templates select="@*|*" mode="M58"/></axsl:template>

<!--PATTERN mets_digiprovMD_mdWrap_mdRef-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD[(true())]" priority="1000" mode="M59"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./mets:mdWrap or ./mets:mdRef) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./mets:mdWrap or ./mets:mdRef) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('mets:mdWrap')"/><axsl:text/>' or '<axsl:text/><axsl:value-of select="string('mets:mdRef')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M59"/></axsl:template><axsl:template match="text()" priority="-1" mode="M59"/><axsl:template match="@*|node()" priority="-2" mode="M59"><axsl:apply-templates select="@*|*" mode="M59"/></axsl:template>

<!--PATTERN mets_dmdSec_CREATED-->


	<!--RULE -->
<axsl:template match="mets:dmdSec[(true())]" priority="1000" mode="M60"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@CREATED or @fi:CREATED) or not(normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@CREATED or @fi:CREATED) or not(normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@CREATED')"/><axsl:text/>' or '<axsl:text/><axsl:value-of select="string('@fi:CREATED')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(@CREATED and @fi:CREATED)) or not(normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(@CREATED and @fi:CREATED)) or not(normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Both attributes '<axsl:text/><axsl:value-of select="string('@CREATED')"/><axsl:text/>' and '<axsl:text/><axsl:value-of select="string('@fi:CREATED')"/><axsl:text/>' are not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M60"/></axsl:template><axsl:template match="text()" priority="-1" mode="M60"/><axsl:template match="@*|node()" priority="-2" mode="M60"><axsl:apply-templates select="@*|*" mode="M60"/></axsl:template>

<!--PATTERN mets_amdSec_CREATED-->


	<!--RULE -->
<axsl:template match="mets:amdSec/*[(true())]" priority="1000" mode="M61"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:amdSec/*[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@CREATED or @fi:CREATED) or not(normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@CREATED or @fi:CREATED) or not(normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@CREATED')"/><axsl:text/>' or '<axsl:text/><axsl:value-of select="string('@fi:CREATED')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(@CREATED and @fi:CREATED)) or not(normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(@CREATED and @fi:CREATED)) or not(normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Both attributes '<axsl:text/><axsl:value-of select="string('@CREATED')"/><axsl:text/>' and '<axsl:text/><axsl:value-of select="string('@fi:CREATED')"/><axsl:text/>' are not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M61"/></axsl:template><axsl:template match="text()" priority="-1" mode="M61"/><axsl:template match="@*|node()" priority="-2" mode="M61"><axsl:apply-templates select="@*|*" mode="M61"/></axsl:template>

<!--PATTERN mets_dmdSec_MDTYPE-->


	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap[@MDTYPE and not(contains(@MDTYPE, ';')) and (true())]" priority="1001" mode="M62"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap[@MDTYPE and not(contains(@MDTYPE, ';')) and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('MARC; DC; MODS; EAD; EAC-CPF; LIDO; VRA; DDI; OTHER'),'; '), concat('; ',normalize-space(@MDTYPE),'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('MARC; DC; MODS; EAD; EAC-CPF; LIDO; VRA; DDI; OTHER'),'; '), concat('; ',normalize-space(@MDTYPE),'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPE"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPE)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('MARC; DC; MODS; EAD; EAC-CPF; LIDO; VRA; DDI; OTHER'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M62"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap/@MDTYPE[contains(., ';') and (true())]" priority="1000" mode="M62"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap/@MDTYPE[contains(., ';') and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('MARC; DC; MODS; EAD; EAC-CPF; LIDO; VRA; DDI; OTHER'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('MARC; DC; MODS; EAD; EAC-CPF; LIDO; VRA; DDI; OTHER'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('MARC; DC; MODS; EAD; EAC-CPF; LIDO; VRA; DDI; OTHER'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M62"/></axsl:template><axsl:template match="text()" priority="-1" mode="M62"/><axsl:template match="@*|node()" priority="-2" mode="M62"><axsl:apply-templates select="@*|*" mode="M62"/></axsl:template>

<!--PATTERN mets_techMD_MDTYPE-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap[@MDTYPE and not(contains(@MDTYPE, ';')) and (true())]" priority="1001" mode="M63"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap[@MDTYPE and not(contains(@MDTYPE, ';')) and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('PREMIS:OBJECT; NISOIMG; TEXTMD; OTHER'),'; '), concat('; ',normalize-space(@MDTYPE),'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('PREMIS:OBJECT; NISOIMG; TEXTMD; OTHER'),'; '), concat('; ',normalize-space(@MDTYPE),'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPE"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPE)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('PREMIS:OBJECT; NISOIMG; TEXTMD; OTHER'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M63"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/@MDTYPE[contains(., ';') and (true())]" priority="1000" mode="M63"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/@MDTYPE[contains(., ';') and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('PREMIS:OBJECT; NISOIMG; TEXTMD; OTHER'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('PREMIS:OBJECT; NISOIMG; TEXTMD; OTHER'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('PREMIS:OBJECT; NISOIMG; TEXTMD; OTHER'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M63"/></axsl:template><axsl:template match="text()" priority="-1" mode="M63"/><axsl:template match="@*|node()" priority="-2" mode="M63"><axsl:apply-templates select="@*|*" mode="M63"/></axsl:template>

<!--PATTERN mets_rightsMD_MDTYPE-->


	<!--RULE -->
<axsl:template match="mets:rightsMD/mets:mdWrap[@MDTYPE and not(contains(@MDTYPE, ';')) and (true())]" priority="1001" mode="M64"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:rightsMD/mets:mdWrap[@MDTYPE and not(contains(@MDTYPE, ';')) and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('PREMIS:RIGHTS; OTHER'),'; '), concat('; ',normalize-space(@MDTYPE),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('PREMIS:RIGHTS; OTHER'),'; '), concat('; ',normalize-space(@MDTYPE),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPE"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPE)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('PREMIS:RIGHTS; OTHER'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M64"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:rightsMD/mets:mdWrap/@MDTYPE[contains(., ';') and (true())]" priority="1000" mode="M64"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:rightsMD/mets:mdWrap/@MDTYPE[contains(., ';') and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('PREMIS:RIGHTS; OTHER'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('PREMIS:RIGHTS; OTHER'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('PREMIS:RIGHTS; OTHER'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M64"/></axsl:template><axsl:template match="text()" priority="-1" mode="M64"/><axsl:template match="@*|node()" priority="-2" mode="M64"><axsl:apply-templates select="@*|*" mode="M64"/></axsl:template>

<!--PATTERN mets_digiprovMD_MDTYPE-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdWrap[@MDTYPE and not(contains(@MDTYPE, ';')) and (true())]" priority="1001" mode="M65"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdWrap[@MDTYPE and not(contains(@MDTYPE, ';')) and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('PREMIS:OBJECT; PREMIS:EVENT; PREMIS:AGENT; OTHER'),'; '), concat('; ',normalize-space(@MDTYPE),'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('PREMIS:OBJECT; PREMIS:EVENT; PREMIS:AGENT; OTHER'),'; '), concat('; ',normalize-space(@MDTYPE),'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPE"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPE)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('PREMIS:OBJECT; PREMIS:EVENT; PREMIS:AGENT; OTHER'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M65"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdWrap/@MDTYPE[contains(., ';') and (true())]" priority="1000" mode="M65"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdWrap/@MDTYPE[contains(., ';') and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('PREMIS:OBJECT; PREMIS:EVENT; PREMIS:AGENT; OTHER'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('PREMIS:OBJECT; PREMIS:EVENT; PREMIS:AGENT; OTHER'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('PREMIS:OBJECT; PREMIS:EVENT; PREMIS:AGENT; OTHER'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M65"/></axsl:template><axsl:template match="text()" priority="-1" mode="M65"/><axsl:template match="@*|node()" priority="-2" mode="M65"><axsl:apply-templates select="@*|*" mode="M65"/></axsl:template>

<!--PATTERN mets_dmdSec_PID-->


	<!--RULE -->
<axsl:template match="mets:dmdSec[(@fi:PIDTYPE)]" priority="1000" mode="M66"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec[(@fi:PIDTYPE)]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@fi:PID) or not(normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@fi:PID) or not(normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@fi:PID')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M66"/></axsl:template><axsl:template match="text()" priority="-1" mode="M66"/><axsl:template match="@*|node()" priority="-2" mode="M66"><axsl:apply-templates select="@*|*" mode="M66"/></axsl:template>

<!--PATTERN mets_amdSec_PID-->


	<!--RULE -->
<axsl:template match="mets:amdSec/*[(@fi:PIDTYPE)]" priority="1000" mode="M67"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:amdSec/*[(@fi:PIDTYPE)]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@fi:PID) or not(normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@fi:PID) or not(normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@fi:PID')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M67"/></axsl:template><axsl:template match="text()" priority="-1" mode="M67"/><axsl:template match="@*|node()" priority="-2" mode="M67"><axsl:apply-templates select="@*|*" mode="M67"/></axsl:template>

<!--PATTERN mets_dmdSec_PIDTYPE-->


	<!--RULE -->
<axsl:template match="mets:dmdSec[(@fi:PID)]" priority="1000" mode="M68"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec[(@fi:PID)]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@fi:PIDTYPE) or not(normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@fi:PIDTYPE) or not(normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@fi:PIDTYPE')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M68"/></axsl:template><axsl:template match="text()" priority="-1" mode="M68"/><axsl:template match="@*|node()" priority="-2" mode="M68"><axsl:apply-templates select="@*|*" mode="M68"/></axsl:template>

<!--PATTERN mets_amdSec_PIDTYPE-->


	<!--RULE -->
<axsl:template match="mets:amdSec/*[(@fi:PID)]" priority="1000" mode="M69"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:amdSec/*[(@fi:PID)]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@fi:PIDTYPE) or not(normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@fi:PIDTYPE) or not(normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@fi:PIDTYPE')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M69"/></axsl:template><axsl:template match="text()" priority="-1" mode="M69"/><axsl:template match="@*|node()" priority="-2" mode="M69"><axsl:apply-templates select="@*|*" mode="M69"/></axsl:template>

<!--PATTERN mets_mdWrap_xmlData-->


	<!--RULE -->
<axsl:template match="mets:mdWrap[(true())]" priority="1000" mode="M70"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mdWrap[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./mets:xmlData) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./mets:xmlData) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('mets:xmlData')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M70"/></axsl:template><axsl:template match="text()" priority="-1" mode="M70"/><axsl:template match="@*|node()" priority="-2" mode="M70"><axsl:apply-templates select="@*|*" mode="M70"/></axsl:template>

<!--PATTERN mets_mdWrap_binData-->


	<!--RULE -->
<axsl:template match="mets:mdWrap[(true())]" priority="1000" mode="M71"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mdWrap[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./mets:binData)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./mets:binData)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(mets:binData)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M71"/></axsl:template><axsl:template match="text()" priority="-1" mode="M71"/><axsl:template match="@*|node()" priority="-2" mode="M71"><axsl:apply-templates select="@*|*" mode="M71"/></axsl:template>

<!--PATTERN mets_OTHERMDTYPE-->


	<!--RULE -->
<axsl:template match="mets:mdWrap[(normalize-space(@MDTYPE)='OTHER')]" priority="1000" mode="M72"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mdWrap[(normalize-space(@MDTYPE)='OTHER')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@OTHERMDTYPE) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@OTHERMDTYPE) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@OTHERMDTYPE')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M72"/></axsl:template><axsl:template match="text()" priority="-1" mode="M72"/><axsl:template match="@*|node()" priority="-2" mode="M72"><axsl:apply-templates select="@*|*" mode="M72"/></axsl:template>

<!--PATTERN mets_no_OTHERMDTYPE-->


	<!--RULE -->
<axsl:template match="mets:mdWrap[(normalize-space(@MDTYPE)!='OTHER')]" priority="1000" mode="M73"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mdWrap[(normalize-space(@MDTYPE)!='OTHER')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(@OTHERMDTYPE)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(@OTHERMDTYPE)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@OTHERMDTYPE)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M73"/></axsl:template><axsl:template match="text()" priority="-1" mode="M73"/><axsl:template match="@*|node()" priority="-2" mode="M73"><axsl:apply-templates select="@*|*" mode="M73"/></axsl:template>

<!--PATTERN mets_mdWrap_CHECKSUM-->


	<!--RULE -->
<axsl:template match="mets:mdWrap[(@CHECKSUMTYPE)]" priority="1000" mode="M74"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mdWrap[(@CHECKSUMTYPE)]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@CHECKSUM) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@CHECKSUM) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@CHECKSUM')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M74"/></axsl:template><axsl:template match="text()" priority="-1" mode="M74"/><axsl:template match="@*|node()" priority="-2" mode="M74"><axsl:apply-templates select="@*|*" mode="M74"/></axsl:template>

<!--PATTERN mets_mdWrap_CHECKSUMTYPE-->


	<!--RULE -->
<axsl:template match="mets:mdWrap[(@CHECKSUM)]" priority="1000" mode="M75"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mdWrap[(@CHECKSUM)]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@CHECKSUMTYPE) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@CHECKSUMTYPE) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@CHECKSUMTYPE')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M75"/></axsl:template><axsl:template match="text()" priority="-1" mode="M75"/><axsl:template match="@*|node()" priority="-2" mode="M75"><axsl:apply-templates select="@*|*" mode="M75"/></axsl:template>

<!--PATTERN mets_MDTYPEVERSION-->


	<!--RULE -->
<axsl:template match="mets:mdWrap[(true())]" priority="1000" mode="M76"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mdWrap[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@MDTYPEVERSION) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@MDTYPEVERSION) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@MDTYPEVERSION')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M76"/></axsl:template><axsl:template match="text()" priority="-1" mode="M76"/><axsl:template match="@*|node()" priority="-2" mode="M76"><axsl:apply-templates select="@*|*" mode="M76"/></axsl:template>

<!--PATTERN mets_techMD_MDTYPEVERSION_values_OBJECT-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='PREMIS:OBJECT')]" priority="1001" mode="M77"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='PREMIS:OBJECT')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.2; 2.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.2; 2.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.2; 2.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M77"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='PREMIS:OBJECT')]" priority="1000" mode="M77"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='PREMIS:OBJECT')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.2; 2.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.2; 2.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.2; 2.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M77"/></axsl:template><axsl:template match="text()" priority="-1" mode="M77"/><axsl:template match="@*|node()" priority="-2" mode="M77"><axsl:apply-templates select="@*|*" mode="M77"/></axsl:template>

<!--PATTERN mets_techMD_MDTYPEVERSION_values_MIX-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='NISOIMG')]" priority="1001" mode="M78"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='NISOIMG')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.0'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.0'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.0'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M78"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='NISOIMG')]" priority="1000" mode="M78"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='NISOIMG')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.0'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.0'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.0'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M78"/></axsl:template><axsl:template match="text()" priority="-1" mode="M78"/><axsl:template match="@*|node()" priority="-2" mode="M78"><axsl:apply-templates select="@*|*" mode="M78"/></axsl:template>

<!--PATTERN mets_rightsMD_MDTYPEVERSION_values_RIGHTS-->


	<!--RULE -->
<axsl:template match="mets:rightsMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='PREMIS:RIGHTS')]" priority="1001" mode="M79"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:rightsMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='PREMIS:RIGHTS')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.2; 2.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.2; 2.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.2; 2.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M79"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:rightsMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='PREMIS:RIGHTS')]" priority="1000" mode="M79"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:rightsMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='PREMIS:RIGHTS')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.2; 2.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.2; 2.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.2; 2.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M79"/></axsl:template><axsl:template match="text()" priority="-1" mode="M79"/><axsl:template match="@*|node()" priority="-2" mode="M79"><axsl:apply-templates select="@*|*" mode="M79"/></axsl:template>

<!--PATTERN mets_digiprovMD_MDTYPEVERSION_values_OBJECT-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='PREMIS:OBJECT')]" priority="1001" mode="M80"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='PREMIS:OBJECT')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.2; 2.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.2; 2.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.2; 2.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M80"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='PREMIS:OBJECT')]" priority="1000" mode="M80"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='PREMIS:OBJECT')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.2; 2.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.2; 2.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.2; 2.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M80"/></axsl:template><axsl:template match="text()" priority="-1" mode="M80"/><axsl:template match="@*|node()" priority="-2" mode="M80"><axsl:apply-templates select="@*|*" mode="M80"/></axsl:template>

<!--PATTERN mets_digiprovMD_MDTYPEVERSION_values_EVENT-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='PREMIS:EVENT')]" priority="1001" mode="M81"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='PREMIS:EVENT')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.2; 2.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.2; 2.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.2; 2.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M81"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='PREMIS:EVENT')]" priority="1000" mode="M81"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='PREMIS:EVENT')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.2; 2.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.2; 2.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.2; 2.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M81"/></axsl:template><axsl:template match="text()" priority="-1" mode="M81"/><axsl:template match="@*|node()" priority="-2" mode="M81"><axsl:apply-templates select="@*|*" mode="M81"/></axsl:template>

<!--PATTERN mets_digiprovMD_MDTYPEVERSION_values_AGENT-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='PREMIS:AGENT')]" priority="1001" mode="M82"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='PREMIS:AGENT')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.2; 2.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.2; 2.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.2; 2.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M82"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='PREMIS:AGENT')]" priority="1000" mode="M82"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='PREMIS:AGENT')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.2; 2.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.2; 2.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.2; 2.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M82"/></axsl:template><axsl:template match="text()" priority="-1" mode="M82"/><axsl:template match="@*|node()" priority="-2" mode="M82"><axsl:apply-templates select="@*|*" mode="M82"/></axsl:template>

<!--PATTERN mets_dmdSec_MDTYPEVERSION_values_DC-->


	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='DC')]" priority="1001" mode="M83"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='DC')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('1.1'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('1.1'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('1.1'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M83"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='DC')]" priority="1000" mode="M83"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='DC')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('1.1'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('1.1'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('1.1'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M83"/></axsl:template><axsl:template match="text()" priority="-1" mode="M83"/><axsl:template match="@*|node()" priority="-2" mode="M83"><axsl:apply-templates select="@*|*" mode="M83"/></axsl:template>

<!--PATTERN mets_dmdSec_MDTYPEVERSION_values_MODS-->


	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='MODS')]" priority="1001" mode="M84"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='MODS')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('3.0; 3.1; 3.2; 3.3; 3.4; 3.5; 3.6'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('3.0; 3.1; 3.2; 3.3; 3.4; 3.5; 3.6'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('3.0; 3.1; 3.2; 3.3; 3.4; 3.5; 3.6'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M84"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='MODS')]" priority="1000" mode="M84"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='MODS')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('3.0; 3.1; 3.2; 3.3; 3.4; 3.5; 3.6'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('3.0; 3.1; 3.2; 3.3; 3.4; 3.5; 3.6'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('3.0; 3.1; 3.2; 3.3; 3.4; 3.5; 3.6'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M84"/></axsl:template><axsl:template match="text()" priority="-1" mode="M84"/><axsl:template match="@*|node()" priority="-2" mode="M84"><axsl:apply-templates select="@*|*" mode="M84"/></axsl:template>

<!--PATTERN mets_dmdSec_MDTYPEVERSION_values_EAD-->


	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='EAD')]" priority="1001" mode="M85"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='EAD')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2002'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2002'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2002'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M85"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='EAD')]" priority="1000" mode="M85"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='EAD')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2002'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2002'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2002'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M85"/></axsl:template><axsl:template match="text()" priority="-1" mode="M85"/><axsl:template match="@*|node()" priority="-2" mode="M85"><axsl:apply-templates select="@*|*" mode="M85"/></axsl:template>

<!--PATTERN mets_dmdSec_MDTYPEVERSION_values_EAC-->


	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='EAC-CPF')]" priority="1001" mode="M86"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='EAC-CPF')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2010'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2010'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2010'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M86"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='EAC-CPF')]" priority="1000" mode="M86"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='EAC-CPF')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2010'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2010'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2010'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M86"/></axsl:template><axsl:template match="text()" priority="-1" mode="M86"/><axsl:template match="@*|node()" priority="-2" mode="M86"><axsl:apply-templates select="@*|*" mode="M86"/></axsl:template>

<!--PATTERN mets_dmdSec_MDTYPEVERSION_values_LIDO-->


	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='LIDO')]" priority="1001" mode="M87"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='LIDO')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('1.0'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('1.0'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('1.0'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M87"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='LIDO')]" priority="1000" mode="M87"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='LIDO')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('1.0'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('1.0'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('1.0'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M87"/></axsl:template><axsl:template match="text()" priority="-1" mode="M87"/><axsl:template match="@*|node()" priority="-2" mode="M87"><axsl:apply-templates select="@*|*" mode="M87"/></axsl:template>

<!--PATTERN mets_dmdSec_MDTYPEVERSION_values_VRA-->


	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='VRA')]" priority="1001" mode="M88"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='VRA')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('4.0'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('4.0'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('4.0'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M88"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='VRA')]" priority="1000" mode="M88"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='VRA')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('4.0'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('4.0'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('4.0'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M88"/></axsl:template><axsl:template match="text()" priority="-1" mode="M88"/><axsl:template match="@*|node()" priority="-2" mode="M88"><axsl:apply-templates select="@*|*" mode="M88"/></axsl:template>

<!--PATTERN mets_dmdSec_MDTYPEVERSION_values_DDI-->


	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='DDI')]" priority="1001" mode="M89"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='DDI')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('3.2; 3.1; 2.5.1; 2.5; 2.1'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('3.2; 3.1; 2.5.1; 2.5; 2.1'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('3.2; 3.1; 2.5.1; 2.5; 2.1'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M89"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='DDI')]" priority="1000" mode="M89"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='DDI')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('3.2; 3.1; 2.5.1; 2.5; 2.1'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('3.2; 3.1; 2.5.1; 2.5; 2.1'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('3.2; 3.1; 2.5.1; 2.5; 2.1'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M89"/></axsl:template><axsl:template match="text()" priority="-1" mode="M89"/><axsl:template match="@*|node()" priority="-2" mode="M89"><axsl:apply-templates select="@*|*" mode="M89"/></axsl:template>

<!--PATTERN mets_dmdSec_MDTYPEVERSION_values_MARC-->


	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='MARC')]" priority="1001" mode="M90"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='MARC')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('marcxml=1.2;marc=marc21; marcxml=1.2;marc=finmarc'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('marcxml=1.2;marc=marc21; marcxml=1.2;marc=finmarc'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('marcxml=1.2;marc=marc21; marcxml=1.2;marc=finmarc'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M90"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='MARC')]" priority="1000" mode="M90"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='MARC')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('marcxml=1.2;marc=marc21; marcxml=1.2;marc=finmarc'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('marcxml=1.2;marc=marc21; marcxml=1.2;marc=finmarc'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('marcxml=1.2;marc=marc21; marcxml=1.2;marc=finmarc'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M90"/></axsl:template><axsl:template match="text()" priority="-1" mode="M90"/><axsl:template match="@*|node()" priority="-2" mode="M90"><axsl:apply-templates select="@*|*" mode="M90"/></axsl:template>

<!--PATTERN mets_techMD_MDTYPEVERSION_values_AudioMD-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='OTHER' and normalize-space(@OTHERMDTYPE)='AudioMD')]" priority="1001" mode="M91"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='OTHER' and normalize-space(@OTHERMDTYPE)='AudioMD')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.0'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.0'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.0'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M91"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='OTHER' and normalize-space(@OTHERMDTYPE)='AudioMD')]" priority="1000" mode="M91"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='OTHER' and normalize-space(@OTHERMDTYPE)='AudioMD')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.0'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.0'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.0'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M91"/></axsl:template><axsl:template match="text()" priority="-1" mode="M91"/><axsl:template match="@*|node()" priority="-2" mode="M91"><axsl:apply-templates select="@*|*" mode="M91"/></axsl:template>

<!--PATTERN mets_techMD_MDTYPEVERSION_values_VideoMD-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='OTHER' and normalize-space(@OTHERMDTYPE)='VideoMD')]" priority="1001" mode="M92"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='OTHER' and normalize-space(@OTHERMDTYPE)='VideoMD')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.0'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.0'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.0'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M92"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='OTHER' and normalize-space(@OTHERMDTYPE)='VideoMD')]" priority="1000" mode="M92"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='OTHER' and normalize-space(@OTHERMDTYPE)='VideoMD')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.0'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.0'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.0'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M92"/></axsl:template><axsl:template match="text()" priority="-1" mode="M92"/><axsl:template match="@*|node()" priority="-2" mode="M92"><axsl:apply-templates select="@*|*" mode="M92"/></axsl:template>

<!--PATTERN mets_techMD_MDTYPEVERSION_values_ADDML-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='OTHER' and normalize-space(@OTHERMDTYPE)='ADDML')]" priority="1001" mode="M93"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='OTHER' and normalize-space(@OTHERMDTYPE)='ADDML')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('8.2; 8.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('8.2; 8.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('8.2; 8.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M93"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='OTHER' and normalize-space(@OTHERMDTYPE)='ADDML')]" priority="1000" mode="M93"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='OTHER' and normalize-space(@OTHERMDTYPE)='ADDML')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('8.2; 8.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('8.2; 8.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('8.2; 8.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M93"/></axsl:template><axsl:template match="text()" priority="-1" mode="M93"/><axsl:template match="@*|node()" priority="-2" mode="M93"><axsl:apply-templates select="@*|*" mode="M93"/></axsl:template>

<!--PATTERN mets_techMD_MDTYPEVERSION_values_EAD3-->


	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='OTHER' and normalize-space(@OTHERMDTYPE)='EAD3')]" priority="1001" mode="M94"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='OTHER' and normalize-space(@OTHERMDTYPE)='EAD3')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('1.0.0'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('1.0.0'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('1.0.0'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M94"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='OTHER' and normalize-space(@OTHERMDTYPE)='EAD3')]" priority="1000" mode="M94"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='OTHER' and normalize-space(@OTHERMDTYPE)='EAD3')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('1.0.0'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('1.0.0'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('1.0.0'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M94"/></axsl:template><axsl:template match="text()" priority="-1" mode="M94"/><axsl:template match="@*|node()" priority="-2" mode="M94"><axsl:apply-templates select="@*|*" mode="M94"/></axsl:template>

<!--PATTERN mets_techMD_MDTYPEVERSION_values_DATACITE-->


	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='OTHER' and normalize-space(@OTHERMDTYPE)='DATACITE')]" priority="1001" mode="M95"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='OTHER' and normalize-space(@OTHERMDTYPE)='DATACITE')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('4.0'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('4.0'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('4.0'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M95"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='OTHER' and normalize-space(@OTHERMDTYPE)='DATACITE')]" priority="1000" mode="M95"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='OTHER' and normalize-space(@OTHERMDTYPE)='DATACITE')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('4.0'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('4.0'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('4.0'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M95"/></axsl:template><axsl:template match="text()" priority="-1" mode="M95"/><axsl:template match="@*|node()" priority="-2" mode="M95"><axsl:apply-templates select="@*|*" mode="M95"/></axsl:template>

<!--PATTERN mets_mdRef_OTHERMDTYPE-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdRef[(true())]" priority="1000" mode="M96"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdRef[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@OTHERMDTYPE) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@OTHERMDTYPE) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@OTHERMDTYPE')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M96"/></axsl:template><axsl:template match="text()" priority="-1" mode="M96"/><axsl:template match="@*|node()" priority="-2" mode="M96"><axsl:apply-templates select="@*|*" mode="M96"/></axsl:template>

<!--PATTERN mets_mdRef_OTHERLOCTYPE-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdRef[(true())]" priority="1000" mode="M97"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdRef[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@OTHERLOCTYPE) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@OTHERLOCTYPE) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@OTHERLOCTYPE')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M97"/></axsl:template><axsl:template match="text()" priority="-1" mode="M97"/><axsl:template match="@*|node()" priority="-2" mode="M97"><axsl:apply-templates select="@*|*" mode="M97"/></axsl:template>

<!--PATTERN mets_mdRef_href-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdRef[(true())]" priority="1000" mode="M98"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdRef[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@xlink:href) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@xlink:href) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@xlink:href')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M98"/></axsl:template><axsl:template match="text()" priority="-1" mode="M98"/><axsl:template match="@*|node()" priority="-2" mode="M98"><axsl:apply-templates select="@*|*" mode="M98"/></axsl:template>

<!--PATTERN mets_mdRef_type-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdRef[(true())]" priority="1000" mode="M99"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdRef[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@xlink:type) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@xlink:type) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@xlink:type')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M99"/></axsl:template><axsl:template match="text()" priority="-1" mode="M99"/><axsl:template match="@*|node()" priority="-2" mode="M99"><axsl:apply-templates select="@*|*" mode="M99"/></axsl:template>

<!--PATTERN mets_mdRef_CHECKSUM-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdRef[(@CHECKSUMTYPE)]" priority="1000" mode="M100"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdRef[(@CHECKSUMTYPE)]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@CHECKSUM) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@CHECKSUM) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@CHECKSUM')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M100"/></axsl:template><axsl:template match="text()" priority="-1" mode="M100"/><axsl:template match="@*|node()" priority="-2" mode="M100"><axsl:apply-templates select="@*|*" mode="M100"/></axsl:template>

<!--PATTERN mets_mdRef_CHECKSUMTYPE-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdRef[(@CHECKSUM)]" priority="1000" mode="M101"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdRef[(@CHECKSUM)]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@CHECKSUMTYPE) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@CHECKSUMTYPE) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@CHECKSUMTYPE')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M101"/></axsl:template><axsl:template match="text()" priority="-1" mode="M101"/><axsl:template match="@*|node()" priority="-2" mode="M101"><axsl:apply-templates select="@*|*" mode="M101"/></axsl:template>

<!--PATTERN mets_mdRef_MDTYPE_values-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdRef[@MDTYPE and not(contains(@MDTYPE, ';')) and (true())]" priority="1001" mode="M102"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdRef[@MDTYPE and not(contains(@MDTYPE, ';')) and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('OTHER'),'; '), concat('; ',normalize-space(@MDTYPE),'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('OTHER'),'; '), concat('; ',normalize-space(@MDTYPE),'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPE"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPE)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('OTHER'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M102"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdRef/@MDTYPE[contains(., ';') and (true())]" priority="1000" mode="M102"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdRef/@MDTYPE[contains(., ';') and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('OTHER'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('OTHER'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('OTHER'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M102"/></axsl:template><axsl:template match="text()" priority="-1" mode="M102"/><axsl:template match="@*|node()" priority="-2" mode="M102"><axsl:apply-templates select="@*|*" mode="M102"/></axsl:template>

<!--PATTERN mets_mdRef_OTHERMDTYPE_values-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdRef[@OTHERMDTYPE and not(contains(@OTHERMDTYPE, ';')) and (substring(normalize-space(/mets:mets/@PROFILE),0,44)='http://digitalpreservation.fi/mets-profiles')]" priority="1001" mode="M103"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdRef[@OTHERMDTYPE and not(contains(@OTHERMDTYPE, ';')) and (substring(normalize-space(/mets:mets/@PROFILE),0,44)='http://digitalpreservation.fi/mets-profiles')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('FiPreservationPlan'),'; '), concat('; ',normalize-space(@OTHERMDTYPE),'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('FiPreservationPlan'),'; '), concat('; ',normalize-space(@OTHERMDTYPE),'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@OTHERMDTYPE"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@OTHERMDTYPE)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('FiPreservationPlan'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M103"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdRef/@OTHERMDTYPE[contains(., ';') and (substring(normalize-space(/mets:mets/@PROFILE),0,44)='http://digitalpreservation.fi/mets-profiles')]" priority="1000" mode="M103"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdRef/@OTHERMDTYPE[contains(., ';') and (substring(normalize-space(/mets:mets/@PROFILE),0,44)='http://digitalpreservation.fi/mets-profiles')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('FiPreservationPlan'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('FiPreservationPlan'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('FiPreservationPlan'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M103"/></axsl:template><axsl:template match="text()" priority="-1" mode="M103"/><axsl:template match="@*|node()" priority="-2" mode="M103"><axsl:apply-templates select="@*|*" mode="M103"/></axsl:template>

<!--PATTERN mets_mdRef_LOCTYPE_values-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdRef[@LOCTYPE and not(contains(@LOCTYPE, ';')) and (true())]" priority="1001" mode="M104"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdRef[@LOCTYPE and not(contains(@LOCTYPE, ';')) and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('OTHER'),'; '), concat('; ',normalize-space(@LOCTYPE),'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('OTHER'),'; '), concat('; ',normalize-space(@LOCTYPE),'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@LOCTYPE"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@LOCTYPE)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('OTHER'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M104"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdRef/@LOCTYPE[contains(., ';') and (true())]" priority="1000" mode="M104"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdRef/@LOCTYPE[contains(., ';') and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('OTHER'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('OTHER'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('OTHER'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M104"/></axsl:template><axsl:template match="text()" priority="-1" mode="M104"/><axsl:template match="@*|node()" priority="-2" mode="M104"><axsl:apply-templates select="@*|*" mode="M104"/></axsl:template>

<!--PATTERN mets_mdRef_OTHERLOCTYPE_values-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdRef[@OTHERLOCTYPE and not(contains(@OTHERLOCTYPE, ';')) and (true())]" priority="1001" mode="M105"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdRef[@OTHERLOCTYPE and not(contains(@OTHERLOCTYPE, ';')) and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('PreservationPlanID'),'; '), concat('; ',normalize-space(@OTHERLOCTYPE),'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('PreservationPlanID'),'; '), concat('; ',normalize-space(@OTHERLOCTYPE),'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@OTHERLOCTYPE"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@OTHERLOCTYPE)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('PreservationPlanID'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M105"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdRef/@OTHERLOCTYPE[contains(., ';') and (true())]" priority="1000" mode="M105"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdRef/@OTHERLOCTYPE[contains(., ';') and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('PreservationPlanID'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('PreservationPlanID'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('PreservationPlanID'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M105"/></axsl:template><axsl:template match="text()" priority="-1" mode="M105"/><axsl:template match="@*|node()" priority="-2" mode="M105"><axsl:apply-templates select="@*|*" mode="M105"/></axsl:template>

<!--PATTERN mets_mdRef_type_values-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdRef[@xlink:type and not(contains(@xlink:type, ';')) and (true())]" priority="1001" mode="M106"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdRef[@xlink:type and not(contains(@xlink:type, ';')) and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('simple'),'; '), concat('; ',normalize-space(@xlink:type),'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('simple'),'; '), concat('; ',normalize-space(@xlink:type),'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@xlink:type"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@xlink:type)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('simple'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M106"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdRef/@xlink:type[contains(., ';') and (true())]" priority="1000" mode="M106"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdRef/@xlink:type[contains(., ';') and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('simple'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('simple'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('simple'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M106"/></axsl:template><axsl:template match="text()" priority="-1" mode="M106"/><axsl:template match="@*|node()" priority="-2" mode="M106"><axsl:apply-templates select="@*|*" mode="M106"/></axsl:template>

<!--PATTERN mets_fileGrp_file-->


	<!--RULE -->
<axsl:template match="mets:fileGrp[(true())]" priority="1000" mode="M107"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:fileGrp[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./mets:file) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./mets:file) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('mets:file')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M107"/></axsl:template><axsl:template match="text()" priority="-1" mode="M107"/><axsl:template match="@*|node()" priority="-2" mode="M107"><axsl:apply-templates select="@*|*" mode="M107"/></axsl:template>

<!--PATTERN mets_file_ADMID-->


	<!--RULE -->
<axsl:template match="mets:fileGrp/mets:file[(true())]" priority="1000" mode="M108"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:fileGrp/mets:file[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@ADMID) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@ADMID) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@ADMID')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M108"/></axsl:template><axsl:template match="text()" priority="-1" mode="M108"/><axsl:template match="@*|node()" priority="-2" mode="M108"><axsl:apply-templates select="@*|*" mode="M108"/></axsl:template>

<!--PATTERN mets_file_CHECKSUM-->


	<!--RULE -->
<axsl:template match="mets:fileGrp/mets:file[(@CHECKSUMTYPE)]" priority="1000" mode="M109"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:fileGrp/mets:file[(@CHECKSUMTYPE)]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@CHECKSUM) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@CHECKSUM) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@CHECKSUM')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M109"/></axsl:template><axsl:template match="text()" priority="-1" mode="M109"/><axsl:template match="@*|node()" priority="-2" mode="M109"><axsl:apply-templates select="@*|*" mode="M109"/></axsl:template>

<!--PATTERN mets_file_CHECKSUMTYPE-->


	<!--RULE -->
<axsl:template match="mets:fileGrp/mets:file[(@CHECKSUM)]" priority="1000" mode="M110"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:fileGrp/mets:file[(@CHECKSUM)]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@CHECKSUMTYPE) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@CHECKSUMTYPE) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@CHECKSUMTYPE')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M110"/></axsl:template><axsl:template match="text()" priority="-1" mode="M110"/><axsl:template match="@*|node()" priority="-2" mode="M110"><axsl:apply-templates select="@*|*" mode="M110"/></axsl:template>

<!--PATTERN mets_file_FLocat-->


	<!--RULE -->
<axsl:template match="mets:fileGrp/mets:file[(true())]" priority="1000" mode="M111"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:fileGrp/mets:file[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./mets:FLocat) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./mets:FLocat) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('mets:FLocat')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M111"/></axsl:template><axsl:template match="text()" priority="-1" mode="M111"/><axsl:template match="@*|node()" priority="-2" mode="M111"><axsl:apply-templates select="@*|*" mode="M111"/></axsl:template>

<!--PATTERN mets_file_FLocat_max-->


	<!--RULE -->
<axsl:template match="mets:fileGrp/mets:file[mets:FLocat and (true())]" priority="1000" mode="M112"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:fileGrp/mets:file[mets:FLocat and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(./mets:FLocat) &lt;= number(1)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(./mets:FLocat) &lt;= number(1)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Maximum of <axsl:text/><axsl:value-of select="1"/><axsl:text/> elements '<axsl:text/><axsl:value-of select="name(mets:FLocat)"/><axsl:text/>' are allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M112"/></axsl:template><axsl:template match="text()" priority="-1" mode="M112"/><axsl:template match="@*|node()" priority="-2" mode="M112"><axsl:apply-templates select="@*|*" mode="M112"/></axsl:template>

<!--PATTERN mets_file_FContent-->


	<!--RULE -->
<axsl:template match="mets:fileGrp/mets:file[(true())]" priority="1000" mode="M113"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:fileGrp/mets:file[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./mets:FContent)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./mets:FContent)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(mets:FContent)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M113"/></axsl:template><axsl:template match="text()" priority="-1" mode="M113"/><axsl:template match="@*|node()" priority="-2" mode="M113"><axsl:apply-templates select="@*|*" mode="M113"/></axsl:template>

<!--PATTERN mets_file_file-->


	<!--RULE -->
<axsl:template match="mets:fileGrp/mets:file[(true())]" priority="1000" mode="M114"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:fileGrp/mets:file[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./mets:file)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./mets:file)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(mets:file)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M114"/></axsl:template><axsl:template match="text()" priority="-1" mode="M114"/><axsl:template match="@*|node()" priority="-2" mode="M114"><axsl:apply-templates select="@*|*" mode="M114"/></axsl:template>

<!--PATTERN mets_file_transformFile-->


	<!--RULE -->
<axsl:template match="mets:fileGrp/mets:file[(true())]" priority="1000" mode="M115"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:fileGrp/mets:file[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./mets:transformFile)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./mets:transformFile)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(mets:transformFile)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M115"/></axsl:template><axsl:template match="text()" priority="-1" mode="M115"/><axsl:template match="@*|node()" priority="-2" mode="M115"><axsl:apply-templates select="@*|*" mode="M115"/></axsl:template>

<!--PATTERN mets_FLocat_href-->


	<!--RULE -->
<axsl:template match="mets:FLocat[(true())]" priority="1000" mode="M116"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:FLocat[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@xlink:href) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@xlink:href) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@xlink:href')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M116"/></axsl:template><axsl:template match="text()" priority="-1" mode="M116"/><axsl:template match="@*|node()" priority="-2" mode="M116"><axsl:apply-templates select="@*|*" mode="M116"/></axsl:template>

<!--PATTERN mets_FLocat_type-->


	<!--RULE -->
<axsl:template match="mets:FLocat[(true())]" priority="1000" mode="M117"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:FLocat[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@xlink:type) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@xlink:type) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@xlink:type')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M117"/></axsl:template><axsl:template match="text()" priority="-1" mode="M117"/><axsl:template match="@*|node()" priority="-2" mode="M117"><axsl:apply-templates select="@*|*" mode="M117"/></axsl:template>

<!--PATTERN mets_FLocat_OTHERLOCTYPE-->


	<!--RULE -->
<axsl:template match="mets:FLocat[(true())]" priority="1000" mode="M118"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:FLocat[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(@OTHERLOCTYPE)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(@OTHERLOCTYPE)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@OTHERLOCTYPE)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M118"/></axsl:template><axsl:template match="text()" priority="-1" mode="M118"/><axsl:template match="@*|node()" priority="-2" mode="M118"><axsl:apply-templates select="@*|*" mode="M118"/></axsl:template>

<!--PATTERN mets_FLocat_LOCTYPE-->


	<!--RULE -->
<axsl:template match="mets:FLocat[@LOCTYPE and not(contains(@LOCTYPE, ';')) and (true())]" priority="1001" mode="M119"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:FLocat[@LOCTYPE and not(contains(@LOCTYPE, ';')) and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('URL'),'; '), concat('; ',normalize-space(@LOCTYPE),'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('URL'),'; '), concat('; ',normalize-space(@LOCTYPE),'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@LOCTYPE"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@LOCTYPE)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('URL'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M119"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:FLocat/@LOCTYPE[contains(., ';') and (true())]" priority="1000" mode="M119"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:FLocat/@LOCTYPE[contains(., ';') and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('URL'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('URL'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('URL'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M119"/></axsl:template><axsl:template match="text()" priority="-1" mode="M119"/><axsl:template match="@*|node()" priority="-2" mode="M119"><axsl:apply-templates select="@*|*" mode="M119"/></axsl:template>

<!--PATTERN mets_FLocat_type_values-->


	<!--RULE -->
<axsl:template match="mets:FLocat[@xlink:type and not(contains(@xlink:type, ';')) and (true())]" priority="1001" mode="M120"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:FLocat[@xlink:type and not(contains(@xlink:type, ';')) and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('simple'),'; '), concat('; ',normalize-space(@xlink:type),'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('simple'),'; '), concat('; ',normalize-space(@xlink:type),'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@xlink:type"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@xlink:type)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('simple'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M120"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:FLocat/@xlink:type[contains(., ';') and (true())]" priority="1000" mode="M120"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:FLocat/@xlink:type[contains(., ';') and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('simple'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('simple'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('simple'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M120"/></axsl:template><axsl:template match="text()" priority="-1" mode="M120"/><axsl:template match="@*|node()" priority="-2" mode="M120"><axsl:apply-templates select="@*|*" mode="M120"/></axsl:template>

<!--PATTERN mets_structMap_div-->


	<!--RULE -->
<axsl:template match="mets:structMap[(true())]" priority="1000" mode="M121"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:structMap[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./mets:div) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./mets:div) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('mets:div')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M121"/></axsl:template><axsl:template match="text()" priority="-1" mode="M121"/><axsl:template match="@*|node()" priority="-2" mode="M121"><axsl:apply-templates select="@*|*" mode="M121"/></axsl:template>

<!--PATTERN mets_structMap_div_max-->


	<!--RULE -->
<axsl:template match="mets:structMap[mets:div and (true())]" priority="1000" mode="M122"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:structMap[mets:div and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(./mets:div) &lt;= number(1)) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(./mets:div) &lt;= number(1)) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Maximum of <axsl:text/><axsl:value-of select="1"/><axsl:text/> elements '<axsl:text/><axsl:value-of select="name(mets:div)"/><axsl:text/>' are allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M122"/></axsl:template><axsl:template match="text()" priority="-1" mode="M122"/><axsl:template match="@*|node()" priority="-2" mode="M122"><axsl:apply-templates select="@*|*" mode="M122"/></axsl:template>

<!--PATTERN mets_structMap_PID-->


	<!--RULE -->
<axsl:template match="mets:structMap[(@fi:PIDTYPE)]" priority="1000" mode="M123"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:structMap[(@fi:PIDTYPE)]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@fi:PID) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@fi:PID) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@fi:PID')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M123"/></axsl:template><axsl:template match="text()" priority="-1" mode="M123"/><axsl:template match="@*|node()" priority="-2" mode="M123"><axsl:apply-templates select="@*|*" mode="M123"/></axsl:template>

<!--PATTERN mets_structMap_PIDTYPE-->


	<!--RULE -->
<axsl:template match="mets:structMap[(@fi:PID)]" priority="1000" mode="M124"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:structMap[(@fi:PID)]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@fi:PIDTYPE) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@fi:PIDTYPE) or not(normalize-space(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@fi:PIDTYPE')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M124"/></axsl:template><axsl:template match="text()" priority="-1" mode="M124"/><axsl:template match="@*|node()" priority="-2" mode="M124"><axsl:apply-templates select="@*|*" mode="M124"/></axsl:template>

<!--PATTERN mets_div_TYPE-->


	<!--RULE -->
<axsl:template match="mets:div[(count(../mets:div)=1 or ..=./mets:div)]" priority="1000" mode="M125"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:div[(count(../mets:div)=1 or ..=./mets:div)]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@TYPE) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@TYPE) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@TYPE')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M125"/></axsl:template><axsl:template match="text()" priority="-1" mode="M125"/><axsl:template match="@*|node()" priority="-2" mode="M125"><axsl:apply-templates select="@*|*" mode="M125"/></axsl:template>

<!--PATTERN mets_fptr_FILEID-->


	<!--RULE -->
<axsl:template match="mets:fptr[(true())]" priority="1000" mode="M126"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:fptr[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@FILEID or .//mets:area) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@FILEID or .//mets:area) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@FILEID')"/><axsl:text/>' or element '<axsl:text/><axsl:value-of select="string('.//mets:area')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M126"/></axsl:template><axsl:template match="text()" priority="-1" mode="M126"/><axsl:template match="@*|node()" priority="-2" mode="M126"><axsl:apply-templates select="@*|*" mode="M126"/></axsl:template>

<!--PATTERN mets_mptr_href-->


	<!--RULE -->
<axsl:template match="mets:mptr[(true())]" priority="1000" mode="M127"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mptr[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@xlink:href) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@xlink:href) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@xlink:href')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M127"/></axsl:template><axsl:template match="text()" priority="-1" mode="M127"/><axsl:template match="@*|node()" priority="-2" mode="M127"><axsl:apply-templates select="@*|*" mode="M127"/></axsl:template>

<!--PATTERN mets_mptr_type-->


	<!--RULE -->
<axsl:template match="mets:mptr[(true())]" priority="1000" mode="M128"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mptr[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@xlink:type) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@xlink:type) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@xlink:type')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M128"/></axsl:template><axsl:template match="text()" priority="-1" mode="M128"/><axsl:template match="@*|node()" priority="-2" mode="M128"><axsl:apply-templates select="@*|*" mode="M128"/></axsl:template>

<!--PATTERN mets_mptr_OTHERLOCTYPE-->


	<!--RULE -->
<axsl:template match="mets:mptr[(true())]" priority="1000" mode="M129"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mptr[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(@OTHERLOCTYPE)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(@OTHERLOCTYPE)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@OTHERLOCTYPE)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M129"/></axsl:template><axsl:template match="text()" priority="-1" mode="M129"/><axsl:template match="@*|node()" priority="-2" mode="M129"><axsl:apply-templates select="@*|*" mode="M129"/></axsl:template>

<!--PATTERN mets_mptr_LOCTYPE_values-->


	<!--RULE -->
<axsl:template match="mets:mptr[@LOCTYPE and not(contains(@LOCTYPE, ';')) and (true())]" priority="1001" mode="M130"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mptr[@LOCTYPE and not(contains(@LOCTYPE, ';')) and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('URL'),'; '), concat('; ',normalize-space(@LOCTYPE),'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('URL'),'; '), concat('; ',normalize-space(@LOCTYPE),'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@LOCTYPE"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@LOCTYPE)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('URL'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M130"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:mptr/@LOCTYPE[contains(., ';') and (true())]" priority="1000" mode="M130"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mptr/@LOCTYPE[contains(., ';') and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('URL'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('URL'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('URL'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M130"/></axsl:template><axsl:template match="text()" priority="-1" mode="M130"/><axsl:template match="@*|node()" priority="-2" mode="M130"><axsl:apply-templates select="@*|*" mode="M130"/></axsl:template>

<!--PATTERN mets_mptr_type_values-->


	<!--RULE -->
<axsl:template match="mets:mptr[@xlink:type and not(contains(@xlink:type, ';')) and (true())]" priority="1001" mode="M131"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mptr[@xlink:type and not(contains(@xlink:type, ';')) and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('simple'),'; '), concat('; ',normalize-space(@xlink:type),'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('simple'),'; '), concat('; ',normalize-space(@xlink:type),'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@xlink:type"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@xlink:type)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('simple'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M131"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:mptr/@xlink:type[contains(., ';') and (true())]" priority="1000" mode="M131"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mptr/@xlink:type[contains(., ';') and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('simple'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('simple'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('simple'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M131"/></axsl:template><axsl:template match="text()" priority="-1" mode="M131"/><axsl:template match="@*|node()" priority="-2" mode="M131"><axsl:apply-templates select="@*|*" mode="M131"/></axsl:template><axsl:param name="dmdids" select="/mets:mets/mets:dmdSec/@ID"/><axsl:param name="admids" select="/mets:mets/mets:amdSec/*[self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]/@ID"/><axsl:param name="fileids" select="/mets:mets/mets:fileSec/mets:fileGrp/mets:file/@ID"/>

<!--PATTERN link_div_dmdid-->


	<!--RULE -->
<axsl:template match="mets:div[@DMDID]" priority="1000" mode="M135"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:div[@DMDID]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(sets:distinct(str:tokenize(normalize-space(@DMDID),' ') | exsl:node-set($dmdids))) = count(sets:distinct(exsl:node-set($dmdids))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(sets:distinct(str:tokenize(normalize-space(@DMDID),' ') | exsl:node-set($dmdids))) = count(sets:distinct(exsl:node-set($dmdids))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@DMDID"/><axsl:text/>' in attribute '<axsl:text/><axsl:value-of select="name(@DMDID)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' contains a link to nowhere. The corresponding target attribute '@ID' with the same value was not found.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M135"/></axsl:template><axsl:template match="text()" priority="-1" mode="M135"/><axsl:template match="@*|node()" priority="-2" mode="M135"><axsl:apply-templates select="@*|*" mode="M135"/></axsl:template>

<!--PATTERN link_file_admid-->


	<!--RULE -->
<axsl:template match="mets:file[@ADMID]" priority="1000" mode="M136"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:file[@ADMID]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(sets:distinct(str:tokenize(normalize-space(@ADMID),' ') | exsl:node-set($admids))) = count(sets:distinct(exsl:node-set($admids))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(sets:distinct(str:tokenize(normalize-space(@ADMID),' ') | exsl:node-set($admids))) = count(sets:distinct(exsl:node-set($admids))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@ADMID"/><axsl:text/>' in attribute '<axsl:text/><axsl:value-of select="name(@ADMID)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' contains a link to nowhere. The corresponding target attribute '@ID' with the same value was not found.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M136"/></axsl:template><axsl:template match="text()" priority="-1" mode="M136"/><axsl:template match="@*|node()" priority="-2" mode="M136"><axsl:apply-templates select="@*|*" mode="M136"/></axsl:template>

<!--PATTERN link_stream_admid-->


	<!--RULE -->
<axsl:template match="mets:stream[@ADMID]" priority="1000" mode="M137"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:stream[@ADMID]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(sets:distinct(str:tokenize(normalize-space(@ADMID),' ') | exsl:node-set($admids))) = count(sets:distinct(exsl:node-set($admids))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(sets:distinct(str:tokenize(normalize-space(@ADMID),' ') | exsl:node-set($admids))) = count(sets:distinct(exsl:node-set($admids))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@ADMID"/><axsl:text/>' in attribute '<axsl:text/><axsl:value-of select="name(@ADMID)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' contains a link to nowhere. The corresponding target attribute '@ID' with the same value was not found.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M137"/></axsl:template><axsl:template match="text()" priority="-1" mode="M137"/><axsl:template match="@*|node()" priority="-2" mode="M137"><axsl:apply-templates select="@*|*" mode="M137"/></axsl:template>

<!--PATTERN link_div_admid-->


	<!--RULE -->
<axsl:template match="mets:div[@ADMID]" priority="1000" mode="M138"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:div[@ADMID]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(sets:distinct(str:tokenize(normalize-space(@ADMID),' ') | exsl:node-set($admids))) = count(sets:distinct(exsl:node-set($admids))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(sets:distinct(str:tokenize(normalize-space(@ADMID),' ') | exsl:node-set($admids))) = count(sets:distinct(exsl:node-set($admids))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@ADMID"/><axsl:text/>' in attribute '<axsl:text/><axsl:value-of select="name(@ADMID)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' contains a link to nowhere. The corresponding target attribute '@ID' with the same value was not found.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M138"/></axsl:template><axsl:template match="text()" priority="-1" mode="M138"/><axsl:template match="@*|node()" priority="-2" mode="M138"><axsl:apply-templates select="@*|*" mode="M138"/></axsl:template>

<!--PATTERN link_fptr_fileid-->


	<!--RULE -->
<axsl:template match="mets:fptr[@FILEID]" priority="1000" mode="M139"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:fptr[@FILEID]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(sets:distinct(str:tokenize(normalize-space(@FILEID),' ') | exsl:node-set($fileids))) = count(sets:distinct(exsl:node-set($fileids))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(sets:distinct(str:tokenize(normalize-space(@FILEID),' ') | exsl:node-set($fileids))) = count(sets:distinct(exsl:node-set($fileids))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@FILEID"/><axsl:text/>' in attribute '<axsl:text/><axsl:value-of select="name(@FILEID)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' contains a link to nowhere. The corresponding target attribute '@ID' with the same value was not found.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M139"/></axsl:template><axsl:template match="text()" priority="-1" mode="M139"/><axsl:template match="@*|node()" priority="-2" mode="M139"><axsl:apply-templates select="@*|*" mode="M139"/></axsl:template>

<!--PATTERN link_area_fileid-->


	<!--RULE -->
<axsl:template match="mets:area[@FILEID]" priority="1000" mode="M140"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:area[@FILEID]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(sets:distinct(str:tokenize(normalize-space(@FILEID),' ') | exsl:node-set($fileids))) = count(sets:distinct(exsl:node-set($fileids))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(sets:distinct(str:tokenize(normalize-space(@FILEID),' ') | exsl:node-set($fileids))) = count(sets:distinct(exsl:node-set($fileids))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@FILEID"/><axsl:text/>' in attribute '<axsl:text/><axsl:value-of select="name(@FILEID)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' contains a link to nowhere. The corresponding target attribute '@ID' with the same value was not found.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M140"/></axsl:template><axsl:template match="text()" priority="-1" mode="M140"/><axsl:template match="@*|node()" priority="-2" mode="M140"><axsl:apply-templates select="@*|*" mode="M140"/></axsl:template><axsl:param name="divlinks" select="/mets:mets/mets:structMap//mets:div"/><axsl:param name="filelinks" select="/mets:mets/mets:fileSec/mets:fileGrp/mets:file"/><axsl:param name="streamlinks" select="/mets:mets/mets:fileSec/mets:fileGrp/mets:file/mets:stream"/><axsl:param name="fileidfptrlinks" select="/mets:mets/mets:structMap//mets:fptr"/><axsl:param name="fileidarealinks" select="/mets:mets/mets:structMap//mets:area"/>

<!--PATTERN id_references_desc-->


	<!--RULE -->
<axsl:template match="mets:dmdSec" priority="1000" mode="M146"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec"/><axsl:variable name="id" select="normalize-space(@ID)"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="count($divlinks[contains(concat(' ', normalize-space(@DMDID), ' '), concat(' ', $id, ' '))]) &gt; 0"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="count($divlinks[contains(concat(' ', normalize-space(@DMDID), ' '), concat(' ', $id, ' '))]) &gt; 0"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Section containing value '<axsl:text/><axsl:value-of select="@ID"/><axsl:text/>' in attribute '<axsl:text/><axsl:value-of select="name(@ID)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' requires a reference from attribute '@DMDID'.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M146"/></axsl:template><axsl:template match="text()" priority="-1" mode="M146"/><axsl:template match="@*|node()" priority="-2" mode="M146"><axsl:apply-templates select="@*|*" mode="M146"/></axsl:template>

<!--PATTERN id_references_adm-->


	<!--RULE -->
<axsl:template match="mets:techMD | mets:rightsMD | mets:sourceMD | mets:digiprovMD" priority="1000" mode="M147"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD | mets:rightsMD | mets:sourceMD | mets:digiprovMD"/><axsl:variable name="id" select="normalize-space(@ID)"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="count($filelinks[contains(concat(' ', normalize-space(@ADMID), ' '), concat(' ', $id, ' '))]) &gt; 0    or count($divlinks[contains(concat(' ', normalize-space(@ADMID), ' '), concat(' ', $id, ' '))]) &gt; 0    or count($streamlinks[contains(concat(' ', normalize-space(@ADMID), ' '), concat(' ', $id, ' '))]) &gt; 0"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="count($filelinks[contains(concat(' ', normalize-space(@ADMID), ' '), concat(' ', $id, ' '))]) &gt; 0 or count($divlinks[contains(concat(' ', normalize-space(@ADMID), ' '), concat(' ', $id, ' '))]) &gt; 0 or count($streamlinks[contains(concat(' ', normalize-space(@ADMID), ' '), concat(' ', $id, ' '))]) &gt; 0"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Section containing value '<axsl:text/><axsl:value-of select="@ID"/><axsl:text/>' in attribute '<axsl:text/><axsl:value-of select="name(@ID)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' requires a reference from attribute '@ADMID'.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M147"/></axsl:template><axsl:template match="text()" priority="-1" mode="M147"/><axsl:template match="@*|node()" priority="-2" mode="M147"><axsl:apply-templates select="@*|*" mode="M147"/></axsl:template>

<!--PATTERN id_references_file-->


	<!--RULE -->
<axsl:template match="mets:fileGrp/mets:file" priority="1000" mode="M148"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:fileGrp/mets:file"/><axsl:variable name="id" select="normalize-space(@ID)"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="count($fileidfptrlinks[contains(concat(' ', normalize-space(@FILEID), ' '), concat(' ', $id, ' '))]) &gt; 0    or count($fileidarealinks[contains(concat(' ', normalize-space(@FILEID), ' '), concat(' ', $id, ' '))]) &gt; 0"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="count($fileidfptrlinks[contains(concat(' ', normalize-space(@FILEID), ' '), concat(' ', $id, ' '))]) &gt; 0 or count($fileidarealinks[contains(concat(' ', normalize-space(@FILEID), ' '), concat(' ', $id, ' '))]) &gt; 0"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Section containing value '<axsl:text/><axsl:value-of select="@ID"/><axsl:text/>' in attribute '<axsl:text/><axsl:value-of select="name(@ID)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' requires a reference from attribute '@FILEID'.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M148"/></axsl:template><axsl:template match="text()" priority="-1" mode="M148"/><axsl:template match="@*|node()" priority="-2" mode="M148"><axsl:apply-templates select="@*|*" mode="M148"/></axsl:template>

<!--PATTERN unique_objid-->


	<!--RULE -->
<axsl:template match="mets:mets[@OBJID and ancestor-or-self::mets:mets//@ID]" priority="1000" mode="M149"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[@OBJID and ancestor-or-self::mets:mets//@ID]"/><axsl:variable name="objid" select="normalize-space(@OBJID)"/><axsl:variable name="same_id_count" select="count(.//@ID[.=$objid])"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="$same_id_count = 0"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="$same_id_count = 0"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@OBJID"/><axsl:text/>' in attribute '<axsl:text/><axsl:value-of select="name(@OBJID)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' is required to be unique. Another attribute 'ID' with the same value exists.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not($objid = normalize-space(@fi:CONTENTID)) or not(@fi:CONTENTID)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not($objid = normalize-space(@fi:CONTENTID)) or not(@fi:CONTENTID)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
                                Value '<axsl:text/><axsl:value-of select="@OBJID"/><axsl:text/>' in attribute '<axsl:text/><axsl:value-of select="name(@OBJID)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' is required to be unique. Another attribute '<axsl:text/><axsl:value-of select="name(@fi:CONTENTID)"/><axsl:text/>' with the same value exists.
                        </svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not($objid = normalize-space(@fikdk:CONTENTID)) or not(@fikdk:CONTENTID)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not($objid = normalize-space(@fikdk:CONTENTID)) or not(@fikdk:CONTENTID)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@OBJID"/><axsl:text/>' in attribute '<axsl:text/><axsl:value-of select="name(@OBJID)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' is required to be unique. Another attribute '<axsl:text/><axsl:value-of select="name(@fikdk:CONTENTID)"/><axsl:text/>' with the same value exists.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not($objid = normalize-space(@fi:CONTRACTID)) or not(@fi:CONTRACTID)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not($objid = normalize-space(@fi:CONTRACTID)) or not(@fi:CONTRACTID)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
                                Value '<axsl:text/><axsl:value-of select="@OBJID"/><axsl:text/>' in attribute '<axsl:text/><axsl:value-of select="name(@OBJID)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' is required to be unique. Another attribute '<axsl:text/><axsl:value-of select="name(@fi:CONTRACTID)"/><axsl:text/>' with the same value exists.
                        </svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M149"/></axsl:template><axsl:template match="text()" priority="-1" mode="M149"/><axsl:template match="@*|node()" priority="-2" mode="M149"><axsl:apply-templates select="@*|*" mode="M149"/></axsl:template>

<!--PATTERN mets_mets_attribute_list_old-->


	<!--RULE -->
<axsl:template match="mets:mets[(normalize-space(/mets:mets/@PROFILE)='http://www.kdk.fi/kdk-mets-profile')]" priority="1000" mode="M150"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[(normalize-space(/mets:mets/@PROFILE)='http://www.kdk.fi/kdk-mets-profile')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(@*) = count(@xsi:schemaLocation | @PROFILE | @OBJID | @LABEL | @ID | @TYPE | @fikdk:CATALOG | @fikdk:SPECIFICATION | @fikdk:CONTENTID)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(@*) = count(@xsi:schemaLocation | @PROFILE | @OBJID | @LABEL | @ID | @TYPE | @fikdk:CATALOG | @fikdk:SPECIFICATION | @fikdk:CONTENTID)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Unknown attribute(s) in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M150"/></axsl:template><axsl:template match="text()" priority="-1" mode="M150"/><axsl:template match="@*|node()" priority="-2" mode="M150"><axsl:apply-templates select="@*|*" mode="M150"/></axsl:template>

<!--PATTERN mets_dmdSec_attribute_list_old-->


	<!--RULE -->
<axsl:template match="mets:dmdSec[(normalize-space(/mets:mets/@PROFILE)='http://www.kdk.fi/kdk-mets-profile')]" priority="1000" mode="M151"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec[(normalize-space(/mets:mets/@PROFILE)='http://www.kdk.fi/kdk-mets-profile')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(@*) = count(@ID | @CREATED | @GROUPID | @ADMID | @STATUS | @fikdk:CREATED | @fikdk:PID | @fikdk:PIDTYPE | @xml:lang)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(@*) = count(@ID | @CREATED | @GROUPID | @ADMID | @STATUS | @fikdk:CREATED | @fikdk:PID | @fikdk:PIDTYPE | @xml:lang)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Unknown attribute(s) in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M151"/></axsl:template><axsl:template match="text()" priority="-1" mode="M151"/><axsl:template match="@*|node()" priority="-2" mode="M151"><axsl:apply-templates select="@*|*" mode="M151"/></axsl:template>

<!--PATTERN mets_amdSec_attribute_list_old-->


	<!--RULE -->
<axsl:template match="mets:amdSec/*[(normalize-space(/mets:mets/@PROFILE)='http://www.kdk.fi/kdk-mets-profile')]" priority="1000" mode="M152"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:amdSec/*[(normalize-space(/mets:mets/@PROFILE)='http://www.kdk.fi/kdk-mets-profile')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(@*) = count(@ID | @CREATED | @GROUPID | @ADMID | @STATUS | @fikdk:CREATED | @fikdk:PID | @fikdk:PIDTYPE | @xml:lang)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(@*) = count(@ID | @CREATED | @GROUPID | @ADMID | @STATUS | @fikdk:CREATED | @fikdk:PID | @fikdk:PIDTYPE | @xml:lang)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Unknown attribute(s) in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M152"/></axsl:template><axsl:template match="text()" priority="-1" mode="M152"/><axsl:template match="@*|node()" priority="-2" mode="M152"><axsl:apply-templates select="@*|*" mode="M152"/></axsl:template>

<!--PATTERN mets_structMap_attribute_list_old-->


	<!--RULE -->
<axsl:template match="mets:structMap[(normalize-space(/mets:mets/@PROFILE)='http://www.kdk.fi/kdk-mets-profile')]" priority="1000" mode="M153"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:structMap[(normalize-space(/mets:mets/@PROFILE)='http://www.kdk.fi/kdk-mets-profile')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(@*) = count(@ID | @TYPE | @LABEL | @fikdk:PID | @fikdk:PIDTYPE)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(@*) = count(@ID | @TYPE | @LABEL | @fikdk:PID | @fikdk:PIDTYPE)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Unknown attribute(s) in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M153"/></axsl:template><axsl:template match="text()" priority="-1" mode="M153"/><axsl:template match="@*|node()" priority="-2" mode="M153"><axsl:apply-templates select="@*|*" mode="M153"/></axsl:template>

<!--PATTERN mets_CATALOG_SPECIFICATION_old-->


	<!--RULE -->
<axsl:template match="mets:mets[(@PROFILE='http://www.kdk.fi/kdk-mets-profile')]" priority="1000" mode="M154"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[(@PROFILE='http://www.kdk.fi/kdk-mets-profile')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@fikdk:CATALOG or @fikdk:SPECIFICATION) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@fikdk:CATALOG or @fikdk:SPECIFICATION) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and (contains(concat('; ',normalize-space(string('')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@fikdk:CATALOG')"/><axsl:text/>' or '<axsl:text/><axsl:value-of select="string('@fikdk:SPECIFICATION')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M154"/></axsl:template><axsl:template match="text()" priority="-1" mode="M154"/><axsl:template match="@*|node()" priority="-2" mode="M154"><axsl:apply-templates select="@*|*" mode="M154"/></axsl:template>

<!--PATTERN mets_specification_old-->


	<!--RULE -->
<axsl:template match="mets:mets[@fi:CATALOG and @fi:SPECIFICATION]" priority="1001" mode="M155"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[@fi:CATALOG and @fi:SPECIFICATION]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="normalize-space(@fikdk:CATALOG) = normalize-space(@fikdk:SPECIFICATION)                         or (normalize-space(@fikdk:CATALOG)='1.4.1' and normalize-space(@fikdk:SPECIFICATION)='1.4')                         or (normalize-space(@fikdk:CATALOG)='1.6.0' and normalize-space(@fikdk:SPECIFICATION)='1.6.1')"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="normalize-space(@fikdk:CATALOG) = normalize-space(@fikdk:SPECIFICATION) or (normalize-space(@fikdk:CATALOG)='1.4.1' and normalize-space(@fikdk:SPECIFICATION)='1.4') or (normalize-space(@fikdk:CATALOG)='1.6.0' and normalize-space(@fikdk:SPECIFICATION)='1.6.1')"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attributes '<axsl:text/><axsl:value-of select="name(@fi:CATALOG)"/><axsl:text/>' and '<axsl:text/><axsl:value-of select="name(@fi:SPECIFICATION)"/><axsl:text/>' must refer to the same specification.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M155"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:mets[@fikdk:CATALOG and @fikdk:SPECIFICATION]" priority="1000" mode="M155"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[@fikdk:CATALOG and @fikdk:SPECIFICATION]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="normalize-space(@fikdk:CATALOG) = normalize-space(@fikdk:SPECIFICATION)                         or (normalize-space(@fikdk:CATALOG)='1.4.1' and normalize-space(@fikdk:SPECIFICATION)='1.4')                         or (normalize-space(@fikdk:CATALOG)='1.6.0' and normalize-space(@fikdk:SPECIFICATION)='1.6.1')"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="normalize-space(@fikdk:CATALOG) = normalize-space(@fikdk:SPECIFICATION) or (normalize-space(@fikdk:CATALOG)='1.4.1' and normalize-space(@fikdk:SPECIFICATION)='1.4') or (normalize-space(@fikdk:CATALOG)='1.6.0' and normalize-space(@fikdk:SPECIFICATION)='1.6.1')"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
                                Attributes '<axsl:text/><axsl:value-of select="name(@fikdk:CATALOG)"/><axsl:text/>' and '<axsl:text/><axsl:value-of select="name(@fikdk:SPECIFICATION)"/><axsl:text/>' must refer to the same specification.
                        </svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M155"/></axsl:template><axsl:template match="text()" priority="-1" mode="M155"/><axsl:template match="@*|node()" priority="-2" mode="M155"><axsl:apply-templates select="@*|*" mode="M155"/></axsl:template>

<!--PATTERN mets_CONTENTID_value_old-->


	<!--RULE -->
<axsl:template match="mets:mets[@fikdk:CONTENTID and (true())]" priority="1000" mode="M156"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[@fikdk:CONTENTID and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(string-length(normalize-space(@fikdk:CONTENTID)) &gt; 0) or not(normalize-space(string('1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(string-length(normalize-space(@fikdk:CONTENTID)) &gt; 0) or not(normalize-space(string('1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@fikdk:CONTENTID)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' is not allowed to be empty. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M156"/></axsl:template><axsl:template match="text()" priority="-1" mode="M156"/><axsl:template match="@*|node()" priority="-2" mode="M156"><axsl:apply-templates select="@*|*" mode="M156"/></axsl:template>

<!--PATTERN mets_no_CONTENTID_old-->


	<!--RULE -->
<axsl:template match="mets:mets[(true())]" priority="1000" mode="M157"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(@fikdk:CONTENTID)) or not(normalize-space(string('1.4; 1.4.1; 1.5.0'))=''    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(@fikdk:CONTENTID)) or not(normalize-space(string('1.4; 1.4.1; 1.5.0'))='' or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@fikdk:CONTENTID)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M157"/></axsl:template><axsl:template match="text()" priority="-1" mode="M157"/><axsl:template match="@*|node()" priority="-2" mode="M157"><axsl:apply-templates select="@*|*" mode="M157"/></axsl:template>

<!--PATTERN mets_no_CONTENTID-->


	<!--RULE -->
<axsl:template match="mets:mets[(true())]" priority="1000" mode="M158"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(@fi:CONTENTID)) or not(normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(@fi:CONTENTID)) or not(normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@fi:CONTENTID)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M158"/></axsl:template><axsl:template match="text()" priority="-1" mode="M158"/><axsl:template match="@*|node()" priority="-2" mode="M158"><axsl:apply-templates select="@*|*" mode="M158"/></axsl:template>

<!--PATTERN mets_dmdSec_CREATED_old-->


	<!--RULE -->
<axsl:template match="mets:dmdSec[(true())]" priority="1000" mode="M159"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@CREATED or @fikdk:CREATED) or not(normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@CREATED or @fikdk:CREATED) or not(normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@CREATED')"/><axsl:text/>' or '<axsl:text/><axsl:value-of select="string('@fikdk:CREATED')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(@CREATED and @fikdk:CREATED)) or not(normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(@CREATED and @fikdk:CREATED)) or not(normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Both attributes '<axsl:text/><axsl:value-of select="string('@CREATED')"/><axsl:text/>' and '<axsl:text/><axsl:value-of select="string('@fikdk:CREATED')"/><axsl:text/>' are not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M159"/></axsl:template><axsl:template match="text()" priority="-1" mode="M159"/><axsl:template match="@*|node()" priority="-2" mode="M159"><axsl:apply-templates select="@*|*" mode="M159"/></axsl:template>

<!--PATTERN mets_amdSec_CREATED_old-->


	<!--RULE -->
<axsl:template match="mets:amdSec/*[(true())]" priority="1000" mode="M160"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:amdSec/*[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@CREATED or @fikdk:CREATED) or not(normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@CREATED or @fikdk:CREATED) or not(normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@CREATED')"/><axsl:text/>' or '<axsl:text/><axsl:value-of select="string('@fikdk:CREATED')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(@CREATED and @fikdk:CREATED)) or not(normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(@CREATED and @fikdk:CREATED)) or not(normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Both attributes '<axsl:text/><axsl:value-of select="string('@CREATED')"/><axsl:text/>' and '<axsl:text/><axsl:value-of select="string('@fikdk:CREATED')"/><axsl:text/>' are not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M160"/></axsl:template><axsl:template match="text()" priority="-1" mode="M160"/><axsl:template match="@*|node()" priority="-2" mode="M160"><axsl:apply-templates select="@*|*" mode="M160"/></axsl:template>

<!--PATTERN mets_dmdSec_PID_old-->


	<!--RULE -->
<axsl:template match="mets:dmdSec[(@fikdk:PIDTYPE)]" priority="1000" mode="M161"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec[(@fikdk:PIDTYPE)]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@fikdk:PID) or not(normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@fikdk:PID) or not(normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@fikdk:PID')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M161"/></axsl:template><axsl:template match="text()" priority="-1" mode="M161"/><axsl:template match="@*|node()" priority="-2" mode="M161"><axsl:apply-templates select="@*|*" mode="M161"/></axsl:template>

<!--PATTERN mets_amdSec_PID_old-->


	<!--RULE -->
<axsl:template match="mets:amdSec/*[(@fikdk:PIDTYPE)]" priority="1000" mode="M162"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:amdSec/*[(@fikdk:PIDTYPE)]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@fikdk:PID) or not(normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@fikdk:PID) or not(normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@fikdk:PID')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M162"/></axsl:template><axsl:template match="text()" priority="-1" mode="M162"/><axsl:template match="@*|node()" priority="-2" mode="M162"><axsl:apply-templates select="@*|*" mode="M162"/></axsl:template>

<!--PATTERN mets_dmdSec_PIDTYPE_old-->


	<!--RULE -->
<axsl:template match="mets:dmdSec[(@fikdk:PID)]" priority="1000" mode="M163"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec[(@fikdk:PID)]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@fikdk:PIDTYPE) or not(normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@fikdk:PIDTYPE) or not(normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@fikdk:PIDTYPE')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M163"/></axsl:template><axsl:template match="text()" priority="-1" mode="M163"/><axsl:template match="@*|node()" priority="-2" mode="M163"><axsl:apply-templates select="@*|*" mode="M163"/></axsl:template>

<!--PATTERN mets_amdSec_PIDTYPE_old-->


	<!--RULE -->
<axsl:template match="mets:amdSec/*[(@fikdk:PID)]" priority="1000" mode="M164"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:amdSec/*[(@fikdk:PID)]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@fikdk:PIDTYPE) or not(normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@fikdk:PIDTYPE) or not(normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@fikdk:PIDTYPE')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M164"/></axsl:template><axsl:template match="text()" priority="-1" mode="M164"/><axsl:template match="@*|node()" priority="-2" mode="M164"><axsl:apply-templates select="@*|*" mode="M164"/></axsl:template>

<!--PATTERN mets14_structMap_PID-->


	<!--RULE -->
<axsl:template match="mets:structMap[(true())]" priority="1000" mode="M165"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:structMap[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(@fikdk:PID)) or not(normalize-space(string('1.4.1; 1.4'))=''    or ((normalize-space(substring(string('1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(@fikdk:PID)) or not(normalize-space(string('1.4.1; 1.4'))='' or ((normalize-space(substring(string('1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@fikdk:PID)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M165"/></axsl:template><axsl:template match="text()" priority="-1" mode="M165"/><axsl:template match="@*|node()" priority="-2" mode="M165"><axsl:apply-templates select="@*|*" mode="M165"/></axsl:template>

<!--PATTERN mets14_structMap_PIDTYPE-->


	<!--RULE -->
<axsl:template match="mets:structMap[(true())]" priority="1000" mode="M166"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:structMap[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(@fikdk:PIDTYPE)) or not(normalize-space(string('1.4.1; 1.4'))=''    or ((normalize-space(substring(string('1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(@fikdk:PIDTYPE)) or not(normalize-space(string('1.4.1; 1.4'))='' or ((normalize-space(substring(string('1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@fikdk:PIDTYPE)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M166"/></axsl:template><axsl:template match="text()" priority="-1" mode="M166"/><axsl:template match="@*|node()" priority="-2" mode="M166"><axsl:apply-templates select="@*|*" mode="M166"/></axsl:template>

<!--PATTERN mets_structMap_PID_old-->


	<!--RULE -->
<axsl:template match="mets:structMap[(@fikdk:PIDTYPE)]" priority="1000" mode="M167"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:structMap[(@fikdk:PIDTYPE)]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@fikdk:PID) or not(normalize-space(string('1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@fikdk:PID) or not(normalize-space(string('1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@fikdk:PID')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M167"/></axsl:template><axsl:template match="text()" priority="-1" mode="M167"/><axsl:template match="@*|node()" priority="-2" mode="M167"><axsl:apply-templates select="@*|*" mode="M167"/></axsl:template>

<!--PATTERN mets_structMap_PIDTYPE_old-->


	<!--RULE -->
<axsl:template match="mets:structMap[(@fikdk:PID)]" priority="1000" mode="M168"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:structMap[(@fikdk:PID)]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@fikdk:PIDTYPE) or not(normalize-space(string('1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@fikdk:PIDTYPE) or not(normalize-space(string('1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="string('@fikdk:PIDTYPE')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M168"/></axsl:template><axsl:template match="text()" priority="-1" mode="M168"/><axsl:template match="@*|node()" priority="-2" mode="M168"><axsl:apply-templates select="@*|*" mode="M168"/></axsl:template>

<!--PATTERN mets14_rightsMD_MDTYPE-->


	<!--RULE -->
<axsl:template match="mets:rightsMD/mets:mdWrap[@MDTYPE and not(contains(@MDTYPE, ';')) and (true())]" priority="1001" mode="M169"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:rightsMD/mets:mdWrap[@MDTYPE and not(contains(@MDTYPE, ';')) and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('METSRIGHTS; PREMIS:RIGHTS; OTHER'),'; '), concat('; ',normalize-space(@MDTYPE),'; '))) or not(normalize-space(string('1.4.1; 1.4'))=''    or ((normalize-space(substring(string('1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('METSRIGHTS; PREMIS:RIGHTS; OTHER'),'; '), concat('; ',normalize-space(@MDTYPE),'; '))) or not(normalize-space(string('1.4.1; 1.4'))='' or ((normalize-space(substring(string('1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPE"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPE)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('METSRIGHTS; PREMIS:RIGHTS; OTHER'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M169"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:rightsMD/mets:mdWrap/@MDTYPE[contains(., ';') and (true())]" priority="1000" mode="M169"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:rightsMD/mets:mdWrap/@MDTYPE[contains(., ';') and (true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('METSRIGHTS; PREMIS:RIGHTS; OTHER'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('1.4.1; 1.4'))=''    or ((normalize-space(substring(string('1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('METSRIGHTS; PREMIS:RIGHTS; OTHER'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('1.4.1; 1.4'))='' or ((normalize-space(substring(string('1.4.1; 1.4'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4.1; 1.4'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.4.1; 1.4'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4.1; 1.4')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('METSRIGHTS; PREMIS:RIGHTS; OTHER'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M169"/></axsl:template><axsl:template match="text()" priority="-1" mode="M169"/><axsl:template match="@*|node()" priority="-2" mode="M169"><axsl:apply-templates select="@*|*" mode="M169"/></axsl:template>

<!--PATTERN mets15_techMD_MDTYPEVERSION_values_OBJECT-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='PREMIS:OBJECT')]" priority="1001" mode="M170"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='PREMIS:OBJECT')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.1; 2.2; 2.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('1.5.0'))=''    or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.1; 2.2; 2.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('1.5.0'))='' or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.1; 2.2; 2.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M170"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='PREMIS:OBJECT')]" priority="1000" mode="M170"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='PREMIS:OBJECT')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.1; 2.2; 2.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('1.5.0'))=''    or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.1; 2.2; 2.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('1.5.0'))='' or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.1; 2.2; 2.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M170"/></axsl:template><axsl:template match="text()" priority="-1" mode="M170"/><axsl:template match="@*|node()" priority="-2" mode="M170"><axsl:apply-templates select="@*|*" mode="M170"/></axsl:template>

<!--PATTERN mets15_rightsMD_MDTYPEVERSION_values_RIGHTS-->


	<!--RULE -->
<axsl:template match="mets:rightsMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='PREMIS:RIGHTS')]" priority="1001" mode="M171"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:rightsMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='PREMIS:RIGHTS')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.1; 2.2; 2.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('1.5.0'))=''    or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.1; 2.2; 2.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('1.5.0'))='' or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.1; 2.2; 2.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M171"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:rightsMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='PREMIS:RIGHTS')]" priority="1000" mode="M171"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:rightsMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='PREMIS:RIGHTS')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.1; 2.2; 2.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('1.5.0'))=''    or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.1; 2.2; 2.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('1.5.0'))='' or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.1; 2.2; 2.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M171"/></axsl:template><axsl:template match="text()" priority="-1" mode="M171"/><axsl:template match="@*|node()" priority="-2" mode="M171"><axsl:apply-templates select="@*|*" mode="M171"/></axsl:template>

<!--PATTERN mets15_digiprovMD_MDTYPEVERSION_values_OBJECT-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='PREMIS:OBJECT')]" priority="1001" mode="M172"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='PREMIS:OBJECT')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.1; 2.2; 2.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('1.5.0'))=''    or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.1; 2.2; 2.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('1.5.0'))='' or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.1; 2.2; 2.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M172"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='PREMIS:OBJECT')]" priority="1000" mode="M172"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='PREMIS:OBJECT')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.1; 2.2; 2.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('1.5.0'))=''    or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.1; 2.2; 2.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('1.5.0'))='' or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.1; 2.2; 2.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M172"/></axsl:template><axsl:template match="text()" priority="-1" mode="M172"/><axsl:template match="@*|node()" priority="-2" mode="M172"><axsl:apply-templates select="@*|*" mode="M172"/></axsl:template>

<!--PATTERN mets15_digiprovMD_MDTYPEVERSION_values_EVENT-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='PREMIS:EVENT')]" priority="1001" mode="M173"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='PREMIS:EVENT')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.1; 2.2; 2.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('1.5.0'))=''    or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.1; 2.2; 2.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('1.5.0'))='' or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.1; 2.2; 2.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M173"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='PREMIS:EVENT')]" priority="1000" mode="M173"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='PREMIS:EVENT')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.1; 2.2; 2.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('1.5.0'))=''    or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.1; 2.2; 2.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('1.5.0'))='' or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.1; 2.2; 2.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M173"/></axsl:template><axsl:template match="text()" priority="-1" mode="M173"/><axsl:template match="@*|node()" priority="-2" mode="M173"><axsl:apply-templates select="@*|*" mode="M173"/></axsl:template>

<!--PATTERN mets15_digiprovMD_MDTYPEVERSION_values_AGENT-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='PREMIS:AGENT')]" priority="1001" mode="M174"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdWrap[@MDTYPEVERSION and not(contains(@MDTYPEVERSION, ';')) and (normalize-space(@MDTYPE)='PREMIS:AGENT')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.1; 2.2; 2.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('1.5.0'))=''    or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.1; 2.2; 2.3'),'; '), concat('; ',normalize-space(@MDTYPEVERSION),'; '))) or not(normalize-space(string('1.5.0'))='' or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@MDTYPEVERSION"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@MDTYPEVERSION)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.1; 2.2; 2.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M174"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='PREMIS:AGENT')]" priority="1000" mode="M174"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdWrap/@MDTYPEVERSION[contains(., ';') and (normalize-space(@MDTYPE)='PREMIS:AGENT')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('2.1; 2.2; 2.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('1.5.0'))=''    or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('2.1; 2.2; 2.3'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('1.5.0'))='' or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('2.1; 2.2; 2.3'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M174"/></axsl:template><axsl:template match="text()" priority="-1" mode="M174"/><axsl:template match="@*|node()" priority="-2" mode="M174"><axsl:apply-templates select="@*|*" mode="M174"/></axsl:template>

<!--PATTERN mets_file_stream-->


	<!--RULE -->
<axsl:template match="mets:fileGrp/mets:file[(true())]" priority="1000" mode="M175"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:fileGrp/mets:file[(true())]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./mets:stream)) or not(normalize-space(string('1.4; 1.4.1; 1.5.0'))=''    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./mets:stream)) or not(normalize-space(string('1.4; 1.4.1; 1.5.0'))='' or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4; 1.4.1; 1.5.0'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.4; 1.4.1; 1.5.0'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4; 1.4.1; 1.5.0')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(mets:stream)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M175"/></axsl:template><axsl:template match="text()" priority="-1" mode="M175"/><axsl:template match="@*|node()" priority="-2" mode="M175"><axsl:apply-templates select="@*|*" mode="M175"/></axsl:template>

<!--PATTERN mets_mdRef_OTHERMDTYPE_values_old-->


	<!--RULE -->
<axsl:template match="mets:mdRef[@OTHERMDTYPE and not(contains(@OTHERMDTYPE, ';')) and (/mets:mets/@PROFILE='http://www.kdk.fi/kdk-mets-profile')]" priority="1001" mode="M176"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mdRef[@OTHERMDTYPE and not(contains(@OTHERMDTYPE, ';')) and (/mets:mets/@PROFILE='http://www.kdk.fi/kdk-mets-profile')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('KDKPreservationPlan'),'; '), concat('; ',normalize-space(@OTHERMDTYPE),'; '))) or not(normalize-space(string('1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('KDKPreservationPlan'),'; '), concat('; ',normalize-space(@OTHERMDTYPE),'; '))) or not(normalize-space(string('1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@OTHERMDTYPE"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@OTHERMDTYPE)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('KDKPreservationPlan'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M176"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:mdRef/@OTHERMDTYPE[contains(., ';') and (/mets:mets/@PROFILE='http://www.kdk.fi/kdk-mets-profile')]" priority="1000" mode="M176"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mdRef/@OTHERMDTYPE[contains(., ';') and (/mets:mets/@PROFILE='http://www.kdk.fi/kdk-mets-profile')]"/><axsl:variable name="given_specification" select="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',string('KDKPreservationPlan'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'))=''    or ((normalize-space(substring(string('1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; ')))))    or ((normalize-space(substring(string('1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',string('KDKPreservationPlan'),'; '), concat('; ',$realValue,'; '))) or not(normalize-space(string('1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'))='' or ((normalize-space(substring(string('1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after(string('1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),':')),'; '), concat('; ', $given_specification, '; '))))) or ((normalize-space(substring(string('1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1'),1,4))!='not:') and (contains(concat('; ',normalize-space(string('1.4.1; 1.4; 1.5.0; 1.6.0; 1.6.1')),'; '), concat('; ', $given_specification,'; ')))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string(string('KDKPreservationPlan'))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M176"/></axsl:template><axsl:template match="text()" priority="-1" mode="M176"/><axsl:template match="@*|node()" priority="-2" mode="M176"><axsl:apply-templates select="@*|*" mode="M176"/></axsl:template></axsl:stylesheet>
