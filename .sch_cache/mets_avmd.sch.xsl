<axsl:stylesheet xmlns:axsl="http://www.w3.org/1999/XSL/Transform" xmlns:sch="http://www.ascc.net/xml/schematron" xmlns:iso="http://purl.oclc.org/dsdl/schematron" xmlns:mets="http://www.loc.gov/METS/" xmlns:fi="http://www.kdk.fi/standards/mets/kdk-extensions" xmlns:exsl="http://exslt.org/common" xmlns:sets="http://exslt.org/sets" xmlns:str="http://exslt.org/strings" xmlns:audiomd="http://www.loc.gov/audioMD/" xmlns:videomd="http://www.loc.gov/videoMD/" version="1.0"><!--Implementers: please note that overriding process-prolog or process-root is 
    the preferred method for meta-stylesheets to use where possible. -->
<axsl:param name="archiveDirParameter"/><axsl:param name="archiveNameParameter"/><axsl:param name="fileNameParameter"/><axsl:param name="fileDirParameter"/>

<!--PHASES-->


<!--PROLOG-->
<axsl:output xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:saxon="http://icl.com/saxon" method="xml" omit-xml-declaration="yes" standalone="yes" indent="yes"/>

<!--KEYS-->


<!--DEFAULT RULES-->


<!--MODE: SCHEMATRON-SELECT-FULL-PATH-->
<!--This mode can be used to generate an ugly though full XPath for locators-->
<axsl:template match="*" mode="schematron-select-full-path"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:template>

<!--MODE: SCHEMATRON-FULL-PATH-->
<!--This mode can be used to generate an ugly though full XPath for locators-->
<axsl:template match="*" mode="schematron-get-full-path"><axsl:apply-templates select="parent::*" mode="schematron-get-full-path"/><axsl:text>/</axsl:text><axsl:choose><axsl:when test="namespace-uri()=''"><axsl:value-of select="name()"/><axsl:variable name="p_1" select="1+    count(preceding-sibling::*[name()=name(current())])"/><axsl:if test="$p_1&gt;1 or following-sibling::*[name()=name(current())]">[<axsl:value-of select="$p_1"/>]</axsl:if></axsl:when><axsl:otherwise><axsl:text>*[local-name()='</axsl:text><axsl:value-of select="local-name()"/><axsl:text>' and namespace-uri()='</axsl:text><axsl:value-of select="namespace-uri()"/><axsl:text>']</axsl:text><axsl:variable name="p_2" select="1+   count(preceding-sibling::*[local-name()=local-name(current())])"/><axsl:if test="$p_2&gt;1 or following-sibling::*[local-name()=local-name(current())]">[<axsl:value-of select="$p_2"/>]</axsl:if></axsl:otherwise></axsl:choose></axsl:template><axsl:template match="@*" mode="schematron-get-full-path"><axsl:text>/</axsl:text><axsl:choose><axsl:when test="namespace-uri()=''">@<axsl:value-of select="name()"/></axsl:when><axsl:otherwise><axsl:text>@*[local-name()='</axsl:text><axsl:value-of select="local-name()"/><axsl:text>' and namespace-uri()='</axsl:text><axsl:value-of select="namespace-uri()"/><axsl:text>']</axsl:text></axsl:otherwise></axsl:choose></axsl:template>

<!--MODE: SCHEMATRON-FULL-PATH-2-->
<!--This mode can be used to generate prefixed XPath for humans-->
<axsl:template match="node() | @*" mode="schematron-get-full-path-2"><axsl:for-each select="ancestor-or-self::*"><axsl:text>/</axsl:text><axsl:value-of select="name(.)"/><axsl:if test="preceding-sibling::*[name(.)=name(current())]"><axsl:text>[</axsl:text><axsl:value-of select="count(preceding-sibling::*[name(.)=name(current())])+1"/><axsl:text>]</axsl:text></axsl:if></axsl:for-each><axsl:if test="not(self::*)"><axsl:text/>/@<axsl:value-of select="name(.)"/></axsl:if></axsl:template>

<!--MODE: GENERATE-ID-FROM-PATH -->
<axsl:template match="/" mode="generate-id-from-path"/><axsl:template match="text()" mode="generate-id-from-path"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:value-of select="concat('.text-', 1+count(preceding-sibling::text()), '-')"/></axsl:template><axsl:template match="comment()" mode="generate-id-from-path"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:value-of select="concat('.comment-', 1+count(preceding-sibling::comment()), '-')"/></axsl:template><axsl:template match="processing-instruction()" mode="generate-id-from-path"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:value-of select="concat('.processing-instruction-', 1+count(preceding-sibling::processing-instruction()), '-')"/></axsl:template><axsl:template match="@*" mode="generate-id-from-path"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:value-of select="concat('.@', name())"/></axsl:template><axsl:template match="*" mode="generate-id-from-path" priority="-0.5"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:text>.</axsl:text><axsl:value-of select="concat('.',name(),'-',1+count(preceding-sibling::*[name()=name(current())]),'-')"/></axsl:template><!--MODE: SCHEMATRON-FULL-PATH-3-->
<!--This mode can be used to generate prefixed XPath for humans 
	(Top-level element has index)-->
<axsl:template match="node() | @*" mode="schematron-get-full-path-3"><axsl:for-each select="ancestor-or-self::*"><axsl:text>/</axsl:text><axsl:value-of select="name(.)"/><axsl:if test="parent::*"><axsl:text>[</axsl:text><axsl:value-of select="count(preceding-sibling::*[name(.)=name(current())])+1"/><axsl:text>]</axsl:text></axsl:if></axsl:for-each><axsl:if test="not(self::*)"><axsl:text/>/@<axsl:value-of select="name(.)"/></axsl:if></axsl:template>

<!--MODE: GENERATE-ID-2 -->
<axsl:template match="/" mode="generate-id-2">U</axsl:template><axsl:template match="*" mode="generate-id-2" priority="2"><axsl:text>U</axsl:text><axsl:number level="multiple" count="*"/></axsl:template><axsl:template match="node()" mode="generate-id-2"><axsl:text>U.</axsl:text><axsl:number level="multiple" count="*"/><axsl:text>n</axsl:text><axsl:number count="node()"/></axsl:template><axsl:template match="@*" mode="generate-id-2"><axsl:text>U.</axsl:text><axsl:number level="multiple" count="*"/><axsl:text>_</axsl:text><axsl:value-of select="string-length(local-name(.))"/><axsl:text>_</axsl:text><axsl:value-of select="translate(name(),':','.')"/></axsl:template><!--Strip characters--><axsl:template match="text()" priority="-1"/>

<!--SCHEMA METADATA-->
<axsl:template match="/"><svrl:schematron-output xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" title="AudioMD and VideoMD metadata validation" schemaVersion="1.6.0"><axsl:comment><axsl:value-of select="$archiveDirParameter"/>   
		 <axsl:value-of select="$archiveNameParameter"/>  
		 <axsl:value-of select="$fileNameParameter"/>  
		 <axsl:value-of select="$fileDirParameter"/></axsl:comment><svrl:ns-prefix-in-attribute-values uri="http://www.loc.gov/METS/" prefix="mets"/><svrl:ns-prefix-in-attribute-values uri="http://www.kdk.fi/standards/mets/kdk-extensions" prefix="fi"/><svrl:ns-prefix-in-attribute-values uri="http://exslt.org/common" prefix="exsl"/><svrl:ns-prefix-in-attribute-values uri="http://exslt.org/sets" prefix="sets"/><svrl:ns-prefix-in-attribute-values uri="http://exslt.org/strings" prefix="str"/><svrl:ns-prefix-in-attribute-values uri="http://www.loc.gov/audioMD/" prefix="audiomd"/><svrl:ns-prefix-in-attribute-values uri="http://www.loc.gov/videoMD/" prefix="videomd"/><svrl:active-pattern><axsl:attribute name="id">audio_fileData</axsl:attribute><axsl:attribute name="name">audio_fileData</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M8"/><svrl:active-pattern><axsl:attribute name="id">audio_audioInfo</axsl:attribute><axsl:attribute name="name">audio_audioInfo</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M9"/><svrl:active-pattern><axsl:attribute name="id">audio_audioDataEncoding</axsl:attribute><axsl:attribute name="name">audio_audioDataEncoding</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M10"/><svrl:active-pattern><axsl:attribute name="id">audio_bitsPerSample</axsl:attribute><axsl:attribute name="name">audio_bitsPerSample</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M11"/><svrl:active-pattern><axsl:attribute name="id">audio_compression</axsl:attribute><axsl:attribute name="name">audio_compression</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M12"/><svrl:active-pattern><axsl:attribute name="id">audio_dataRate</axsl:attribute><axsl:attribute name="name">audio_dataRate</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M13"/><svrl:active-pattern><axsl:attribute name="id">audio_dataRateMode</axsl:attribute><axsl:attribute name="name">audio_dataRateMode</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M14"/><svrl:active-pattern><axsl:attribute name="id">audio_samplingFrequency</axsl:attribute><axsl:attribute name="name">audio_samplingFrequency</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M15"/><svrl:active-pattern><axsl:attribute name="id">audio_duration</axsl:attribute><axsl:attribute name="name">audio_duration</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M16"/><svrl:active-pattern><axsl:attribute name="id">audio_numChannels</axsl:attribute><axsl:attribute name="name">audio_numChannels</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M17"/><svrl:active-pattern><axsl:attribute name="id">audio_codecCreatorApp</axsl:attribute><axsl:attribute name="name">audio_codecCreatorApp</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M18"/><svrl:active-pattern><axsl:attribute name="id">audio_codecCreatorAppVersion</axsl:attribute><axsl:attribute name="name">audio_codecCreatorAppVersion</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M19"/><svrl:active-pattern><axsl:attribute name="id">audio_codecName</axsl:attribute><axsl:attribute name="name">audio_codecName</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M20"/><svrl:active-pattern><axsl:attribute name="id">audio_codecQuality</axsl:attribute><axsl:attribute name="name">audio_codecQuality</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M21"/><svrl:active-pattern><axsl:attribute name="id">video_fileData</axsl:attribute><axsl:attribute name="name">video_fileData</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M22"/><svrl:active-pattern><axsl:attribute name="id">video_duration</axsl:attribute><axsl:attribute name="name">video_duration</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M23"/><svrl:active-pattern><axsl:attribute name="id">video_dataRate</axsl:attribute><axsl:attribute name="name">video_dataRate</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M24"/><svrl:active-pattern><axsl:attribute name="id">video_bitsPerSample</axsl:attribute><axsl:attribute name="name">video_bitsPerSample</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M25"/><svrl:active-pattern><axsl:attribute name="id">video_color</axsl:attribute><axsl:attribute name="name">video_color</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M26"/><svrl:active-pattern><axsl:attribute name="id">video_compression</axsl:attribute><axsl:attribute name="name">video_compression</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M27"/><svrl:active-pattern><axsl:attribute name="id">video_dataRateMode</axsl:attribute><axsl:attribute name="name">video_dataRateMode</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M28"/><svrl:active-pattern><axsl:attribute name="id">video_frameRate</axsl:attribute><axsl:attribute name="name">video_frameRate</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M29"/><svrl:active-pattern><axsl:attribute name="id">video_frame</axsl:attribute><axsl:attribute name="name">video_frame</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M30"/><svrl:active-pattern><axsl:attribute name="id">video_sampling</axsl:attribute><axsl:attribute name="name">video_sampling</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M31"/><svrl:active-pattern><axsl:attribute name="id">video_signalFormat</axsl:attribute><axsl:attribute name="name">video_signalFormat</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M32"/><svrl:active-pattern><axsl:attribute name="id">video_sound</axsl:attribute><axsl:attribute name="name">video_sound</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M33"/><svrl:active-pattern><axsl:attribute name="id">video_codecCreatorApp</axsl:attribute><axsl:attribute name="name">video_codecCreatorApp</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M34"/><svrl:active-pattern><axsl:attribute name="id">video_codecCreatorAppVersion</axsl:attribute><axsl:attribute name="name">video_codecCreatorAppVersion</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M35"/><svrl:active-pattern><axsl:attribute name="id">video_codecName</axsl:attribute><axsl:attribute name="name">video_codecName</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M36"/><svrl:active-pattern><axsl:attribute name="id">video_codecQuality</axsl:attribute><axsl:attribute name="name">video_codecQuality</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M37"/><svrl:active-pattern><axsl:attribute name="id">video_pixelsHorizontal</axsl:attribute><axsl:attribute name="name">video_pixelsHorizontal</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M38"/><svrl:active-pattern><axsl:attribute name="id">video_pixelsVertical</axsl:attribute><axsl:attribute name="name">video_pixelsVertical</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M39"/><svrl:active-pattern><axsl:attribute name="id">video_PAR</axsl:attribute><axsl:attribute name="name">video_PAR</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M40"/><svrl:active-pattern><axsl:attribute name="id">video_DAR</axsl:attribute><axsl:attribute name="name">video_DAR</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M41"/></svrl:schematron-output></axsl:template>

<!--SCHEMATRON PATTERNS-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon">AudioMD and VideoMD metadata validation</svrl:text>

<!--PATTERN audio_fileData-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD[(true())]" priority="1000" mode="M8"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./audiomd:fileData)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./audiomd:fileData) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('audiomd:fileData')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M8"/></axsl:template><axsl:template match="text()" priority="-1" mode="M8"/><axsl:template match="@*|node()" priority="-2" mode="M8"><axsl:apply-templates select="*" mode="M8"/></axsl:template>

<!--PATTERN audio_audioInfo-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD[(true())]" priority="1000" mode="M9"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./audiomd:audioInfo)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./audiomd:audioInfo) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('audiomd:audioInfo')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M9"/></axsl:template><axsl:template match="text()" priority="-1" mode="M9"/><axsl:template match="@*|node()" priority="-2" mode="M9"><axsl:apply-templates select="*" mode="M9"/></axsl:template>

<!--PATTERN audio_audioDataEncoding-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:fileData[(true())]" priority="1000" mode="M10"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:fileData[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./audiomd:audioDataEncoding)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./audiomd:audioDataEncoding) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('audiomd:audioDataEncoding')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M10"/></axsl:template><axsl:template match="text()" priority="-1" mode="M10"/><axsl:template match="@*|node()" priority="-2" mode="M10"><axsl:apply-templates select="*" mode="M10"/></axsl:template>

<!--PATTERN audio_bitsPerSample-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:fileData[(true())]" priority="1000" mode="M11"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:fileData[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./audiomd:bitsPerSample)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./audiomd:bitsPerSample) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('audiomd:bitsPerSample')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M11"/></axsl:template><axsl:template match="text()" priority="-1" mode="M11"/><axsl:template match="@*|node()" priority="-2" mode="M11"><axsl:apply-templates select="*" mode="M11"/></axsl:template>

<!--PATTERN audio_compression-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:fileData[(true())]" priority="1000" mode="M12"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:fileData[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./audiomd:compression)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./audiomd:compression) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('audiomd:compression')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M12"/></axsl:template><axsl:template match="text()" priority="-1" mode="M12"/><axsl:template match="@*|node()" priority="-2" mode="M12"><axsl:apply-templates select="*" mode="M12"/></axsl:template>

<!--PATTERN audio_dataRate-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:fileData[(true())]" priority="1000" mode="M13"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:fileData[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./audiomd:dataRate)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./audiomd:dataRate) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('audiomd:dataRate')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M13"/></axsl:template><axsl:template match="text()" priority="-1" mode="M13"/><axsl:template match="@*|node()" priority="-2" mode="M13"><axsl:apply-templates select="*" mode="M13"/></axsl:template>

<!--PATTERN audio_dataRateMode-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:fileData[(true())]" priority="1000" mode="M14"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:fileData[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./audiomd:dataRateMode)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./audiomd:dataRateMode) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('audiomd:dataRateMode')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M14"/></axsl:template><axsl:template match="text()" priority="-1" mode="M14"/><axsl:template match="@*|node()" priority="-2" mode="M14"><axsl:apply-templates select="*" mode="M14"/></axsl:template>

<!--PATTERN audio_samplingFrequency-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:fileData[(true())]" priority="1000" mode="M15"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:fileData[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./audiomd:samplingFrequency)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./audiomd:samplingFrequency) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('audiomd:samplingFrequency')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M15"/></axsl:template><axsl:template match="text()" priority="-1" mode="M15"/><axsl:template match="@*|node()" priority="-2" mode="M15"><axsl:apply-templates select="*" mode="M15"/></axsl:template>

<!--PATTERN audio_duration-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:audioInfo[(true())]" priority="1000" mode="M16"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:audioInfo[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./audiomd:duration)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./audiomd:duration) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('audiomd:duration')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M16"/></axsl:template><axsl:template match="text()" priority="-1" mode="M16"/><axsl:template match="@*|node()" priority="-2" mode="M16"><axsl:apply-templates select="*" mode="M16"/></axsl:template>

<!--PATTERN audio_numChannels-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:audioInfo[(true())]" priority="1000" mode="M17"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:audioInfo[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./audiomd:numChannels)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./audiomd:numChannels) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('audiomd:numChannels')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M17"/></axsl:template><axsl:template match="text()" priority="-1" mode="M17"/><axsl:template match="@*|node()" priority="-2" mode="M17"><axsl:apply-templates select="*" mode="M17"/></axsl:template>

<!--PATTERN audio_codecCreatorApp-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:compression[(true())]" priority="1000" mode="M18"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:compression[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./audiomd:codecCreatorApp)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./audiomd:codecCreatorApp) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('audiomd:codecCreatorApp')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M18"/></axsl:template><axsl:template match="text()" priority="-1" mode="M18"/><axsl:template match="@*|node()" priority="-2" mode="M18"><axsl:apply-templates select="*" mode="M18"/></axsl:template>

<!--PATTERN audio_codecCreatorAppVersion-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:compression[(true())]" priority="1000" mode="M19"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:compression[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./audiomd:codecCreatorAppVersion)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./audiomd:codecCreatorAppVersion) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('audiomd:codecCreatorAppVersion')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M19"/></axsl:template><axsl:template match="text()" priority="-1" mode="M19"/><axsl:template match="@*|node()" priority="-2" mode="M19"><axsl:apply-templates select="*" mode="M19"/></axsl:template>

<!--PATTERN audio_codecName-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:compression[(true())]" priority="1000" mode="M20"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:compression[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./audiomd:codecName)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./audiomd:codecName) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('audiomd:codecName')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M20"/></axsl:template><axsl:template match="text()" priority="-1" mode="M20"/><axsl:template match="@*|node()" priority="-2" mode="M20"><axsl:apply-templates select="*" mode="M20"/></axsl:template>

<!--PATTERN audio_codecQuality-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:compression[(true())]" priority="1000" mode="M21"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/audiomd:AUDIOMD//audiomd:compression[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./audiomd:codecQuality)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./audiomd:codecQuality) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('audiomd:codecQuality')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M21"/></axsl:template><axsl:template match="text()" priority="-1" mode="M21"/><axsl:template match="@*|node()" priority="-2" mode="M21"><axsl:apply-templates select="*" mode="M21"/></axsl:template>

<!--PATTERN video_fileData-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD[(true())]" priority="1000" mode="M22"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./videomd:fileData)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./videomd:fileData) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('videomd:fileData')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M22"/></axsl:template><axsl:template match="text()" priority="-1" mode="M22"/><axsl:template match="@*|node()" priority="-2" mode="M22"><axsl:apply-templates select="*" mode="M22"/></axsl:template>

<!--PATTERN video_duration-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]" priority="1000" mode="M23"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./videomd:duration)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./videomd:duration) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('videomd:duration')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M23"/></axsl:template><axsl:template match="text()" priority="-1" mode="M23"/><axsl:template match="@*|node()" priority="-2" mode="M23"><axsl:apply-templates select="*" mode="M23"/></axsl:template>

<!--PATTERN video_dataRate-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]" priority="1000" mode="M24"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./videomd:dataRate)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./videomd:dataRate) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('videomd:dataRate')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M24"/></axsl:template><axsl:template match="text()" priority="-1" mode="M24"/><axsl:template match="@*|node()" priority="-2" mode="M24"><axsl:apply-templates select="*" mode="M24"/></axsl:template>

<!--PATTERN video_bitsPerSample-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]" priority="1000" mode="M25"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./videomd:bitsPerSample)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./videomd:bitsPerSample) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('videomd:bitsPerSample')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M25"/></axsl:template><axsl:template match="text()" priority="-1" mode="M25"/><axsl:template match="@*|node()" priority="-2" mode="M25"><axsl:apply-templates select="*" mode="M25"/></axsl:template>

<!--PATTERN video_color-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]" priority="1000" mode="M26"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./videomd:color)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./videomd:color) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('videomd:color')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M26"/></axsl:template><axsl:template match="text()" priority="-1" mode="M26"/><axsl:template match="@*|node()" priority="-2" mode="M26"><axsl:apply-templates select="*" mode="M26"/></axsl:template>

<!--PATTERN video_compression-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]" priority="1000" mode="M27"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./videomd:compression)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./videomd:compression) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('videomd:compression')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M27"/></axsl:template><axsl:template match="text()" priority="-1" mode="M27"/><axsl:template match="@*|node()" priority="-2" mode="M27"><axsl:apply-templates select="*" mode="M27"/></axsl:template>

<!--PATTERN video_dataRateMode-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]" priority="1000" mode="M28"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./videomd:dataRateMode)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./videomd:dataRateMode) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('videomd:dataRateMode')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M28"/></axsl:template><axsl:template match="text()" priority="-1" mode="M28"/><axsl:template match="@*|node()" priority="-2" mode="M28"><axsl:apply-templates select="*" mode="M28"/></axsl:template>

<!--PATTERN video_frameRate-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]" priority="1000" mode="M29"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./videomd:frameRate)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./videomd:frameRate) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('videomd:frameRate')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M29"/></axsl:template><axsl:template match="text()" priority="-1" mode="M29"/><axsl:template match="@*|node()" priority="-2" mode="M29"><axsl:apply-templates select="*" mode="M29"/></axsl:template>

<!--PATTERN video_frame-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]" priority="1000" mode="M30"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./videomd:frame)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./videomd:frame) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('videomd:frame')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M30"/></axsl:template><axsl:template match="text()" priority="-1" mode="M30"/><axsl:template match="@*|node()" priority="-2" mode="M30"><axsl:apply-templates select="*" mode="M30"/></axsl:template>

<!--PATTERN video_sampling-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]" priority="1000" mode="M31"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./videomd:sampling)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./videomd:sampling) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('videomd:sampling')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M31"/></axsl:template><axsl:template match="text()" priority="-1" mode="M31"/><axsl:template match="@*|node()" priority="-2" mode="M31"><axsl:apply-templates select="*" mode="M31"/></axsl:template>

<!--PATTERN video_signalFormat-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]" priority="1000" mode="M32"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./videomd:signalFormat)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./videomd:signalFormat) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('videomd:signalFormat')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M32"/></axsl:template><axsl:template match="text()" priority="-1" mode="M32"/><axsl:template match="@*|node()" priority="-2" mode="M32"><axsl:apply-templates select="*" mode="M32"/></axsl:template>

<!--PATTERN video_sound-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]" priority="1000" mode="M33"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:fileData[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./videomd:sound)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./videomd:sound) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('videomd:sound')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M33"/></axsl:template><axsl:template match="text()" priority="-1" mode="M33"/><axsl:template match="@*|node()" priority="-2" mode="M33"><axsl:apply-templates select="*" mode="M33"/></axsl:template>

<!--PATTERN video_codecCreatorApp-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:compression[(true())]" priority="1000" mode="M34"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:compression[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./videomd:codecCreatorApp)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./videomd:codecCreatorApp) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('videomd:codecCreatorApp')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M34"/></axsl:template><axsl:template match="text()" priority="-1" mode="M34"/><axsl:template match="@*|node()" priority="-2" mode="M34"><axsl:apply-templates select="*" mode="M34"/></axsl:template>

<!--PATTERN video_codecCreatorAppVersion-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:compression[(true())]" priority="1000" mode="M35"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:compression[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./videomd:codecCreatorAppVersion)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./videomd:codecCreatorAppVersion) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('videomd:codecCreatorAppVersion')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M35"/></axsl:template><axsl:template match="text()" priority="-1" mode="M35"/><axsl:template match="@*|node()" priority="-2" mode="M35"><axsl:apply-templates select="*" mode="M35"/></axsl:template>

<!--PATTERN video_codecName-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:compression[(true())]" priority="1000" mode="M36"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:compression[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./videomd:codecName)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./videomd:codecName) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('videomd:codecName')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M36"/></axsl:template><axsl:template match="text()" priority="-1" mode="M36"/><axsl:template match="@*|node()" priority="-2" mode="M36"><axsl:apply-templates select="*" mode="M36"/></axsl:template>

<!--PATTERN video_codecQuality-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:compression[(true())]" priority="1000" mode="M37"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:compression[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./videomd:codecQuality)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./videomd:codecQuality) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('videomd:codecQuality')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M37"/></axsl:template><axsl:template match="text()" priority="-1" mode="M37"/><axsl:template match="@*|node()" priority="-2" mode="M37"><axsl:apply-templates select="*" mode="M37"/></axsl:template>

<!--PATTERN video_pixelsHorizontal-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:frame[(true())]" priority="1000" mode="M38"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:frame[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./videomd:pixelsHorizontal)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./videomd:pixelsHorizontal) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('videomd:pixelsHorizontal')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M38"/></axsl:template><axsl:template match="text()" priority="-1" mode="M38"/><axsl:template match="@*|node()" priority="-2" mode="M38"><axsl:apply-templates select="*" mode="M38"/></axsl:template>

<!--PATTERN video_pixelsVertical-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:frame[(true())]" priority="1000" mode="M39"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:frame[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./videomd:pixelsVertical)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./videomd:pixelsVertical) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('videomd:pixelsVertical')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M39"/></axsl:template><axsl:template match="text()" priority="-1" mode="M39"/><axsl:template match="@*|node()" priority="-2" mode="M39"><axsl:apply-templates select="*" mode="M39"/></axsl:template>

<!--PATTERN video_PAR-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:frame[(true())]" priority="1000" mode="M40"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:frame[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./videomd:PAR)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./videomd:PAR) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('videomd:PAR')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M40"/></axsl:template><axsl:template match="text()" priority="-1" mode="M40"/><axsl:template match="@*|node()" priority="-2" mode="M40"><axsl:apply-templates select="*" mode="M40"/></axsl:template>

<!--PATTERN video_DAR-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:frame[(true())]" priority="1000" mode="M41"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/videomd:VIDEOMD//videomd:frame[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./videomd:DAR)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./videomd:DAR) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('videomd:DAR')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="*" mode="M41"/></axsl:template><axsl:template match="text()" priority="-1" mode="M41"/><axsl:template match="@*|node()" priority="-2" mode="M41"><axsl:apply-templates select="*" mode="M41"/></axsl:template></axsl:stylesheet>
