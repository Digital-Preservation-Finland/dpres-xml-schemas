<axsl:stylesheet xmlns:axsl="http://www.w3.org/1999/XSL/Transform" xmlns:sch="http://www.ascc.net/xml/schematron" xmlns:iso="http://purl.oclc.org/dsdl/schematron" xmlns:mets="http://www.loc.gov/METS/" xmlns:fi="http://www.kdk.fi/standards/mets/kdk-extensions" xmlns:premis="info:lc/xmlns/premis-v2" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:exsl="http://exslt.org/common" xmlns:sets="http://exslt.org/sets" xmlns:str="http://exslt.org/strings" version="1.0"><!--Implementers: please note that overriding process-prolog or process-root is 
    the preferred method for meta-stylesheets to use where possible. -->
<axsl:param name="archiveDirParameter"/><axsl:param name="archiveNameParameter"/><axsl:param name="fileNameParameter"/><axsl:param name="fileDirParameter"/>

<!--PHASES-->


<!--PROLOG-->
<axsl:output xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:saxon="http://icl.com/saxon" method="xml" omit-xml-declaration="yes" standalone="yes" indent="yes"/>

<!--KEYS-->


<!--DEFAULT RULES-->


<!--MODE: SCHEMATRON-SELECT-FULL-PATH-->
<!--This mode can be used to generate an ugly though full XPath for locators-->
<axsl:template match="*" mode="schematron-select-full-path"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:template>

<!--MODE: SCHEMATRON-FULL-PATH-->
<!--This mode can be used to generate an ugly though full XPath for locators-->
<axsl:template match="*" mode="schematron-get-full-path"><axsl:apply-templates select="parent::*" mode="schematron-get-full-path"/><axsl:text>/</axsl:text><axsl:choose><axsl:when test="namespace-uri()=''"><axsl:value-of select="name()"/><axsl:variable name="p_1" select="1+    count(preceding-sibling::*[name()=name(current())])"/><axsl:if test="$p_1&gt;1 or following-sibling::*[name()=name(current())]">[<axsl:value-of select="$p_1"/>]</axsl:if></axsl:when><axsl:otherwise><axsl:text>*[local-name()='</axsl:text><axsl:value-of select="local-name()"/><axsl:text>' and namespace-uri()='</axsl:text><axsl:value-of select="namespace-uri()"/><axsl:text>']</axsl:text><axsl:variable name="p_2" select="1+   count(preceding-sibling::*[local-name()=local-name(current())])"/><axsl:if test="$p_2&gt;1 or following-sibling::*[local-name()=local-name(current())]">[<axsl:value-of select="$p_2"/>]</axsl:if></axsl:otherwise></axsl:choose></axsl:template><axsl:template match="@*" mode="schematron-get-full-path"><axsl:text>/</axsl:text><axsl:choose><axsl:when test="namespace-uri()=''">@<axsl:value-of select="name()"/></axsl:when><axsl:otherwise><axsl:text>@*[local-name()='</axsl:text><axsl:value-of select="local-name()"/><axsl:text>' and namespace-uri()='</axsl:text><axsl:value-of select="namespace-uri()"/><axsl:text>']</axsl:text></axsl:otherwise></axsl:choose></axsl:template>

<!--MODE: SCHEMATRON-FULL-PATH-2-->
<!--This mode can be used to generate prefixed XPath for humans-->
<axsl:template match="node() | @*" mode="schematron-get-full-path-2"><axsl:for-each select="ancestor-or-self::*"><axsl:text>/</axsl:text><axsl:value-of select="name(.)"/><axsl:if test="preceding-sibling::*[name(.)=name(current())]"><axsl:text>[</axsl:text><axsl:value-of select="count(preceding-sibling::*[name(.)=name(current())])+1"/><axsl:text>]</axsl:text></axsl:if></axsl:for-each><axsl:if test="not(self::*)"><axsl:text/>/@<axsl:value-of select="name(.)"/></axsl:if></axsl:template>

<!--MODE: GENERATE-ID-FROM-PATH -->
<axsl:template match="/" mode="generate-id-from-path"/><axsl:template match="text()" mode="generate-id-from-path"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:value-of select="concat('.text-', 1+count(preceding-sibling::text()), '-')"/></axsl:template><axsl:template match="comment()" mode="generate-id-from-path"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:value-of select="concat('.comment-', 1+count(preceding-sibling::comment()), '-')"/></axsl:template><axsl:template match="processing-instruction()" mode="generate-id-from-path"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:value-of select="concat('.processing-instruction-', 1+count(preceding-sibling::processing-instruction()), '-')"/></axsl:template><axsl:template match="@*" mode="generate-id-from-path"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:value-of select="concat('.@', name())"/></axsl:template><axsl:template match="*" mode="generate-id-from-path" priority="-0.5"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:text>.</axsl:text><axsl:value-of select="concat('.',name(),'-',1+count(preceding-sibling::*[name()=name(current())]),'-')"/></axsl:template><!--MODE: SCHEMATRON-FULL-PATH-3-->
<!--This mode can be used to generate prefixed XPath for humans 
	(Top-level element has index)-->
<axsl:template match="node() | @*" mode="schematron-get-full-path-3"><axsl:for-each select="ancestor-or-self::*"><axsl:text>/</axsl:text><axsl:value-of select="name(.)"/><axsl:if test="parent::*"><axsl:text>[</axsl:text><axsl:value-of select="count(preceding-sibling::*[name(.)=name(current())])+1"/><axsl:text>]</axsl:text></axsl:if></axsl:for-each><axsl:if test="not(self::*)"><axsl:text/>/@<axsl:value-of select="name(.)"/></axsl:if></axsl:template>

<!--MODE: GENERATE-ID-2 -->
<axsl:template match="/" mode="generate-id-2">U</axsl:template><axsl:template match="*" mode="generate-id-2" priority="2"><axsl:text>U</axsl:text><axsl:number level="multiple" count="*"/></axsl:template><axsl:template match="node()" mode="generate-id-2"><axsl:text>U.</axsl:text><axsl:number level="multiple" count="*"/><axsl:text>n</axsl:text><axsl:number count="node()"/></axsl:template><axsl:template match="@*" mode="generate-id-2"><axsl:text>U.</axsl:text><axsl:number level="multiple" count="*"/><axsl:text>_</axsl:text><axsl:value-of select="string-length(local-name(.))"/><axsl:text>_</axsl:text><axsl:value-of select="translate(name(),':','.')"/></axsl:template><!--Strip characters--><axsl:template match="text()" priority="-1"/>

<!--SCHEMA METADATA-->
<axsl:template match="/"><svrl:schematron-output xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" title="PREMIS metadata validation" schemaVersion="1.6.0"><axsl:comment><axsl:value-of select="$archiveDirParameter"/>   
		 <axsl:value-of select="$archiveNameParameter"/>  
		 <axsl:value-of select="$fileNameParameter"/>  
		 <axsl:value-of select="$fileDirParameter"/></axsl:comment><svrl:ns-prefix-in-attribute-values uri="http://www.loc.gov/METS/" prefix="mets"/><svrl:ns-prefix-in-attribute-values uri="http://www.kdk.fi/standards/mets/kdk-extensions" prefix="fi"/><svrl:ns-prefix-in-attribute-values uri="info:lc/xmlns/premis-v2" prefix="premis"/><svrl:ns-prefix-in-attribute-values uri="http://www.w3.org/1999/xlink" prefix="xlink"/><svrl:ns-prefix-in-attribute-values uri="http://www.w3.org/2001/XMLSchema-instance" prefix="xsi"/><svrl:ns-prefix-in-attribute-values uri="http://exslt.org/common" prefix="exsl"/><svrl:ns-prefix-in-attribute-values uri="http://exslt.org/sets" prefix="sets"/><svrl:ns-prefix-in-attribute-values uri="http://exslt.org/strings" prefix="str"/><svrl:active-pattern><axsl:attribute name="id">premis23_object_authority</axsl:attribute><axsl:attribute name="name">premis23_object_authority</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M15"/><svrl:active-pattern><axsl:attribute name="id">premis23_rights_authority</axsl:attribute><axsl:attribute name="name">premis23_rights_authority</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M16"/><svrl:active-pattern><axsl:attribute name="id">premis23_event_authority</axsl:attribute><axsl:attribute name="name">premis23_event_authority</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M17"/><svrl:active-pattern><axsl:attribute name="id">premis23_agent_authority</axsl:attribute><axsl:attribute name="name">premis23_agent_authority</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M18"/><svrl:active-pattern><axsl:attribute name="id">premis23_object_authorityURI</axsl:attribute><axsl:attribute name="name">premis23_object_authorityURI</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M19"/><svrl:active-pattern><axsl:attribute name="id">premis23_rights_authorityURI</axsl:attribute><axsl:attribute name="name">premis23_rights_authorityURI</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M20"/><svrl:active-pattern><axsl:attribute name="id">premis23_event_authorityURI</axsl:attribute><axsl:attribute name="name">premis23_event_authorityURI</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M21"/><svrl:active-pattern><axsl:attribute name="id">premis23_agent_authorityURI</axsl:attribute><axsl:attribute name="name">premis23_agent_authorityURI</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M22"/><svrl:active-pattern><axsl:attribute name="id">premis23_object_valueURI</axsl:attribute><axsl:attribute name="name">premis23_object_valueURI</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M23"/><svrl:active-pattern><axsl:attribute name="id">premis23_rights_valueURI</axsl:attribute><axsl:attribute name="name">premis23_rights_valueURI</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M24"/><svrl:active-pattern><axsl:attribute name="id">premis23_event_valueURI</axsl:attribute><axsl:attribute name="name">premis23_event_valueURI</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M25"/><svrl:active-pattern><axsl:attribute name="id">premis23_agent_valueURI</axsl:attribute><axsl:attribute name="name">premis23_agent_valueURI</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M26"/><svrl:active-pattern><axsl:attribute name="id">premis22_copyrightDocumentationIdentifier</axsl:attribute><axsl:attribute name="name">premis22_copyrightDocumentationIdentifier</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M27"/><svrl:active-pattern><axsl:attribute name="id">premis22_copyrightApplicableDates</axsl:attribute><axsl:attribute name="name">premis22_copyrightApplicableDates</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M28"/><svrl:active-pattern><axsl:attribute name="id">premis22_licenseDocumentationIdentifier</axsl:attribute><axsl:attribute name="name">premis22_licenseDocumentationIdentifier</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M29"/><svrl:active-pattern><axsl:attribute name="id">premis22_licenseApplicableDates</axsl:attribute><axsl:attribute name="name">premis22_licenseApplicableDates</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M30"/><svrl:active-pattern><axsl:attribute name="id">premis22_statuteDocumentationIdentifier</axsl:attribute><axsl:attribute name="name">premis22_statuteDocumentationIdentifier</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M31"/><svrl:active-pattern><axsl:attribute name="id">premis22_otherRightsInformation</axsl:attribute><axsl:attribute name="name">premis22_otherRightsInformation</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M32"/><svrl:active-pattern><axsl:attribute name="id">premis22_termOfRestriction</axsl:attribute><axsl:attribute name="name">premis22_termOfRestriction</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M33"/><svrl:active-pattern><axsl:attribute name="id">premis22_termOfGrant</axsl:attribute><axsl:attribute name="name">premis22_termOfGrant</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M34"/><svrl:active-pattern><axsl:attribute name="id">premis22_startDate_values</axsl:attribute><axsl:attribute name="name">premis22_startDate_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M35"/><svrl:active-pattern><axsl:attribute name="id">premis22_endDate_values</axsl:attribute><axsl:attribute name="name">premis22_endDate_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M36"/><svrl:active-pattern><axsl:attribute name="id">premis22_copyrightStatusDeterminationDate_values</axsl:attribute><axsl:attribute name="name">premis22_copyrightStatusDeterminationDate_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M37"/><svrl:active-pattern><axsl:attribute name="id">premis22_statuteInformationDeterminationDate_values</axsl:attribute><axsl:attribute name="name">premis22_statuteInformationDeterminationDate_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M38"/><svrl:active-pattern><axsl:attribute name="id">premis22_dateCreatedByApplication_values</axsl:attribute><axsl:attribute name="name">premis22_dateCreatedByApplication_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M39"/><svrl:active-pattern><axsl:attribute name="id">premis22_preservationLevelDateAssigned_values</axsl:attribute><axsl:attribute name="name">premis22_preservationLevelDateAssigned_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M40"/><svrl:active-pattern><axsl:attribute name="id">premis22_eventDateTime_values</axsl:attribute><axsl:attribute name="name">premis22_eventDateTime_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M41"/><svrl:active-pattern><axsl:attribute name="id">premis22_object_CREATED_values</axsl:attribute><axsl:attribute name="name">premis22_object_CREATED_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M42"/><svrl:active-pattern><axsl:attribute name="id">premis22_rights_CREATED_values</axsl:attribute><axsl:attribute name="name">premis22_rights_CREATED_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M43"/><svrl:active-pattern><axsl:attribute name="id">premis22_event_CREATED_values</axsl:attribute><axsl:attribute name="name">premis22_event_CREATED_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M44"/><svrl:active-pattern><axsl:attribute name="id">premis22_agent_CREATED_values</axsl:attribute><axsl:attribute name="name">premis22_agent_CREATED_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M45"/><svrl:active-pattern><axsl:attribute name="id">premis_fixity</axsl:attribute><axsl:attribute name="name">premis_fixity</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M46"/><svrl:active-pattern><axsl:attribute name="id">premis_creatingApplication</axsl:attribute><axsl:attribute name="name">premis_creatingApplication</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M47"/><svrl:active-pattern><axsl:attribute name="id">premis_dateCreatedByApplication</axsl:attribute><axsl:attribute name="name">premis_dateCreatedByApplication</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M48"/><svrl:active-pattern><axsl:attribute name="id">premis_formatDesignation</axsl:attribute><axsl:attribute name="name">premis_formatDesignation</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M49"/><svrl:active-pattern><axsl:attribute name="id">premis_formatName_values</axsl:attribute><axsl:attribute name="name">premis_formatName_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M50"/><svrl:active-pattern><axsl:attribute name="id">premis_formatName_parameters</axsl:attribute><axsl:attribute name="name">premis_formatName_parameters</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M51"/><svrl:active-pattern><axsl:attribute name="id">premis_messageDigestAlgorithm_values</axsl:attribute><axsl:attribute name="name">premis_messageDigestAlgorithm_values</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M52"/><svrl:active-pattern><axsl:attribute name="id">premis_objectIdentifierType_value</axsl:attribute><axsl:attribute name="name">premis_objectIdentifierType_value</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M53"/><svrl:active-pattern><axsl:attribute name="id">premis_objectIdentifierValue_value</axsl:attribute><axsl:attribute name="name">premis_objectIdentifierValue_value</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M54"/><svrl:active-pattern><axsl:attribute name="id">premis_rightsStatementIdentifierType_value</axsl:attribute><axsl:attribute name="name">premis_rightsStatementIdentifierType_value</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M55"/><svrl:active-pattern><axsl:attribute name="id">premis_rightsStatementIdentifierValue_value</axsl:attribute><axsl:attribute name="name">premis_rightsStatementIdentifierValue_value</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M56"/><svrl:active-pattern><axsl:attribute name="id">premis_eventIdentifierType_value</axsl:attribute><axsl:attribute name="name">premis_eventIdentifierType_value</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M57"/><svrl:active-pattern><axsl:attribute name="id">premis_eventIdentifierValue_value</axsl:attribute><axsl:attribute name="name">premis_eventIdentifierValue_value</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M58"/><svrl:active-pattern><axsl:attribute name="id">premis_agentIdentifierType_value</axsl:attribute><axsl:attribute name="name">premis_agentIdentifierType_value</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M59"/><svrl:active-pattern><axsl:attribute name="id">premis_agentIdentifierValue_value</axsl:attribute><axsl:attribute name="name">premis_agentIdentifierValue_value</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M60"/><svrl:active-pattern><axsl:attribute name="id">premis_identifierValue_unique</axsl:attribute><axsl:attribute name="name">premis_identifierValue_unique</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M61"/><svrl:active-pattern><axsl:attribute name="id">link_premis_element</axsl:attribute><axsl:attribute name="name">link_premis_element</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M66"/><svrl:active-pattern><axsl:attribute name="id">required_features_native</axsl:attribute><axsl:attribute name="name">required_features_native</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M69"/><svrl:active-pattern><axsl:attribute name="id">container_with streams</axsl:attribute><axsl:attribute name="name">container_with streams</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M70"/><svrl:active-pattern><axsl:attribute name="id">linking_match_for_streams</axsl:attribute><axsl:attribute name="name">linking_match_for_streams</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M71"/></svrl:schematron-output></axsl:template>

<!--SCHEMATRON PATTERNS-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon">PREMIS metadata validation</svrl:text><axsl:param name="supported_mime_types" select="concat(   'text/csv', '; ',   'application/epub+zip', '; ',   'application/xhtml+xml', '; ',   'text/xml', '; ',   'text/html', '; ',   'application/vnd.oasis.opendocument.text', '; ',   'application/vnd.oasis.opendocument.spreadsheet', '; ',   'application/vnd.oasis.opendocument.presentation', '; ',   'application/vnd.oasis.opendocument.graphics', '; ',   'application/vnd.oasis.opendocument.formula', '; ',   'application/pdf', '; ',   'text/plain', '; ',   'audio/x-aiff', '; ',   'audio/x-wav', '; ',   'audio/flac', '; ',   'audio/mp4', '; ',   'video/jpeg2000', '; ',   'video/mp4', '; ',   'image/jpeg', '; ',   'image/jp2', '; ',   'image/tiff', '; ',   'image/png', '; ',   'application/warc', '; ',   'application/msword', '; ',   'application/vnd.ms-excel', '; ',   'application/vnd.ms-powerpoint', '; ',   'audio/mpeg', '; ',   'audio/x-ms-wma', '; ',   'video/dv', '; ',   'video/mpeg', '; ',   'video/x-ms-wmv', '; ',   'application/postscript', '; ',   'image/gif', '; ',   'application/x-internet-archive', '; ',   'application/vnd.openxmlformats-officedocument.wordprocessingml.document', '; ',   'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', '; ',   'application/vnd.openxmlformats-officedocument.presentationml.presentation', '; ',   'image/x-dpx', '; ',   'application/gml+xml', '; ',   'application/vnd.google-earth.kml+xml', '; ',   'application/x-spss-por', '; ',   'video/x-ms-asf', '; ',   'video/avi', '; ',   'video/MP1S', '; ',   'video/MP2P', '; ',   'video/MP2T', '; ',   'video/mp4', '; ',   'application/mxf', '; ',   'video/mj2', '; ',   'video/quicktime')"/><axsl:param name="supported_pronom_codes" select="   exsl:node-set('x-fmt/18')   | exsl:node-set('fmt/483')   | exsl:node-set('fmt/102 fmt/103')   | exsl:node-set('fmt/101')   | exsl:node-set('fmt/100 fmt/471')   | exsl:node-set('fmt/136')   | exsl:node-set('fmt/137')   | exsl:node-set('fmt/138')   | exsl:node-set('fmt/139')   | exsl:node-set('')   | exsl:node-set('fmt/95 fmt/354 fmt/476 fmt/477 fmt/478 fmt/16 fmt/17 fmt/18 fmt/19 fmt/20 fmt/276')   | exsl:node-set('x-fmt/111')   | exsl:node-set('x-fmt/135')   | exsl:node-set('fmt/527 fmt/141')    | exsl:node-set('fmt/279')   | exsl:node-set('fmt/199')   | exsl:node-set('x-fmt/392')    | exsl:node-set('fmt/199')    | exsl:node-set('fmt/42 fmt/43 fmt/44')   | exsl:node-set('x-fmt/392')   | exsl:node-set('fmt/353 fmt/438 fmt/730 fmt/155')   | exsl:node-set('fmt/13')   | exsl:node-set('fmt/289')   | exsl:node-set('fmt/40')   | exsl:node-set('fmt/61 fmt/62')   | exsl:node-set('fmt/126')   | exsl:node-set('fmt/134')   | exsl:node-set('fmt/132')   | exsl:node-set('x-fmt/152')   | exsl:node-set('fmt/649 fmt/640')   | exsl:node-set('fmt/133')   | exsl:node-set('fmt/124')   | exsl:node-set('fmt/3 fmt/4')   | exsl:node-set('x-fmt/219 fmt/410')   | exsl:node-set('fmt/412')   | exsl:node-set('fmt/214')   | exsl:node-set('fmt/215')   | exsl:node-set('fmt/541')   | exsl:node-set('x-fmt/227')   | exsl:node-set('fmt/224')   | exsl:node-set('')   | exsl:node-set('fmt/131')   | exsl:node-set('fmt/5')   | exsl:node-set('x-fmt/385')   | exsl:node-set('x-fmt/386')   | exsl:node-set('fmt/585')   | exsl:node-set('fmt/199')   | exsl:node-set('')   | exsl:node-set('fmt/337')   | exsl:node-set('x-fmt/384')"/><axsl:param name="supported_checksum_algorithms" select="string('MD5; SHA-1; SHA-224; SHA-256; SHA-384; SHA-512; md5; sha-1; sha-224; sha-256; sha-384; sha-512')"/><axsl:param name="supported_charsets" select="string('ISO-8859-15 UTF-8 UTF-16 UTF-32 iso-8859-15 utf-8 utf-16 utf-32')"/><axsl:param name="mimes_require_charset" select="string('application/xhtml+xml text/xml text/html text/csv text/plain application/gml+xml application/vnd.google-earth.kml+xml')"/><axsl:param name="container_formats" select="string('video/x-ms-asf video/avi video/MP1S video/MP2P video/MP2T video/mp4 application/mxf video/mj2 video/quicktime')"/>

<!--PATTERN premis23_object_authority-->


	<!--RULE -->
<axsl:template match="premis:object//*[(@authority) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:OBJECT') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]" priority="1000" mode="M15"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:object//*[(@authority) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:OBJECT') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@authority)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not(@authority)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@authority)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:OBJECT')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.3')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M15"/></axsl:template><axsl:template match="text()" priority="-1" mode="M15"/><axsl:template match="@*|node()" priority="-2" mode="M15"><axsl:apply-templates select="@*|*" mode="M15"/></axsl:template>

<!--PATTERN premis23_rights_authority-->


	<!--RULE -->
<axsl:template match="premis:rightsStatement//*[(@authority) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]" priority="1000" mode="M16"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:rightsStatement//*[(@authority) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@authority)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not(@authority)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@authority)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:RIGHTS')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.3')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M16"/></axsl:template><axsl:template match="text()" priority="-1" mode="M16"/><axsl:template match="@*|node()" priority="-2" mode="M16"><axsl:apply-templates select="@*|*" mode="M16"/></axsl:template>

<!--PATTERN premis23_event_authority-->


	<!--RULE -->
<axsl:template match="premis:event//*[(@authority) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:EVENT') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]" priority="1000" mode="M17"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:event//*[(@authority) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:EVENT') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@authority)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not(@authority)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@authority)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:EVENT')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.3')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M17"/></axsl:template><axsl:template match="text()" priority="-1" mode="M17"/><axsl:template match="@*|node()" priority="-2" mode="M17"><axsl:apply-templates select="@*|*" mode="M17"/></axsl:template>

<!--PATTERN premis23_agent_authority-->


	<!--RULE -->
<axsl:template match="premis:agent//*[(@authority) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:AGENT') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]" priority="1000" mode="M18"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:agent//*[(@authority) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:AGENT') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@authority)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not(@authority)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@authority)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:AGENT')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.3')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M18"/></axsl:template><axsl:template match="text()" priority="-1" mode="M18"/><axsl:template match="@*|node()" priority="-2" mode="M18"><axsl:apply-templates select="@*|*" mode="M18"/></axsl:template>

<!--PATTERN premis23_object_authorityURI-->


	<!--RULE -->
<axsl:template match="premis:object//*[(@authorityURI) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:OBJECT') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]" priority="1000" mode="M19"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:object//*[(@authorityURI) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:OBJECT') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@authorityURI)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not(@authorityURI)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@authorityURI)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:OBJECT')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.3')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M19"/></axsl:template><axsl:template match="text()" priority="-1" mode="M19"/><axsl:template match="@*|node()" priority="-2" mode="M19"><axsl:apply-templates select="@*|*" mode="M19"/></axsl:template>

<!--PATTERN premis23_rights_authorityURI-->


	<!--RULE -->
<axsl:template match="premis:rightsStatement//*[(@authorityURI) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]" priority="1000" mode="M20"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:rightsStatement//*[(@authorityURI) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@authorityURI)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not(@authorityURI)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@authorityURI)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:RIGHTS')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.3')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M20"/></axsl:template><axsl:template match="text()" priority="-1" mode="M20"/><axsl:template match="@*|node()" priority="-2" mode="M20"><axsl:apply-templates select="@*|*" mode="M20"/></axsl:template>

<!--PATTERN premis23_event_authorityURI-->


	<!--RULE -->
<axsl:template match="premis:event//*[(@authorityURI) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:EVENT') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]" priority="1000" mode="M21"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:event//*[(@authorityURI) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:EVENT') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@authorityURI)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not(@authorityURI)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@authorityURI)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:EVENT')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.3')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M21"/></axsl:template><axsl:template match="text()" priority="-1" mode="M21"/><axsl:template match="@*|node()" priority="-2" mode="M21"><axsl:apply-templates select="@*|*" mode="M21"/></axsl:template>

<!--PATTERN premis23_agent_authorityURI-->


	<!--RULE -->
<axsl:template match="premis:agent//*[(@authorityURI) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:AGENT') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]" priority="1000" mode="M22"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:agent//*[(@authorityURI) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:AGENT') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@authorityURI)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not(@authorityURI)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@authorityURI)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:AGENT')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.3')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M22"/></axsl:template><axsl:template match="text()" priority="-1" mode="M22"/><axsl:template match="@*|node()" priority="-2" mode="M22"><axsl:apply-templates select="@*|*" mode="M22"/></axsl:template>

<!--PATTERN premis23_object_valueURI-->


	<!--RULE -->
<axsl:template match="premis:object//*[(@valueURI) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:OBJECT') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]" priority="1000" mode="M23"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:object//*[(@valueURI) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:OBJECT') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@valueURI)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not(@valueURI)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@valueURI)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:OBJECT')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.3')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M23"/></axsl:template><axsl:template match="text()" priority="-1" mode="M23"/><axsl:template match="@*|node()" priority="-2" mode="M23"><axsl:apply-templates select="@*|*" mode="M23"/></axsl:template>

<!--PATTERN premis23_rights_valueURI-->


	<!--RULE -->
<axsl:template match="premis:rightsStatement//*[(@valueURI) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]" priority="1000" mode="M24"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:rightsStatement//*[(@valueURI) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@valueURI)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not(@valueURI)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@valueURI)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:RIGHTS')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.3')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M24"/></axsl:template><axsl:template match="text()" priority="-1" mode="M24"/><axsl:template match="@*|node()" priority="-2" mode="M24"><axsl:apply-templates select="@*|*" mode="M24"/></axsl:template>

<!--PATTERN premis23_event_valueURI-->


	<!--RULE -->
<axsl:template match="premis:event//*[(@valueURI) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:EVENT') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]" priority="1000" mode="M25"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:event//*[(@valueURI) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:EVENT') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@valueURI)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not(@valueURI)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@valueURI)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:EVENT')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.3')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M25"/></axsl:template><axsl:template match="text()" priority="-1" mode="M25"/><axsl:template match="@*|node()" priority="-2" mode="M25"><axsl:apply-templates select="@*|*" mode="M25"/></axsl:template>

<!--PATTERN premis23_agent_valueURI-->


	<!--RULE -->
<axsl:template match="premis:agent//*[(@valueURI) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:AGENT') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]" priority="1000" mode="M26"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:agent//*[(@valueURI) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:AGENT') and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.3'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@valueURI)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not(@valueURI)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Attribute '<axsl:text/><axsl:value-of select="name(@valueURI)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:AGENT')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.3')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M26"/></axsl:template><axsl:template match="text()" priority="-1" mode="M26"/><axsl:template match="@*|node()" priority="-2" mode="M26"><axsl:apply-templates select="@*|*" mode="M26"/></axsl:template>

<!--PATTERN premis22_copyrightDocumentationIdentifier-->


	<!--RULE -->
<axsl:template match="premis:copyrightInformation[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]" priority="1000" mode="M27"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:copyrightInformation[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(./premis:copyrightDocumentationIdentifier)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not(./premis:copyrightDocumentationIdentifier)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(premis:copyrightDocumentationIdentifier)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:RIGHTS')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.2')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M27"/></axsl:template><axsl:template match="text()" priority="-1" mode="M27"/><axsl:template match="@*|node()" priority="-2" mode="M27"><axsl:apply-templates select="@*|*" mode="M27"/></axsl:template>

<!--PATTERN premis22_copyrightApplicableDates-->


	<!--RULE -->
<axsl:template match="premis:copyrightInformation[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]" priority="1000" mode="M28"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:copyrightInformation[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(./premis:copyrightApplicableDates)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not(./premis:copyrightApplicableDates)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(premis:copyrightApplicableDates)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:RIGHTS')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.2')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M28"/></axsl:template><axsl:template match="text()" priority="-1" mode="M28"/><axsl:template match="@*|node()" priority="-2" mode="M28"><axsl:apply-templates select="@*|*" mode="M28"/></axsl:template>

<!--PATTERN premis22_licenseDocumentationIdentifier-->


	<!--RULE -->
<axsl:template match="premis:licenseInformation[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]" priority="1000" mode="M29"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:licenseInformation[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(./premis:licenseDocumentationIdentifier)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not(./premis:licenseDocumentationIdentifier)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(premis:licenseDocumentationIdentifier)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:RIGHTS')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.2')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M29"/></axsl:template><axsl:template match="text()" priority="-1" mode="M29"/><axsl:template match="@*|node()" priority="-2" mode="M29"><axsl:apply-templates select="@*|*" mode="M29"/></axsl:template>

<!--PATTERN premis22_licenseApplicableDates-->


	<!--RULE -->
<axsl:template match="premis:licenseInformation[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]" priority="1000" mode="M30"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:licenseInformation[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(./premis:licenseApplicableDates)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not(./premis:licenseApplicableDates)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(premis:licenseApplicableDates)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:RIGHTS')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.2')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M30"/></axsl:template><axsl:template match="text()" priority="-1" mode="M30"/><axsl:template match="@*|node()" priority="-2" mode="M30"><axsl:apply-templates select="@*|*" mode="M30"/></axsl:template>

<!--PATTERN premis22_statuteDocumentationIdentifier-->


	<!--RULE -->
<axsl:template match="premis:statuteInformation[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]" priority="1000" mode="M31"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:statuteInformation[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(./premis:statuteDocumentationIdentifier)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not(./premis:statuteDocumentationIdentifier)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(premis:statuteDocumentationIdentifier)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:RIGHTS')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.2')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M31"/></axsl:template><axsl:template match="text()" priority="-1" mode="M31"/><axsl:template match="@*|node()" priority="-2" mode="M31"><axsl:apply-templates select="@*|*" mode="M31"/></axsl:template>

<!--PATTERN premis22_otherRightsInformation-->


	<!--RULE -->
<axsl:template match="premis:rightsStatement[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]" priority="1000" mode="M32"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:rightsStatement[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(./premis:otherRightsInformation)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not(./premis:otherRightsInformation)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(premis:otherRightsInformation)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:RIGHTS')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.2')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M32"/></axsl:template><axsl:template match="text()" priority="-1" mode="M32"/><axsl:template match="@*|node()" priority="-2" mode="M32"><axsl:apply-templates select="@*|*" mode="M32"/></axsl:template>

<!--PATTERN premis22_termOfRestriction-->


	<!--RULE -->
<axsl:template match="premis:rightsGranted[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]" priority="1000" mode="M33"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:rightsGranted[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(./premis:termOfRestriction)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not(./premis:termOfRestriction)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(premis:termOfRestriction)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:RIGHTS')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.2')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M33"/></axsl:template><axsl:template match="text()" priority="-1" mode="M33"/><axsl:template match="@*|node()" priority="-2" mode="M33"><axsl:apply-templates select="@*|*" mode="M33"/></axsl:template>

<!--PATTERN premis22_termOfGrant-->


	<!--RULE -->
<axsl:template match="premis:rightsGranted[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]" priority="1000" mode="M34"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:rightsGranted[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(./premis:termOfGrant)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="not(./premis:termOfGrant)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(premis:termOfGrant)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:RIGHTS')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.2')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M34"/></axsl:template><axsl:template match="text()" priority="-1" mode="M34"/><axsl:template match="@*|node()" priority="-2" mode="M34"><axsl:apply-templates select="@*|*" mode="M34"/></axsl:template>

<!--PATTERN premis22_startDate_values-->


	<!--RULE -->
<axsl:template match="premis:startDate[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]" priority="1000" mode="M35"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:startDate[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="normalize-space(.)!=string('OPEN')"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="normalize-space(.)!=string('OPEN')"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:RIGHTS')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.2')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>').
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M35"/></axsl:template><axsl:template match="text()" priority="-1" mode="M35"/><axsl:template match="@*|node()" priority="-2" mode="M35"><axsl:apply-templates select="@*|*" mode="M35"/></axsl:template>

<!--PATTERN premis22_endDate_values-->


	<!--RULE -->
<axsl:template match="premis:endDate[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]" priority="1000" mode="M36"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:endDate[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="normalize-space(.)!=string('OPEN')"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="normalize-space(.)!=string('OPEN')"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:RIGHTS')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.2')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>').
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M36"/></axsl:template><axsl:template match="text()" priority="-1" mode="M36"/><axsl:template match="@*|node()" priority="-2" mode="M36"><axsl:apply-templates select="@*|*" mode="M36"/></axsl:template>

<!--PATTERN premis22_copyrightStatusDeterminationDate_values-->


	<!--RULE -->
<axsl:template match="premis:copyrightStatusDeterminationDate[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]" priority="1000" mode="M37"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:copyrightStatusDeterminationDate[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="normalize-space(.)!=string('OPEN')"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="normalize-space(.)!=string('OPEN')"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:RIGHTS')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.2')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>').
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M37"/></axsl:template><axsl:template match="text()" priority="-1" mode="M37"/><axsl:template match="@*|node()" priority="-2" mode="M37"><axsl:apply-templates select="@*|*" mode="M37"/></axsl:template>

<!--PATTERN premis22_statuteInformationDeterminationDate_values-->


	<!--RULE -->
<axsl:template match="premis:statuteInformationDeterminationDate[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]" priority="1000" mode="M38"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:statuteInformationDeterminationDate[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="normalize-space(.)!=string('OPEN')"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="normalize-space(.)!=string('OPEN')"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:RIGHTS')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.2')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>').
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M38"/></axsl:template><axsl:template match="text()" priority="-1" mode="M38"/><axsl:template match="@*|node()" priority="-2" mode="M38"><axsl:apply-templates select="@*|*" mode="M38"/></axsl:template>

<!--PATTERN premis22_dateCreatedByApplication_values-->


	<!--RULE -->
<axsl:template match="premis:dateCreatedByApplication[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:OBJECT') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]" priority="1000" mode="M39"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:dateCreatedByApplication[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:OBJECT') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="normalize-space(.)!=string('OPEN')"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="normalize-space(.)!=string('OPEN')"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:OBJECT')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.2')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>').
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M39"/></axsl:template><axsl:template match="text()" priority="-1" mode="M39"/><axsl:template match="@*|node()" priority="-2" mode="M39"><axsl:apply-templates select="@*|*" mode="M39"/></axsl:template>

<!--PATTERN premis22_preservationLevelDateAssigned_values-->


	<!--RULE -->
<axsl:template match="premis:preservationLevelDateAssigned[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:OBJECT') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]" priority="1000" mode="M40"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:preservationLevelDateAssigned[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:OBJECT') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="normalize-space(.)!=string('OPEN')"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="normalize-space(.)!=string('OPEN')"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:OBJECT')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.2')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>').
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M40"/></axsl:template><axsl:template match="text()" priority="-1" mode="M40"/><axsl:template match="@*|node()" priority="-2" mode="M40"><axsl:apply-templates select="@*|*" mode="M40"/></axsl:template>

<!--PATTERN premis22_eventDateTime_values-->


	<!--RULE -->
<axsl:template match="premis:eventDateTime[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:EVENT') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]" priority="1000" mode="M41"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:eventDateTime[(true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:EVENT') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="normalize-space(.)!=string('OPEN')"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="normalize-space(.)!=string('OPEN')"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:EVENT')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.2')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>').
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M41"/></axsl:template><axsl:template match="text()" priority="-1" mode="M41"/><axsl:template match="@*|node()" priority="-2" mode="M41"><axsl:apply-templates select="@*|*" mode="M41"/></axsl:template>

<!--PATTERN premis22_object_CREATED_values-->


	<!--RULE -->
<axsl:template match="premis:mdSec[@CREATED and (true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:OBJECT') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]" priority="1000" mode="M42"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:mdSec[@CREATED and (true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:OBJECT') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="normalize-space(@CREATED)!=string('OPEN')"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="normalize-space(@CREATED)!=string('OPEN')"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@CREATED"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@CREATED)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:OBJECT')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.2')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>').
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M42"/></axsl:template><axsl:template match="text()" priority="-1" mode="M42"/><axsl:template match="@*|node()" priority="-2" mode="M42"><axsl:apply-templates select="@*|*" mode="M42"/></axsl:template>

<!--PATTERN premis22_rights_CREATED_values-->


	<!--RULE -->
<axsl:template match="premis:mdSec[@CREATED and (true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]" priority="1000" mode="M43"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:mdSec[@CREATED and (true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:RIGHTS') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="normalize-space(@CREATED)!=string('OPEN')"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="normalize-space(@CREATED)!=string('OPEN')"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@CREATED"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@CREATED)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:RIGHTS')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.2')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>').
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M43"/></axsl:template><axsl:template match="text()" priority="-1" mode="M43"/><axsl:template match="@*|node()" priority="-2" mode="M43"><axsl:apply-templates select="@*|*" mode="M43"/></axsl:template>

<!--PATTERN premis22_event_CREATED_values-->


	<!--RULE -->
<axsl:template match="premis:mdSec[@CREATED and (true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:EVENT') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]" priority="1000" mode="M44"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:mdSec[@CREATED and (true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:EVENT') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="normalize-space(@CREATED)!=string('OPEN')"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="normalize-space(@CREATED)!=string('OPEN')"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@CREATED"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@CREATED)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:EVENT')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.2')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>').
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M44"/></axsl:template><axsl:template match="text()" priority="-1" mode="M44"/><axsl:template match="@*|node()" priority="-2" mode="M44"><axsl:apply-templates select="@*|*" mode="M44"/></axsl:template>

<!--PATTERN premis22_agent_CREATED_values-->


	<!--RULE -->
<axsl:template match="premis:mdSec[@CREATED and (true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:AGENT') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]" priority="1000" mode="M45"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:mdSec[@CREATED and (true()) and normalize-space(ancestor::mets:mdWrap/@MDTYPE)=string('PREMIS:AGENT') and ancestor::mets:mdWrap/@MDTYPEVERSION and number(normalize-space(ancestor::mets:mdWrap/@MDTYPEVERSION)) &lt; number(string('2.2'))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="normalize-space(@CREATED)!=string('OPEN')"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="normalize-space(@CREATED)!=string('OPEN')"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@CREATED"/><axsl:text/>' is not allowed in attribute '<axsl:text/><axsl:value-of select="name(@CREATED)"/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' in <axsl:text/><axsl:value-of select="string('PREMIS:AGENT')"/><axsl:text/> version older than <axsl:text/><axsl:value-of select="string('2.2')"/><axsl:text/>. (ID of the METS metadata section '<axsl:text/><axsl:value-of select="name(ancestor::mets:mdWrap/..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="ancestor::mets:mdWrap/../@ID"/><axsl:text/>').
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M45"/></axsl:template><axsl:template match="text()" priority="-1" mode="M45"/><axsl:template match="@*|node()" priority="-2" mode="M45"><axsl:apply-templates select="@*|*" mode="M45"/></axsl:template>

<!--PATTERN premis_fixity-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/premis:object[normalize-space(@xsi:type)='premis:file']//premis:objectCharacteristics[(true())]" priority="1000" mode="M46"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/premis:object[normalize-space(@xsi:type)='premis:file']//premis:objectCharacteristics[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./premis:fixity)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./premis:fixity) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('premis:fixity')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M46"/></axsl:template><axsl:template match="text()" priority="-1" mode="M46"/><axsl:template match="@*|node()" priority="-2" mode="M46"><axsl:apply-templates select="@*|*" mode="M46"/></axsl:template>

<!--PATTERN premis_creatingApplication-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/premis:object[normalize-space(@xsi:type)='premis:file']//premis:objectCharacteristics[(true())]" priority="1000" mode="M47"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/premis:object[normalize-space(@xsi:type)='premis:file']//premis:objectCharacteristics[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./premis:creatingApplication)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./premis:creatingApplication) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('premis:creatingApplication')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M47"/></axsl:template><axsl:template match="text()" priority="-1" mode="M47"/><axsl:template match="@*|node()" priority="-2" mode="M47"><axsl:apply-templates select="@*|*" mode="M47"/></axsl:template>

<!--PATTERN premis_dateCreatedByApplication-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/premis:object[normalize-space(@xsi:type)='premis:file']//premis:creatingApplication[(true())]" priority="1000" mode="M48"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/premis:object[normalize-space(@xsi:type)='premis:file']//premis:creatingApplication[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./premis:dateCreatedByApplication)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./premis:dateCreatedByApplication) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('premis:dateCreatedByApplication')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M48"/></axsl:template><axsl:template match="text()" priority="-1" mode="M48"/><axsl:template match="@*|node()" priority="-2" mode="M48"><axsl:apply-templates select="@*|*" mode="M48"/></axsl:template>

<!--PATTERN premis_formatDesignation-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/premis:object[not(normalize-space(@xsi:type)='premis:representation')]//premis:format[(true())]" priority="1000" mode="M49"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/premis:object[not(normalize-space(@xsi:type)='premis:representation')]//premis:format[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(./premis:formatDesignation)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./premis:formatDesignation) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="string('premis:formatDesignation')"/><axsl:text/>' is required in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M49"/></axsl:template><axsl:template match="text()" priority="-1" mode="M49"/><axsl:template match="@*|node()" priority="-2" mode="M49"><axsl:apply-templates select="@*|*" mode="M49"/></axsl:template>

<!--PATTERN premis_formatName_values-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/premis:object//premis:format[.//premis:formatName and (true())]" priority="1000" mode="M50"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/premis:object//premis:format[.//premis:formatName and (true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="formattoken" select="str:split(.//premis:formatName, ';')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(contains(concat(' ', $supported_mime_types, '; '), concat(' ', normalize-space($formattoken[1]), '; '))) or    not(.//premis:formatRegistryKey) or contains(concat(' ', normalize-space($supported_pronom_codes[count(str:split(substring-before(concat(' ', $supported_mime_types, '; '), concat(' ', normalize-space($formattoken[1]), '; ')),';'))+1]), ' '), concat(' ', normalize-space(.//premis:formatRegistryKey), ' ')) or normalize-space(.//premis:formatRegistryKey)='')     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(contains(concat(' ', $supported_mime_types, '; '), concat(' ', normalize-space($formattoken[1]), '; '))) or not(.//premis:formatRegistryKey) or contains(concat(' ', normalize-space($supported_pronom_codes[count(str:split(substring-before(concat(' ', $supported_mime_types, '; '), concat(' ', normalize-space($formattoken[1]), '; ')),';'))+1]), ' '), concat(' ', normalize-space(.//premis:formatRegistryKey), ' ')) or normalize-space(.//premis:formatRegistryKey)='') or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
		   		Value '<axsl:text/><axsl:value-of select=".//premis:formatRegistryKey"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.//premis:formatRegistryKey)"/><axsl:text/>', when format name is '<axsl:text/><axsl:value-of select="$formattoken[1]"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>. Valid values are: <axsl:text/><axsl:value-of select="normalize-space($supported_pronom_codes[count(str:split(substring-before(concat(' ', $supported_mime_types, '; '), concat(' ', normalize-space($formattoken[1]), '; ')),';'))+1])"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M50"/></axsl:template><axsl:template match="text()" priority="-1" mode="M50"/><axsl:template match="@*|node()" priority="-2" mode="M50"><axsl:apply-templates select="@*|*" mode="M50"/></axsl:template>

<!--PATTERN premis_formatName_parameters-->


	<!--RULE -->
<axsl:template match="mets:techMD//premis:formatName[count(str:split(.,';'))&gt;2 and (true())]" priority="1002" mode="M51"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD//premis:formatName[count(str:split(.,';'))&gt;2 and (true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="formattoken" select="str:split(., ';')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count($formattoken) &lt; 4)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count($formattoken) &lt; 4) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
		   		Element 'premis:formatName' has too many parameters. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:variable name="formatparam1" select="str:split(normalize-space($formattoken[2]), '=')"/><axsl:variable name="formatparam2" select="str:split(normalize-space($formattoken[3]), '=')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="((normalize-space($formatparam1[1])='charset' and normalize-space($formatparam2[1])='alt-format')    or (normalize-space($formatparam1[1])='alt-format' and normalize-space($formatparam2[1])='charset'))     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="((normalize-space($formatparam1[1])='charset' and normalize-space($formatparam2[1])='alt-format') or (normalize-space($formatparam1[1])='alt-format' and normalize-space($formatparam2[1])='charset')) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
		   		Element 'premis:formatName' requires only parameters 'charset' and 'alt-format'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(normalize-space($formatparam1[1])!='charset' or    (normalize-space($formatparam1[1])='charset' and contains(concat(' ', $supported_charsets, ' '), concat(' ', normalize-space($formatparam1[2]), ' '))))     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(normalize-space($formatparam1[1])!='charset' or (normalize-space($formatparam1[1])='charset' and contains(concat(' ', $supported_charsets, ' '), concat(' ', normalize-space($formatparam1[2]), ' ')))) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
		   		Value '<axsl:text/><axsl:value-of select="$formatparam1[2]"/><axsl:text/>' in parameter 'charset' is not allowed in element 'premis:formatName'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(normalize-space($formatparam2[1])!='charset' or    (normalize-space($formatparam2[1])='charset' and contains(concat(' ', $supported_charsets, ' '), concat(' ', normalize-space($formatparam2[2]), ' '))))     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(normalize-space($formatparam2[1])!='charset' or (normalize-space($formatparam2[1])='charset' and contains(concat(' ', $supported_charsets, ' '), concat(' ', normalize-space($formatparam2[2]), ' ')))) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
		   		Value '<axsl:text/><axsl:value-of select="$formatparam2[2]"/><axsl:text/>' in parameter 'charset' is not allowed in element 'premis:formatName'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M51"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:techMD//premis:formatName[count(str:split(.,';'))=2 and (true())]" priority="1001" mode="M51"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD//premis:formatName[count(str:split(.,';'))=2 and (true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="formattoken" select="str:split(., ';')"/><axsl:variable name="formatparam" select="str:split(normalize-space($formattoken[2]), '=')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(normalize-space($formatparam[1])='charset' or normalize-space($formatparam[1])='alt-format')     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(normalize-space($formatparam[1])='charset' or normalize-space($formatparam[1])='alt-format') or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
		   		Element 'premis:formatName' requires only parameters 'charset' and 'alt-format'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(normalize-space($formatparam[1])!='charset' or    (normalize-space($formatparam[1])='charset' and contains(concat(' ', $supported_charsets, ' '), concat(' ', normalize-space($formatparam[2]), ' '))))     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(normalize-space($formatparam[1])!='charset' or (normalize-space($formatparam[1])='charset' and contains(concat(' ', $supported_charsets, ' '), concat(' ', normalize-space($formatparam[2]), ' ')))) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
		   		Value '<axsl:text/><axsl:value-of select="$formatparam[2]"/><axsl:text/>' in parameter 'charset' is not allowed in element 'premis:formatName'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(contains(concat(' ', $mimes_require_charset, ' '),concat(' ', normalize-space($formattoken[1]), ' ')))    or (contains(concat(' ', $mimes_require_charset, ' '),concat(' ', normalize-space($formattoken[1]), ' ')) and normalize-space($formatparam[1])='charset'))     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(contains(concat(' ', $mimes_require_charset, ' '),concat(' ', normalize-space($formattoken[1]), ' '))) or (contains(concat(' ', $mimes_require_charset, ' '),concat(' ', normalize-space($formattoken[1]), ' ')) and normalize-space($formatparam[1])='charset')) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
		   		Element 'premis:formatName' requires parameter 'charset' with format '<axsl:text/><axsl:value-of select="$formattoken[1]"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M51"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:techMD//premis:formatName[count(str:split(.,';'))=1 and (true())]" priority="1000" mode="M51"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD//premis:formatName[count(str:split(.,';'))=1 and (true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(contains(concat(' ', $mimes_require_charset, ' '),concat(' ', normalize-space(.), ' '))))     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(contains(concat(' ', $mimes_require_charset, ' '),concat(' ', normalize-space(.), ' ')))) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element 'premis:formatName' requires parameter 'charset' with format '<axsl:text/><axsl:value-of select="."/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M51"/></axsl:template><axsl:template match="text()" priority="-1" mode="M51"/><axsl:template match="@*|node()" priority="-2" mode="M51"><axsl:apply-templates select="@*|*" mode="M51"/></axsl:template>

<!--PATTERN premis_messageDigestAlgorithm_values-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/premis:object[normalize-space(@xsi:type)='premis:file']//premis:messageDigestAlgorithm[not(contains(., ';')) and (true())]" priority="1001" mode="M52"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/premis:object[normalize-space(@xsi:type)='premis:file']//premis:messageDigestAlgorithm[not(contains(., ';')) and (true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',$supported_checksum_algorithms,'; '), concat('; ',normalize-space(.),'; ')))     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',$supported_checksum_algorithms,'; '), concat('; ',normalize-space(.),'; '))) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/> Valid values are: <axsl:text/><axsl:value-of select="string($supported_checksum_algorithms)"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M52"/></axsl:template>

	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/premis:object[normalize-space(@xsi:type)='premis:file']//premis:messageDigestAlgorithm[contains(., ';') and (true())]" priority="1000" mode="M52"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/premis:object[normalize-space(@xsi:type)='premis:file']//premis:messageDigestAlgorithm[contains(., ';') and (true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/><axsl:variable name="params" select="str:split(.,';')"/><axsl:variable name="realValue" select="concat(normalize-space($params[1]), ';', normalize-space($params[2]))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(contains(concat('; ',$supported_checksum_algorithms,'; '), concat('; ',$realValue,'; ')))     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(contains(concat('; ',$supported_checksum_algorithms,'; '), concat('; ',$realValue,'; '))) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>. Valid values are: <axsl:text/><axsl:value-of select="string($supported_checksum_algorithms)"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M52"/></axsl:template><axsl:template match="text()" priority="-1" mode="M52"/><axsl:template match="@*|node()" priority="-2" mode="M52"><axsl:apply-templates select="@*|*" mode="M52"/></axsl:template>

<!--PATTERN premis_objectIdentifierType_value-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/premis:object//premis:objectIdentifierType[(true())]" priority="1000" mode="M53"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/premis:object//premis:objectIdentifierType[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(string-length(normalize-space(.)) &gt; 0)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(string-length(normalize-space(.)) &gt; 0) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' is not allowed to be empty. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M53"/></axsl:template><axsl:template match="text()" priority="-1" mode="M53"/><axsl:template match="@*|node()" priority="-2" mode="M53"><axsl:apply-templates select="@*|*" mode="M53"/></axsl:template>

<!--PATTERN premis_objectIdentifierValue_value-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData/premis:object//premis:objectIdentifierValue[(true())]" priority="1000" mode="M54"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData/premis:object//premis:objectIdentifierValue[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(string-length(normalize-space(.)) &gt; 0)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(string-length(normalize-space(.)) &gt; 0) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' is not allowed to be empty. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M54"/></axsl:template><axsl:template match="text()" priority="-1" mode="M54"/><axsl:template match="@*|node()" priority="-2" mode="M54"><axsl:apply-templates select="@*|*" mode="M54"/></axsl:template>

<!--PATTERN premis_rightsStatementIdentifierType_value-->


	<!--RULE -->
<axsl:template match="mets:rightsMD/mets:mdWrap/mets:xmlData/premis:rights//premis:rightsStatementIdentifierType[(true())]" priority="1000" mode="M55"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:rightsMD/mets:mdWrap/mets:xmlData/premis:rights//premis:rightsStatementIdentifierType[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(string-length(normalize-space(.)) &gt; 0)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(string-length(normalize-space(.)) &gt; 0) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' is not allowed to be empty. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M55"/></axsl:template><axsl:template match="text()" priority="-1" mode="M55"/><axsl:template match="@*|node()" priority="-2" mode="M55"><axsl:apply-templates select="@*|*" mode="M55"/></axsl:template>

<!--PATTERN premis_rightsStatementIdentifierValue_value-->


	<!--RULE -->
<axsl:template match="mets:rightsMD/mets:mdWrap/mets:xmlData/premis:rights//premis:rightsStatementIdentifierValue[(true())]" priority="1000" mode="M56"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:rightsMD/mets:mdWrap/mets:xmlData/premis:rights//premis:rightsStatementIdentifierValue[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(string-length(normalize-space(.)) &gt; 0)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(string-length(normalize-space(.)) &gt; 0) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' is not allowed to be empty. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M56"/></axsl:template><axsl:template match="text()" priority="-1" mode="M56"/><axsl:template match="@*|node()" priority="-2" mode="M56"><axsl:apply-templates select="@*|*" mode="M56"/></axsl:template>

<!--PATTERN premis_eventIdentifierType_value-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdWrap/mets:xmlData/premis:event//premis:eventIdentifierType[(true())]" priority="1000" mode="M57"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdWrap/mets:xmlData/premis:event//premis:eventIdentifierType[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(string-length(normalize-space(.)) &gt; 0)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(string-length(normalize-space(.)) &gt; 0) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' is not allowed to be empty. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M57"/></axsl:template><axsl:template match="text()" priority="-1" mode="M57"/><axsl:template match="@*|node()" priority="-2" mode="M57"><axsl:apply-templates select="@*|*" mode="M57"/></axsl:template>

<!--PATTERN premis_eventIdentifierValue_value-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdWrap/mets:xmlData/premis:event//premis:eventIdentifierValue[(true())]" priority="1000" mode="M58"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdWrap/mets:xmlData/premis:event//premis:eventIdentifierValue[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(string-length(normalize-space(.)) &gt; 0)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(string-length(normalize-space(.)) &gt; 0) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' is not allowed to be empty. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M58"/></axsl:template><axsl:template match="text()" priority="-1" mode="M58"/><axsl:template match="@*|node()" priority="-2" mode="M58"><axsl:apply-templates select="@*|*" mode="M58"/></axsl:template>

<!--PATTERN premis_agentIdentifierType_value-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdWrap/mets:xmlData/premis:agent//premis:agentIdentifierType[(true())]" priority="1000" mode="M59"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdWrap/mets:xmlData/premis:agent//premis:agentIdentifierType[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(string-length(normalize-space(.)) &gt; 0)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(string-length(normalize-space(.)) &gt; 0) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' is not allowed to be empty. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M59"/></axsl:template><axsl:template match="text()" priority="-1" mode="M59"/><axsl:template match="@*|node()" priority="-2" mode="M59"><axsl:apply-templates select="@*|*" mode="M59"/></axsl:template>

<!--PATTERN premis_agentIdentifierValue_value-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdWrap/mets:xmlData/premis:agent//premis:agentIdentifierValue[(true())]" priority="1000" mode="M60"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdWrap/mets:xmlData/premis:agent//premis:agentIdentifierValue[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(string-length(normalize-space(.)) &gt; 0)     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(string-length(normalize-space(.)) &gt; 0) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' is not allowed to be empty. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M60"/></axsl:template><axsl:template match="text()" priority="-1" mode="M60"/><axsl:template match="@*|node()" priority="-2" mode="M60"><axsl:apply-templates select="@*|*" mode="M60"/></axsl:template>

<!--PATTERN premis_identifierValue_unique-->


	<!--RULE -->
<axsl:template match="mets:mets[(true())]" priority="1000" mode="M61"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[(true())]"/><axsl:variable name="given_profile" select="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count(sets:distinct(.//premis:objectIdentifierValue | .//premis:eventIdentifierValue | .//premis:agentIdentifierValue | .//premis:rightsStatementIdentifierValue)) = count(.//premis:objectIdentifierValue | .//premis:eventIdentifierValue | .//premis:agentIdentifierValue | .//premis:rightsStatementIdentifierValue))     or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string('not: 1.4.1; 1.4'))=''    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count(sets:distinct(.//premis:objectIdentifierValue | .//premis:eventIdentifierValue | .//premis:agentIdentifierValue | .//premis:rightsStatementIdentifierValue)) = count(.//premis:objectIdentifierValue | .//premis:eventIdentifierValue | .//premis:agentIdentifierValue | .//premis:rightsStatementIdentifierValue)) or not(str:concat(exsl:node-set(''))='' or count(exsl:node-set('')) = count(sets:distinct(exsl:node-set($given_profile[1]) | exsl:node-set('')))) or not(normalize-space(string('not: 1.4.1; 1.4'))='' or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string('not: 1.4.1; 1.4'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('not: 1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="normalize-space(sets:difference(.//premis:objectIdentifierValue | .//premis:eventIdentifierValue | .//premis:agentIdentifierValue | .//premis:rightsStatementIdentifierValue, sets:distinct(.//premis:objectIdentifierValue | .//premis:eventIdentifierValue | .//premis:agentIdentifierValue | .//premis:rightsStatementIdentifierValue)))"/><axsl:text/>' in the elements '<axsl:text/><axsl:value-of select="string('premis:objectIdentifierValue; premis:eventIdentifierValue; premis:agentIdentifierValue; premis:rightsStatementIdentifierValue')"/><axsl:text/>' is required to be unique.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M61"/></axsl:template><axsl:template match="text()" priority="-1" mode="M61"/><axsl:template match="@*|node()" priority="-2" mode="M61"><axsl:apply-templates select="@*|*" mode="M61"/></axsl:template><axsl:param name="objectid" select="/mets:mets/mets:amdSec/mets:*/mets:mdWrap/mets:xmlData/premis:object//premis:objectIdentifierValue"/><axsl:param name="eventid" select="/mets:mets/mets:amdSec/mets:*/mets:mdWrap/mets:xmlData/premis:event//premis:eventIdentifierValue"/><axsl:param name="agentid" select="/mets:mets/mets:amdSec/mets:*/mets:mdWrap/mets:xmlData/premis:agent//premis:agentIdentifierValue"/><axsl:param name="rightsid" select="/mets:mets/mets:amdSec/mets:*/mets:mdWrap/mets:xmlData/premis:rights//premis:rightsStatementIdentifierValue"/>

<!--PATTERN link_premis_element-->


	<!--RULE -->
<axsl:template match="premis:linkingObjectIdentifierValue" priority="1003" mode="M66"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:linkingObjectIdentifierValue"/><axsl:variable name="id_value" select="normalize-space(.)"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count($objectid[normalize-space(.) = $id_value]) = 1)    or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count($objectid[normalize-space(.) = $id_value]) = 1) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' is a link to nowhere. The corresponding target element 'objectIdentifierValue' with the same value was not found.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M66"/></axsl:template>

	<!--RULE -->
<axsl:template match="premis:linkingEventIdentifierValue" priority="1002" mode="M66"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:linkingEventIdentifierValue"/><axsl:variable name="id_value" select="normalize-space(.)"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count($eventid[normalize-space(.) = $id_value]) = 1)    or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count($eventid[normalize-space(.) = $id_value]) = 1) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' is a link to nowhere. The corresponding target element 'eventIdentifierValue' with the same value was not found.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M66"/></axsl:template>

	<!--RULE -->
<axsl:template match="premis:linkingAgentIdentifierValue" priority="1001" mode="M66"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:linkingAgentIdentifierValue"/><axsl:variable name="id_value" select="normalize-space(.)"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count($agentid[normalize-space(.) = $id_value]) = 1)    or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count($agentid[normalize-space(.) = $id_value]) = 1) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' is a link to nowhere. The corresponding target element 'agentIdentifierValue' with the same value was not found.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M66"/></axsl:template>

	<!--RULE -->
<axsl:template match="premis:linkingRightsStatementIdentifierValue" priority="1000" mode="M66"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="premis:linkingRightsStatementIdentifierValue"/><axsl:variable name="id_value" select="normalize-space(.)"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(count($rightsid[normalize-space(.) = $id_value]) = 1)    or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(count($rightsid[normalize-space(.) = $id_value]) = 1) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="."/><axsl:text/>' in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>' is a link to nowhere. The corresponding target element 'rightsStatementIdentifierValue' with the same value was not found.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M66"/></axsl:template><axsl:template match="text()" priority="-1" mode="M66"/><axsl:template match="@*|node()" priority="-2" mode="M66"><axsl:apply-templates select="@*|*" mode="M66"/></axsl:template><axsl:param name="techmd" select="exsl:node-set(/mets:mets/mets:amdSec/mets:techMD)"/><axsl:param name="digiprovmd_migration" select="exsl:node-set(/mets:mets/mets:amdSec/mets:digiprovMD[normalize-space(.//premis:event/premis:eventType)='migration' and normalize-space(.//premis:event//premis:eventOutcome)='success'])"/>

<!--PATTERN required_features_native-->


	<!--RULE -->
<axsl:template match="mets:file[(normalize-space(@USE)='no-file-format-validation')]" priority="1000" mode="M69"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:file[(normalize-space(@USE)='no-file-format-validation')]"/><axsl:variable name="admid" select="normalize-space(@ADMID)"/><axsl:variable name="source_techmd_id" select="normalize-space($techmd/@ID[contains(concat(' ', $admid, ' '), concat(' ', normalize-space(.), ' ')) and ..//premis:object//premis:formatName])"/><axsl:variable name="source_object_id" select="normalize-space($techmd[normalize-space(@ID) = $source_techmd_id]//premis:objectIdentifierValue)"/><axsl:variable name="event_source_link" select="exsl:node-set($digiprovmd_migration//premis:linkingObjectIdentifier[normalize-space(./premis:linkingObjectRole)='source' and normalize-space(./premis:linkingObjectIdentifierValue)=$source_object_id]/..)"/><axsl:variable name="event_not_outcome_link" select="exsl:node-set($digiprovmd_migration//premis:linkingObjectIdentifier[normalize-space(./premis:linkingObjectRole)='outcome' and not(normalize-space(./premis:linkingObjectIdentifierValue)=$source_object_id)]/..)"/><axsl:variable name="event_links_source_ok" select="sets:intersection($event_source_link, $event_not_outcome_link)"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="count($digiprovmd_migration) &gt; 0    or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="count($digiprovmd_migration) &gt; 0 or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@USE"/><axsl:text/>' in attribute '<axsl:text/><axsl:value-of select="name(@USE)"/><axsl:text/>' found for file '<axsl:text/><axsl:value-of select="./mets:FLocat/@xlink:href"/><axsl:text/>'. Succeeded PREMIS event for migration is required.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="count($digiprovmd_migration) = 0 or count($event_links_source_ok) &gt; 0    or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="count($digiprovmd_migration) = 0 or count($event_links_source_ok) &gt; 0 or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Value '<axsl:text/><axsl:value-of select="@USE"/><axsl:text/>' in attribute '<axsl:text/><axsl:value-of select="name(@USE)"/><axsl:text/>' found for file '<axsl:text/><axsl:value-of select="./mets:FLocat/@xlink:href"/><axsl:text/>'. PREMIS event for migration contains ambiguous links to object identifiers.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--REPORT -->
<axsl:if test="count($digiprovmd_migration) &gt; 0 and count($event_links_source_ok) &gt; 0    and not(contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' '))) and not(contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' ')))"><svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="count($digiprovmd_migration) &gt; 0 and count($event_links_source_ok) &gt; 0 and not(contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' '))) and not(contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' ')))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>
				INFO: Value '<axsl:text/><axsl:value-of select="@USE"/><axsl:text/>' in attribute '<axsl:text/><axsl:value-of select="name(@USE)"/><axsl:text/>' found for file '<axsl:text/><axsl:value-of select="./mets:FLocat/@xlink:href"/><axsl:text/>'. No file format validation is executed for this file.
			</svrl:text></svrl:successful-report></axsl:if><axsl:apply-templates select="@*|*" mode="M69"/></axsl:template><axsl:template match="text()" priority="-1" mode="M69"/><axsl:template match="@*|node()" priority="-2" mode="M69"><axsl:apply-templates select="@*|*" mode="M69"/></axsl:template>

<!--PATTERN container_with streams-->


	<!--RULE -->
<axsl:template match="mets:techMD[.//premis:formatName and ancestor-or-self::mets:mets/mets:fileSec]" priority="1000" mode="M70"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD[.//premis:formatName and ancestor-or-self::mets:mets/mets:fileSec]"/><axsl:variable name="tech_id" select="normalize-space(@ID)"/><axsl:variable name="premis_format" select="normalize-space(.//premis:formatName)"/><axsl:variable name="container_file" select="ancestor-or-self::mets:mets/mets:fileSec/mets:fileGrp/mets:file[contains(concat(' ', @ADMID, ' '), concat(' ', $tech_id, ' '))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="$container_file/mets:stream or not(contains(concat(' ', $container_formats, ' '), concat(' ', $premis_format, ' '))) or $premis_format='video/mp4'"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="$container_file/mets:stream or not(contains(concat(' ', $container_formats, ' '), concat(' ', $premis_format, ' '))) or $premis_format='video/mp4'"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Streams missing for container file '<axsl:text/><axsl:value-of select="$container_file/mets:FLocat/@xlink:href"/><axsl:text/>'.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M70"/></axsl:template><axsl:template match="text()" priority="-1" mode="M70"/><axsl:template match="@*|node()" priority="-2" mode="M70"><axsl:apply-templates select="@*|*" mode="M70"/></axsl:template>

<!--PATTERN linking_match_for_streams-->


	<!--RULE -->
<axsl:template match="mets:stream" priority="1000" mode="M71"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:stream"/><axsl:variable name="stream_admid" select="normalize-space(@ADMID)"/><axsl:variable name="container_admid" select="normalize-space(../@ADMID)"/><axsl:variable name="container_techmd" select="$techmd[contains(concat(' ', $container_admid, ' '), concat(' ', normalize-space(@ID), ' ')) and normalize-space(.//premis:object/@xsi:type)='premis:file' and .//premis:object//premis:relatedObjectIdentifierValue]"/><axsl:variable name="stream_techmd" select="$techmd[contains(concat(' ', $stream_admid, ' '), concat(' ', normalize-space(@ID), ' ')) and normalize-space(.//premis:object/@xsi:type)='premis:bitstream']"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="$container_techmd//premis:relatedObjectIdentifierValue = $stream_techmd//premis:objectIdentifierValue"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="$container_techmd//premis:relatedObjectIdentifierValue = $stream_techmd//premis:objectIdentifierValue"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Container or stream mismatch between METS fileSec and PREMIS linkings for file '<axsl:text/><axsl:value-of select="../mets:FLocat/@xlink:href"/><axsl:text/>'.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M71"/></axsl:template><axsl:template match="text()" priority="-1" mode="M71"/><axsl:template match="@*|node()" priority="-2" mode="M71"><axsl:apply-templates select="@*|*" mode="M71"/></axsl:template></axsl:stylesheet>
