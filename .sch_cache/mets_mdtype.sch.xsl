<axsl:stylesheet xmlns:axsl="http://www.w3.org/1999/XSL/Transform" xmlns:sch="http://www.ascc.net/xml/schematron" xmlns:iso="http://purl.oclc.org/dsdl/schematron" xmlns:mets="http://www.loc.gov/METS/" xmlns:fi="http://www.kdk.fi/standards/mets/kdk-extensions" xmlns:premis="info:lc/xmlns/premis-v2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mix="http://www.loc.gov/mix/v20" xmlns:textmd="info:lc/xmlns/textMD-v3" xmlns:textmd_kdk="http://www.kdk.fi/standards/textmd" xmlns:addml="http://www.arkivverket.no/standarder/addml" xmlns:audiomd="http://www.loc.gov/audioMD/" xmlns:videomd="http://www.loc.gov/videoMD/" xmlns:metsrights="http://cosimo.stanford.edu/sdr/metsrights/" xmlns:marc21="http://www.loc.gov/MARC21/slim" xmlns:mods="http://www.loc.gov/mods/v3" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:dcterms="http://purl.org/dc/terms/" xmlns:dcmitype="http://purl.org/dc/dcmitype/" xmlns:ead="urn:isbn:1-931666-22-9" xmlns:ead3="http://ead3.archivists.org/schema/" xmlns:eac="urn:isbn:1-931666-33-4" xmlns:vra="http://www.vraweb.org/vracore4.htm" xmlns:lido="http://www.lido-schema.org" xmlns:ddilc32="ddi:instance:3_2" xmlns:ddilc31="ddi:instance:3_1" xmlns:ddicb25="ddi:codebook:2_5" xmlns:ddicb21="http://www.icpsr.umich.edu/DDI" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:exsl="http://exslt.org/common" xmlns:sets="http://exslt.org/sets" xmlns:str="http://exslt.org/strings" version="1.0"><!--Implementers: please note that overriding process-prolog or process-root is 
    the preferred method for meta-stylesheets to use where possible. -->
<axsl:param name="archiveDirParameter"/><axsl:param name="archiveNameParameter"/><axsl:param name="fileNameParameter"/><axsl:param name="fileDirParameter"/>

<!--PHASES-->


<!--PROLOG-->
<axsl:output xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:saxon="http://icl.com/saxon" method="xml" omit-xml-declaration="yes" standalone="yes" indent="yes"/>

<!--KEYS-->


<!--DEFAULT RULES-->


<!--MODE: SCHEMATRON-SELECT-FULL-PATH-->
<!--This mode can be used to generate an ugly though full XPath for locators-->
<axsl:template match="*" mode="schematron-select-full-path"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:template>

<!--MODE: SCHEMATRON-FULL-PATH-->
<!--This mode can be used to generate an ugly though full XPath for locators-->
<axsl:template match="*" mode="schematron-get-full-path"><axsl:apply-templates select="parent::*" mode="schematron-get-full-path"/><axsl:text>/</axsl:text><axsl:choose><axsl:when test="namespace-uri()=''"><axsl:value-of select="name()"/><axsl:variable name="p_1" select="1+    count(preceding-sibling::*[name()=name(current())])"/><axsl:if test="$p_1&gt;1 or following-sibling::*[name()=name(current())]">[<axsl:value-of select="$p_1"/>]</axsl:if></axsl:when><axsl:otherwise><axsl:text>*[local-name()='</axsl:text><axsl:value-of select="local-name()"/><axsl:text>' and namespace-uri()='</axsl:text><axsl:value-of select="namespace-uri()"/><axsl:text>']</axsl:text><axsl:variable name="p_2" select="1+   count(preceding-sibling::*[local-name()=local-name(current())])"/><axsl:if test="$p_2&gt;1 or following-sibling::*[local-name()=local-name(current())]">[<axsl:value-of select="$p_2"/>]</axsl:if></axsl:otherwise></axsl:choose></axsl:template><axsl:template match="@*" mode="schematron-get-full-path"><axsl:text>/</axsl:text><axsl:choose><axsl:when test="namespace-uri()=''">@<axsl:value-of select="name()"/></axsl:when><axsl:otherwise><axsl:text>@*[local-name()='</axsl:text><axsl:value-of select="local-name()"/><axsl:text>' and namespace-uri()='</axsl:text><axsl:value-of select="namespace-uri()"/><axsl:text>']</axsl:text></axsl:otherwise></axsl:choose></axsl:template>

<!--MODE: SCHEMATRON-FULL-PATH-2-->
<!--This mode can be used to generate prefixed XPath for humans-->
<axsl:template match="node() | @*" mode="schematron-get-full-path-2"><axsl:for-each select="ancestor-or-self::*"><axsl:text>/</axsl:text><axsl:value-of select="name(.)"/><axsl:if test="preceding-sibling::*[name(.)=name(current())]"><axsl:text>[</axsl:text><axsl:value-of select="count(preceding-sibling::*[name(.)=name(current())])+1"/><axsl:text>]</axsl:text></axsl:if></axsl:for-each><axsl:if test="not(self::*)"><axsl:text/>/@<axsl:value-of select="name(.)"/></axsl:if></axsl:template>

<!--MODE: GENERATE-ID-FROM-PATH -->
<axsl:template match="/" mode="generate-id-from-path"/><axsl:template match="text()" mode="generate-id-from-path"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:value-of select="concat('.text-', 1+count(preceding-sibling::text()), '-')"/></axsl:template><axsl:template match="comment()" mode="generate-id-from-path"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:value-of select="concat('.comment-', 1+count(preceding-sibling::comment()), '-')"/></axsl:template><axsl:template match="processing-instruction()" mode="generate-id-from-path"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:value-of select="concat('.processing-instruction-', 1+count(preceding-sibling::processing-instruction()), '-')"/></axsl:template><axsl:template match="@*" mode="generate-id-from-path"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:value-of select="concat('.@', name())"/></axsl:template><axsl:template match="*" mode="generate-id-from-path" priority="-0.5"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:text>.</axsl:text><axsl:value-of select="concat('.',name(),'-',1+count(preceding-sibling::*[name()=name(current())]),'-')"/></axsl:template><!--MODE: SCHEMATRON-FULL-PATH-3-->
<!--This mode can be used to generate prefixed XPath for humans 
	(Top-level element has index)-->
<axsl:template match="node() | @*" mode="schematron-get-full-path-3"><axsl:for-each select="ancestor-or-self::*"><axsl:text>/</axsl:text><axsl:value-of select="name(.)"/><axsl:if test="parent::*"><axsl:text>[</axsl:text><axsl:value-of select="count(preceding-sibling::*[name(.)=name(current())])+1"/><axsl:text>]</axsl:text></axsl:if></axsl:for-each><axsl:if test="not(self::*)"><axsl:text/>/@<axsl:value-of select="name(.)"/></axsl:if></axsl:template>

<!--MODE: GENERATE-ID-2 -->
<axsl:template match="/" mode="generate-id-2">U</axsl:template><axsl:template match="*" mode="generate-id-2" priority="2"><axsl:text>U</axsl:text><axsl:number level="multiple" count="*"/></axsl:template><axsl:template match="node()" mode="generate-id-2"><axsl:text>U.</axsl:text><axsl:number level="multiple" count="*"/><axsl:text>n</axsl:text><axsl:number count="node()"/></axsl:template><axsl:template match="@*" mode="generate-id-2"><axsl:text>U.</axsl:text><axsl:number level="multiple" count="*"/><axsl:text>_</axsl:text><axsl:value-of select="string-length(local-name(.))"/><axsl:text>_</axsl:text><axsl:value-of select="translate(name(),':','.')"/></axsl:template><!--Strip characters--><axsl:template match="text()" priority="-1"/>

<!--SCHEMA METADATA-->
<axsl:template match="/"><svrl:schematron-output xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" title="METS external metadata type validation" schemaVersion="1.6.0"><axsl:comment><axsl:value-of select="$archiveDirParameter"/>   
		 <axsl:value-of select="$archiveNameParameter"/>  
		 <axsl:value-of select="$fileNameParameter"/>  
		 <axsl:value-of select="$fileDirParameter"/></axsl:comment><svrl:ns-prefix-in-attribute-values uri="http://www.loc.gov/METS/" prefix="mets"/><svrl:ns-prefix-in-attribute-values uri="http://www.kdk.fi/standards/mets/kdk-extensions" prefix="fi"/><svrl:ns-prefix-in-attribute-values uri="info:lc/xmlns/premis-v2" prefix="premis"/><svrl:ns-prefix-in-attribute-values uri="http://www.w3.org/2001/XMLSchema-instance" prefix="xsi"/><svrl:ns-prefix-in-attribute-values uri="http://www.loc.gov/mix/v20" prefix="mix"/><svrl:ns-prefix-in-attribute-values uri="info:lc/xmlns/textMD-v3" prefix="textmd"/><svrl:ns-prefix-in-attribute-values uri="http://www.kdk.fi/standards/textmd" prefix="textmd_kdk"/><svrl:ns-prefix-in-attribute-values uri="http://www.arkivverket.no/standarder/addml" prefix="addml"/><svrl:ns-prefix-in-attribute-values uri="http://www.loc.gov/audioMD/" prefix="audiomd"/><svrl:ns-prefix-in-attribute-values uri="http://www.loc.gov/videoMD/" prefix="videomd"/><svrl:ns-prefix-in-attribute-values uri="http://cosimo.stanford.edu/sdr/metsrights/" prefix="metsrights"/><svrl:ns-prefix-in-attribute-values uri="http://www.loc.gov/MARC21/slim" prefix="marc21"/><svrl:ns-prefix-in-attribute-values uri="http://www.loc.gov/mods/v3" prefix="mods"/><svrl:ns-prefix-in-attribute-values uri="http://purl.org/dc/elements/1.1/" prefix="dc"/><svrl:ns-prefix-in-attribute-values uri="http://purl.org/dc/terms/" prefix="dcterms"/><svrl:ns-prefix-in-attribute-values uri="http://purl.org/dc/dcmitype/" prefix="dcmitype"/><svrl:ns-prefix-in-attribute-values uri="urn:isbn:1-931666-22-9" prefix="ead"/><svrl:ns-prefix-in-attribute-values uri="http://ead3.archivists.org/schema/" prefix="ead3"/><svrl:ns-prefix-in-attribute-values uri="urn:isbn:1-931666-33-4" prefix="eac"/><svrl:ns-prefix-in-attribute-values uri="http://www.vraweb.org/vracore4.htm" prefix="vra"/><svrl:ns-prefix-in-attribute-values uri="http://www.lido-schema.org" prefix="lido"/><svrl:ns-prefix-in-attribute-values uri="ddi:instance:3_2" prefix="ddilc32"/><svrl:ns-prefix-in-attribute-values uri="ddi:instance:3_1" prefix="ddilc31"/><svrl:ns-prefix-in-attribute-values uri="ddi:codebook:2_5" prefix="ddicb25"/><svrl:ns-prefix-in-attribute-values uri="http://www.icpsr.umich.edu/DDI" prefix="ddicb21"/><svrl:ns-prefix-in-attribute-values uri="http://www.w3.org/1999/xlink" prefix="xlink"/><svrl:ns-prefix-in-attribute-values uri="http://exslt.org/common" prefix="exsl"/><svrl:ns-prefix-in-attribute-values uri="http://exslt.org/sets" prefix="sets"/><svrl:ns-prefix-in-attribute-values uri="http://exslt.org/strings" prefix="str"/><svrl:active-pattern><axsl:attribute name="id">mets_mdtype_content</axsl:attribute><axsl:attribute name="name">mets_mdtype_content</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M35"/><svrl:active-pattern><axsl:attribute name="id">mets15_mdtype_content</axsl:attribute><axsl:attribute name="name">mets15_mdtype_content</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M36"/><svrl:active-pattern><axsl:attribute name="id">mets14_mdtype_content</axsl:attribute><axsl:attribute name="name">mets14_mdtype_content</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M37"/><svrl:active-pattern><axsl:attribute name="id">mets_othermdtype_content</axsl:attribute><axsl:attribute name="name">mets_othermdtype_content</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M38"/><svrl:active-pattern><axsl:attribute name="id">mets_EN15744</axsl:attribute><axsl:attribute name="name">mets_EN15744</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M39"/><svrl:active-pattern><axsl:attribute name="id">mets_allowedmd_unsupported</axsl:attribute><axsl:attribute name="name">mets_allowedmd_unsupported</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M40"/><svrl:active-pattern><axsl:attribute name="id">mets_deprecated_rightsStatement</axsl:attribute><axsl:attribute name="name">mets_deprecated_rightsStatement</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M41"/><svrl:active-pattern><axsl:attribute name="id">mets_object_exists</axsl:attribute><axsl:attribute name="name">mets_object_exists</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M42"/><svrl:active-pattern><axsl:attribute name="id">mets_event_exists</axsl:attribute><axsl:attribute name="name">mets_event_exists</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M43"/><svrl:active-pattern><axsl:attribute name="id">mets_descriptive_exists</axsl:attribute><axsl:attribute name="name">mets_descriptive_exists</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M44"/><svrl:active-pattern><axsl:attribute name="id">dmdsec_no_rights</axsl:attribute><axsl:attribute name="name">dmdsec_no_rights</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M45"/><svrl:active-pattern><axsl:attribute name="id">techmd_no_rights</axsl:attribute><axsl:attribute name="name">techmd_no_rights</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M46"/><svrl:active-pattern><axsl:attribute name="id">digiprovmd_no_rights</axsl:attribute><axsl:attribute name="name">digiprovmd_no_rights</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M47"/><svrl:active-pattern><axsl:attribute name="id">dmdsec_no_tech</axsl:attribute><axsl:attribute name="name">dmdsec_no_tech</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M48"/><svrl:active-pattern><axsl:attribute name="id">rights_no_tech</axsl:attribute><axsl:attribute name="name">rights_no_tech</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M49"/><svrl:active-pattern><axsl:attribute name="id">digiprovmd_no_tech</axsl:attribute><axsl:attribute name="name">digiprovmd_no_tech</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M50"/><svrl:active-pattern><axsl:attribute name="id">dmdsec_no_digiprov</axsl:attribute><axsl:attribute name="name">dmdsec_no_digiprov</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M51"/><svrl:active-pattern><axsl:attribute name="id">techmd_no_digiprov</axsl:attribute><axsl:attribute name="name">techmd_no_digiprov</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M52"/><svrl:active-pattern><axsl:attribute name="id">rights_no_digiprov</axsl:attribute><axsl:attribute name="name">rights_no_digiprov</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M53"/><svrl:active-pattern><axsl:attribute name="id">techmd_no_descriptive</axsl:attribute><axsl:attribute name="name">techmd_no_descriptive</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M54"/><svrl:active-pattern><axsl:attribute name="id">rights_no_descriptive</axsl:attribute><axsl:attribute name="name">rights_no_descriptive</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M55"/><svrl:active-pattern><axsl:attribute name="id">digiprovmd_no_descriptive</axsl:attribute><axsl:attribute name="name">digiprovmd_no_descriptive</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M56"/><svrl:active-pattern><axsl:attribute name="id">premis_file_requirement</axsl:attribute><axsl:attribute name="name">premis_file_requirement</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M59"/><svrl:active-pattern><axsl:attribute name="id">premis_file_requirement</axsl:attribute><axsl:attribute name="name">premis_file_requirement</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M62"/><svrl:active-pattern><axsl:attribute name="id">audiomd_requirement_stream</axsl:attribute><axsl:attribute name="name">audiomd_requirement_stream</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M67"/><svrl:active-pattern><axsl:attribute name="id">videomd_requirement_stream</axsl:attribute><axsl:attribute name="name">videomd_requirement_stream</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M72"/><svrl:active-pattern><axsl:attribute name="id">addml_requirement</axsl:attribute><axsl:attribute name="name">addml_requirement</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M77"/><svrl:active-pattern><axsl:attribute name="id">audiomd_requirement</axsl:attribute><axsl:attribute name="name">audiomd_requirement</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M80"/><svrl:active-pattern><axsl:attribute name="id">videomd_requirement</axsl:attribute><axsl:attribute name="name">videomd_requirement</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M83"/><svrl:active-pattern><axsl:attribute name="id">mix_requirement</axsl:attribute><axsl:attribute name="name">mix_requirement</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M88"/><svrl:active-pattern><axsl:attribute name="id">textmd_requirement14</axsl:attribute><axsl:attribute name="name">textmd_requirement14</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M93"/><svrl:active-pattern><axsl:attribute name="id">addml_requirement14</axsl:attribute><axsl:attribute name="name">addml_requirement14</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M96"/><svrl:active-pattern><axsl:attribute name="id">audiomd_requirement14</axsl:attribute><axsl:attribute name="name">audiomd_requirement14</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M99"/><svrl:active-pattern><axsl:attribute name="id">videomd_requirement14</axsl:attribute><axsl:attribute name="name">videomd_requirement14</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M102"/><svrl:active-pattern><axsl:attribute name="id">mix_requirement14</axsl:attribute><axsl:attribute name="name">mix_requirement14</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M105"/></svrl:schematron-output></axsl:template>

<!--SCHEMATRON PATTERNS-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon">METS external metadata type validation</svrl:text><axsl:param name="addml_types" select="string('text/csv')"/><axsl:param name="textmd_types" select="string('application/xhtml+xml text/html text/xml text/plain')"/><axsl:param name="audiomd_types" select="string('audio/x-aiff audio/x-wave audio/flac audio/mp4 audio/x-wav audio/mpeg audio/x-ms-wma')"/><axsl:param name="videomd_types" select="string('video/jpeg2000 video/mp4 video/dv video/mpeg video/x-ms-wmv')"/><axsl:param name="mix_types" select="string('image/tiff image/jpeg image/jp2 image/png image/gif image/dpx')"/>

<!--PATTERN mets_mdtype_content-->


	<!--RULE -->
<axsl:template match="mets:mdWrap[(not(@OTHERMDTYPE))]" priority="1000" mode="M35"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mdWrap[(not(@OTHERMDTYPE))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="((number(normalize-space(@MDTYPE)='PREMIS:OBJECT')*count(mets:xmlData/premis:object)*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='PREMIS:RIGHTS')*count(mets:xmlData/premis:rights)*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='PREMIS:EVENT')*count(mets:xmlData/premis:event)*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='PREMIS:AGENT')*count(mets:xmlData/premis:agent)*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='NISOIMG')*number(boolean(mets:xmlData/mix:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='MARC')*number(boolean(mets:xmlData/marc21:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='DC')*number(boolean(mets:xmlData/dc:* or mets:xmlData/dcterms:* or mets:xmlData/dcmitype:*))      + number(normalize-space(@MDTYPE)='MODS')*number(boolean(mets:xmlData/mods:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='EAD')*number(boolean(mets:xmlData/ead:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='EAC-CPF')*number(boolean(mets:xmlData/eac:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='LIDO')*number(boolean(mets:xmlData/lido:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='VRA')*number(boolean(mets:xmlData/vra:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='DDI' and normalize-space(@MDTYPEVERSION)='3.2')*number(boolean(mets:xmlData/ddilc32:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='DDI' and normalize-space(@MDTYPEVERSION)='3.1')*number(boolean(mets:xmlData/ddilc31:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='DDI' and normalize-space(@MDTYPEVERSION)='2.5')*number(boolean(mets:xmlData/ddicb25:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='DDI' and normalize-space(@MDTYPEVERSION)='2.5.1')*number(boolean(mets:xmlData/ddicb25:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='DDI' and normalize-space(@MDTYPEVERSION)='2.1')*number(boolean(mets:xmlData/ddicb21:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='TEXTMD')*number(boolean(mets:xmlData/textmd:*))*count(mets:xmlData/*)) = 1) or not(normalize-space(string('not: 1.4; 1.4.1; 1.5.0'))=''    or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="((number(normalize-space(@MDTYPE)='PREMIS:OBJECT')*count(mets:xmlData/premis:object)*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='PREMIS:RIGHTS')*count(mets:xmlData/premis:rights)*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='PREMIS:EVENT')*count(mets:xmlData/premis:event)*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='PREMIS:AGENT')*count(mets:xmlData/premis:agent)*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='NISOIMG')*number(boolean(mets:xmlData/mix:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='MARC')*number(boolean(mets:xmlData/marc21:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='DC')*number(boolean(mets:xmlData/dc:* or mets:xmlData/dcterms:* or mets:xmlData/dcmitype:*)) + number(normalize-space(@MDTYPE)='MODS')*number(boolean(mets:xmlData/mods:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='EAD')*number(boolean(mets:xmlData/ead:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='EAC-CPF')*number(boolean(mets:xmlData/eac:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='LIDO')*number(boolean(mets:xmlData/lido:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='VRA')*number(boolean(mets:xmlData/vra:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='DDI' and normalize-space(@MDTYPEVERSION)='3.2')*number(boolean(mets:xmlData/ddilc32:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='DDI' and normalize-space(@MDTYPEVERSION)='3.1')*number(boolean(mets:xmlData/ddilc31:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='DDI' and normalize-space(@MDTYPEVERSION)='2.5')*number(boolean(mets:xmlData/ddicb25:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='DDI' and normalize-space(@MDTYPEVERSION)='2.5.1')*number(boolean(mets:xmlData/ddicb25:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='DDI' and normalize-space(@MDTYPEVERSION)='2.1')*number(boolean(mets:xmlData/ddicb21:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='TEXTMD')*number(boolean(mets:xmlData/textmd:*))*count(mets:xmlData/*)) = 1) or not(normalize-space(string('not: 1.4; 1.4.1; 1.5.0'))='' or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('not: 1.4; 1.4.1; 1.5.0'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string('not: 1.4; 1.4.1; 1.5.0'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('not: 1.4; 1.4.1; 1.5.0')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Mismatch between given metadata type '<axsl:text/><axsl:value-of select="@MDTYPE"/><axsl:text/>' and actual contained metadata. (ID of the metadata section '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M35"/></axsl:template><axsl:template match="text()" priority="-1" mode="M35"/><axsl:template match="@*|node()" priority="-2" mode="M35"><axsl:apply-templates select="@*|*" mode="M35"/></axsl:template>

<!--PATTERN mets15_mdtype_content-->


	<!--RULE -->
<axsl:template match="mets:mdWrap[(not(@OTHERMDTYPE))]" priority="1000" mode="M36"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mdWrap[(not(@OTHERMDTYPE))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="((number(normalize-space(@MDTYPE)='PREMIS:OBJECT')*count(mets:xmlData/premis:object)*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='PREMIS:RIGHTS')*count(mets:xmlData/premis:rights)*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='PREMIS:RIGHTS')*count(mets:xmlData/premis:rightsStatement)*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='PREMIS:EVENT')*count(mets:xmlData/premis:event)*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='PREMIS:AGENT')*count(mets:xmlData/premis:agent)*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='NISOIMG')*number(boolean(mets:xmlData/mix:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='MARC')*number(boolean(mets:xmlData/marc21:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='DC')*number(boolean(mets:xmlData/dc:* or mets:xmlData/dcterms:* or mets:xmlData/dcmitype:*))      + number(normalize-space(@MDTYPE)='MODS')*number(boolean(mets:xmlData/mods:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='EAD')*number(boolean(mets:xmlData/ead:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='EAC-CPF')*number(boolean(mets:xmlData/eac:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='LIDO')*number(boolean(mets:xmlData/lido:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='VRA')*number(boolean(mets:xmlData/vra:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='DDI' and normalize-space(@MDTYPEVERSION)='3.2')*number(boolean(mets:xmlData/ddilc32:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='DDI' and normalize-space(@MDTYPEVERSION)='3.1')*number(boolean(mets:xmlData/ddilc31:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='DDI' and normalize-space(@MDTYPEVERSION)='2.5')*number(boolean(mets:xmlData/ddicb25:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='DDI' and normalize-space(@MDTYPEVERSION)='2.5.1')*number(boolean(mets:xmlData/ddicb25:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='DDI' and normalize-space(@MDTYPEVERSION)='2.1')*number(boolean(mets:xmlData/ddicb21:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='TEXTMD')*number(boolean(mets:xmlData/textmd:*))*count(mets:xmlData/*)) = 1) or not(normalize-space(string('1.5.0'))=''    or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="((number(normalize-space(@MDTYPE)='PREMIS:OBJECT')*count(mets:xmlData/premis:object)*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='PREMIS:RIGHTS')*count(mets:xmlData/premis:rights)*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='PREMIS:RIGHTS')*count(mets:xmlData/premis:rightsStatement)*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='PREMIS:EVENT')*count(mets:xmlData/premis:event)*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='PREMIS:AGENT')*count(mets:xmlData/premis:agent)*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='NISOIMG')*number(boolean(mets:xmlData/mix:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='MARC')*number(boolean(mets:xmlData/marc21:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='DC')*number(boolean(mets:xmlData/dc:* or mets:xmlData/dcterms:* or mets:xmlData/dcmitype:*)) + number(normalize-space(@MDTYPE)='MODS')*number(boolean(mets:xmlData/mods:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='EAD')*number(boolean(mets:xmlData/ead:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='EAC-CPF')*number(boolean(mets:xmlData/eac:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='LIDO')*number(boolean(mets:xmlData/lido:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='VRA')*number(boolean(mets:xmlData/vra:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='DDI' and normalize-space(@MDTYPEVERSION)='3.2')*number(boolean(mets:xmlData/ddilc32:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='DDI' and normalize-space(@MDTYPEVERSION)='3.1')*number(boolean(mets:xmlData/ddilc31:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='DDI' and normalize-space(@MDTYPEVERSION)='2.5')*number(boolean(mets:xmlData/ddicb25:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='DDI' and normalize-space(@MDTYPEVERSION)='2.5.1')*number(boolean(mets:xmlData/ddicb25:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='DDI' and normalize-space(@MDTYPEVERSION)='2.1')*number(boolean(mets:xmlData/ddicb21:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='TEXTMD')*number(boolean(mets:xmlData/textmd:*))*count(mets:xmlData/*)) = 1) or not(normalize-space(string('1.5.0'))='' or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Mismatch between given metadata type '<axsl:text/><axsl:value-of select="@MDTYPE"/><axsl:text/>' and actual contained metadata. (ID of the metadata section '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M36"/></axsl:template><axsl:template match="text()" priority="-1" mode="M36"/><axsl:template match="@*|node()" priority="-2" mode="M36"><axsl:apply-templates select="@*|*" mode="M36"/></axsl:template>

<!--PATTERN mets14_mdtype_content-->


	<!--RULE -->
<axsl:template match="mets:mdWrap[(not(@OTHERMDTYPE))]" priority="1000" mode="M37"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mdWrap[(not(@OTHERMDTYPE))]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="((number(normalize-space(@MDTYPE)='PREMIS:OBJECT')*count(mets:xmlData/premis:object)*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='PREMIS:RIGHTS')*count(mets:xmlData/premis:rights)*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='PREMIS:EVENT')*count(mets:xmlData/premis:event)*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='PREMIS:AGENT')*count(mets:xmlData/premis:agent)*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='METSRIGHTS')*number(boolean(mets:xmlData/metsrights:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='NISOIMG')*number(boolean(mets:xmlData/mix:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='MARC')*number(boolean(mets:xmlData/marc21:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='DC')*number(boolean(mets:xmlData/dc:* or mets:xmlData/dcterms:* or mets:xmlData/dcmitype:*))      + number(normalize-space(@MDTYPE)='MODS')*number(boolean(mets:xmlData/mods:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='EAD')*number(boolean(mets:xmlData/ead:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='EAC-CPF')*number(boolean(mets:xmlData/eac:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='LIDO')*number(boolean(mets:xmlData/lido:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='VRA')*number(boolean(mets:xmlData/vra:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='DDI')*number(boolean(mets:xmlData/ddilc32:* or mets:xmlData/ddilc31:* or mets:xmlData/ddicb25:* or mets:xmlData/ddicb21:*))*count(mets:xmlData/*)      + number(normalize-space(@MDTYPE)='TEXTMD')*number(boolean(mets:xmlData/textmd_kdk:*))*count(mets:xmlData/*)) = 1) or not(normalize-space(string('1.4.1; 1.4'))=''    or ((normalize-space(substring(string('1.4.1; 1.4'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string('1.4.1; 1.4'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="((number(normalize-space(@MDTYPE)='PREMIS:OBJECT')*count(mets:xmlData/premis:object)*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='PREMIS:RIGHTS')*count(mets:xmlData/premis:rights)*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='PREMIS:EVENT')*count(mets:xmlData/premis:event)*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='PREMIS:AGENT')*count(mets:xmlData/premis:agent)*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='METSRIGHTS')*number(boolean(mets:xmlData/metsrights:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='NISOIMG')*number(boolean(mets:xmlData/mix:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='MARC')*number(boolean(mets:xmlData/marc21:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='DC')*number(boolean(mets:xmlData/dc:* or mets:xmlData/dcterms:* or mets:xmlData/dcmitype:*)) + number(normalize-space(@MDTYPE)='MODS')*number(boolean(mets:xmlData/mods:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='EAD')*number(boolean(mets:xmlData/ead:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='EAC-CPF')*number(boolean(mets:xmlData/eac:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='LIDO')*number(boolean(mets:xmlData/lido:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='VRA')*number(boolean(mets:xmlData/vra:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='DDI')*number(boolean(mets:xmlData/ddilc32:* or mets:xmlData/ddilc31:* or mets:xmlData/ddicb25:* or mets:xmlData/ddicb21:*))*count(mets:xmlData/*) + number(normalize-space(@MDTYPE)='TEXTMD')*number(boolean(mets:xmlData/textmd_kdk:*))*count(mets:xmlData/*)) = 1) or not(normalize-space(string('1.4.1; 1.4'))='' or ((normalize-space(substring(string('1.4.1; 1.4'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('1.4.1; 1.4'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string('1.4.1; 1.4'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('1.4.1; 1.4')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Mismatch between given metadata type '<axsl:text/><axsl:value-of select="@MDTYPE"/><axsl:text/>' and actual contained metadata. (ID of the metadata section '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M37"/></axsl:template><axsl:template match="text()" priority="-1" mode="M37"/><axsl:template match="@*|node()" priority="-2" mode="M37"><axsl:apply-templates select="@*|*" mode="M37"/></axsl:template>

<!--PATTERN mets_othermdtype_content-->


	<!--RULE -->
<axsl:template match="mets:mdWrap[(@OTHERMDTYPE)]" priority="1000" mode="M38"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mdWrap[(@OTHERMDTYPE)]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="((number(normalize-space(@OTHERMDTYPE)='ADDML')*number(boolean(mets:xmlData/addml:*))*count(mets:xmlData/*)      + number(normalize-space(@OTHERMDTYPE)='AudioMD')*number(boolean(mets:xmlData/audiomd:*))*count(mets:xmlData/*)      + number(normalize-space(@OTHERMDTYPE)='VideoMD')*number(boolean(mets:xmlData/videomd:*))*count(mets:xmlData/*)      + number(normalize-space(@OTHERMDTYPE)='EAD3')*number(boolean(mets:xmlData/ead3:*))*count(mets:xmlData/*)      + number(normalize-space(@OTHERMDTYPE)!='ADDML' and normalize-space(@OTHERMDTYPE)!='AudioMD' and normalize-space(@OTHERMDTYPE)!='VideoMD' and normalize-space(@OTHERMDTYPE)!='EAD3')*count(mets:xmlData/*)) = 1) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="((number(normalize-space(@OTHERMDTYPE)='ADDML')*number(boolean(mets:xmlData/addml:*))*count(mets:xmlData/*) + number(normalize-space(@OTHERMDTYPE)='AudioMD')*number(boolean(mets:xmlData/audiomd:*))*count(mets:xmlData/*) + number(normalize-space(@OTHERMDTYPE)='VideoMD')*number(boolean(mets:xmlData/videomd:*))*count(mets:xmlData/*) + number(normalize-space(@OTHERMDTYPE)='EAD3')*number(boolean(mets:xmlData/ead3:*))*count(mets:xmlData/*) + number(normalize-space(@OTHERMDTYPE)!='ADDML' and normalize-space(@OTHERMDTYPE)!='AudioMD' and normalize-space(@OTHERMDTYPE)!='VideoMD' and normalize-space(@OTHERMDTYPE)!='EAD3')*count(mets:xmlData/*)) = 1) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Mismatch between given metadata type '<axsl:text/><axsl:value-of select="@OTHERMDTYPE"/><axsl:text/>' and actual contained metadata. (ID of the metadata section '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M38"/></axsl:template><axsl:template match="text()" priority="-1" mode="M38"/><axsl:template match="@*|node()" priority="-2" mode="M38"><axsl:apply-templates select="@*|*" mode="M38"/></axsl:template>

<!--PATTERN mets_EN15744-->


	<!--RULE -->
<axsl:template match="mets:mdWrap[@OTHERMDTYPE and (true())]" priority="1000" mode="M39"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mdWrap[@OTHERMDTYPE and (true())]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@OTHERMDTYPE!=string('EN15744')) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@OTHERMDTYPE!=string('EN15744')) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Metadata type '<axsl:text/><axsl:value-of select="@OTHERMDTYPE"/><axsl:text/>' is currently unsupported. (ID of the metadata section '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="../@ID"/><axsl:text/>')
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M39"/></axsl:template><axsl:template match="text()" priority="-1" mode="M39"/><axsl:template match="@*|node()" priority="-2" mode="M39"><axsl:apply-templates select="@*|*" mode="M39"/></axsl:template>

<!--PATTERN mets_allowedmd_unsupported-->


	<!--RULE -->
<axsl:template match="mets:mdWrap[@OTHERMDTYPE and (true())]" priority="1000" mode="M40"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mdWrap[@OTHERMDTYPE and (true())]"/>

		<!--REPORT -->
<axsl:if test="(@OTHERMDTYPE!='AudioMD' and @OTHERMDTYPE!='VideoMD' and @OTHERMDTYPE!='EN15744' and @OTHERMDTYPE!='EAD3' and @OTHERMDTYPE!='ADDML') and (normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(@OTHERMDTYPE!='AudioMD' and @OTHERMDTYPE!='VideoMD' and @OTHERMDTYPE!='EN15744' and @OTHERMDTYPE!='EAD3' and @OTHERMDTYPE!='ADDML') and (normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>
				INFO: Unsupported but allowed metadata type '<axsl:text/><axsl:value-of select="@OTHERMDTYPE"/><axsl:text/>' found. (ID of the metadata section '<axsl:text/><axsl:value-of select="name(..)"/><axsl:text/>' is '<axsl:text/><axsl:value-of select="../@ID"/><axsl:text/>')
			</svrl:text></svrl:successful-report></axsl:if><axsl:apply-templates select="@*|*" mode="M40"/></axsl:template><axsl:template match="text()" priority="-1" mode="M40"/><axsl:template match="@*|node()" priority="-2" mode="M40"><axsl:apply-templates select="@*|*" mode="M40"/></axsl:template>

<!--PATTERN mets_deprecated_rightsStatement-->


	<!--RULE -->
<axsl:template match="mets:xmlData[(../@MDTYPE='PREMIS:RIGHTS')]" priority="1000" mode="M41"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:xmlData[(../@MDTYPE='PREMIS:RIGHTS')]"/>

		<!--REPORT -->
<axsl:if test="(./premis:rightsStatement) and (normalize-space(string('1.5.0'))=''    or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(./premis:rightsStatement) and (normalize-space(string('1.5.0'))='' or ((normalize-space(substring(string('1.5.0'),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string('1.5.0'),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string('1.5.0'),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('1.5.0')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>
				INFO: Element '<axsl:text/><axsl:value-of select="name(premis:rightsStatement)"/><axsl:text/>' is deprecated in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'.
			</svrl:text></svrl:successful-report></axsl:if><axsl:apply-templates select="@*|*" mode="M41"/></axsl:template><axsl:template match="text()" priority="-1" mode="M41"/><axsl:template match="@*|node()" priority="-2" mode="M41"><axsl:apply-templates select="@*|*" mode="M41"/></axsl:template>

<!--PATTERN mets_object_exists-->


	<!--RULE -->
<axsl:template match="mets:mets[(true())]" priority="1000" mode="M42"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[(true())]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(.//mets:mdWrap[@MDTYPE='PREMIS:OBJECT']) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(.//mets:mdWrap[@MDTYPE='PREMIS:OBJECT']) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				<axsl:text/><axsl:value-of select="string('PREMIS:OBJECT')"/><axsl:text/> metadata is required in METS.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M42"/></axsl:template><axsl:template match="text()" priority="-1" mode="M42"/><axsl:template match="@*|node()" priority="-2" mode="M42"><axsl:apply-templates select="@*|*" mode="M42"/></axsl:template>

<!--PATTERN mets_event_exists-->


	<!--RULE -->
<axsl:template match="mets:mets[(true())]" priority="1000" mode="M43"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[(true())]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(.//mets:mdWrap[@MDTYPE='PREMIS:EVENT']) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(.//mets:mdWrap[@MDTYPE='PREMIS:EVENT']) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				<axsl:text/><axsl:value-of select="string('PREMIS:EVENT')"/><axsl:text/> metadata is required in METS.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M43"/></axsl:template><axsl:template match="text()" priority="-1" mode="M43"/><axsl:template match="@*|node()" priority="-2" mode="M43"><axsl:apply-templates select="@*|*" mode="M43"/></axsl:template>

<!--PATTERN mets_descriptive_exists-->


	<!--RULE -->
<axsl:template match="mets:mets[(true())]" priority="1000" mode="M44"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:mets[(true())]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(.//mets:mdWrap[@MDTYPE='LIDO' or @MDTYPE='EAC-CPF' or @MDTYPE='EAD' or @OTHERMDTYPE='EAD3'   or @MDTYPE='VRA' or @MDTYPE='MODS' or @MDTYPE='MARC' or @MDTYPE='DC' or @MDTYPE='DDI' or @OTHERMDTYPE='EN15744']) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(.//mets:mdWrap[@MDTYPE='LIDO' or @MDTYPE='EAC-CPF' or @MDTYPE='EAD' or @OTHERMDTYPE='EAD3' or @MDTYPE='VRA' or @MDTYPE='MODS' or @MDTYPE='MARC' or @MDTYPE='DC' or @MDTYPE='DDI' or @OTHERMDTYPE='EN15744']) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				<axsl:text/><axsl:value-of select="string('Standard portfolio descriptive')"/><axsl:text/> metadata is required in METS.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M44"/></axsl:template><axsl:template match="text()" priority="-1" mode="M44"/><axsl:template match="@*|node()" priority="-2" mode="M44"><axsl:apply-templates select="@*|*" mode="M44"/></axsl:template>

<!--PATTERN dmdsec_no_rights-->


	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap/mets:xmlData[(true())]" priority="1000" mode="M45"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap/mets:xmlData[(true())]"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./premis:rights)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./premis:rights)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(premis:rights)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M45"/></axsl:template><axsl:template match="text()" priority="-1" mode="M45"/><axsl:template match="@*|node()" priority="-2" mode="M45"><axsl:apply-templates select="@*|*" mode="M45"/></axsl:template>

<!--PATTERN techmd_no_rights-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData[(true())]" priority="1000" mode="M46"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData[(true())]"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./premis:rights)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./premis:rights)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(premis:rights)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M46"/></axsl:template><axsl:template match="text()" priority="-1" mode="M46"/><axsl:template match="@*|node()" priority="-2" mode="M46"><axsl:apply-templates select="@*|*" mode="M46"/></axsl:template>

<!--PATTERN digiprovmd_no_rights-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdWrap/mets:xmlData[(true())]" priority="1000" mode="M47"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdWrap/mets:xmlData[(true())]"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./premis:rights)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./premis:rights)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(premis:rights)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M47"/></axsl:template><axsl:template match="text()" priority="-1" mode="M47"/><axsl:template match="@*|node()" priority="-2" mode="M47"><axsl:apply-templates select="@*|*" mode="M47"/></axsl:template>

<!--PATTERN dmdsec_no_tech-->


	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap/mets:xmlData[(true())]" priority="1000" mode="M48"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap/mets:xmlData[(true())]"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./premis:object or addml:* or textmd:* or textmd_kdk:* or mix:* or audiomd:* or videomd:*)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./premis:object or addml:* or textmd:* or textmd_kdk:* or mix:* or audiomd:* or videomd:*)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(premis:object or addml:* or textmd:* or textmd_kdk:* or mix:* or audiomd:* or videomd:*)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M48"/></axsl:template><axsl:template match="text()" priority="-1" mode="M48"/><axsl:template match="@*|node()" priority="-2" mode="M48"><axsl:apply-templates select="@*|*" mode="M48"/></axsl:template>

<!--PATTERN rights_no_tech-->


	<!--RULE -->
<axsl:template match="mets:rightsMD/mets:mdWrap/mets:xmlData[(true())]" priority="1000" mode="M49"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:rightsMD/mets:mdWrap/mets:xmlData[(true())]"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./premis:object or addml:* or textmd:* or textmd_kdk:* or mix:* or audiomd:* or videomd:*)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./premis:object or addml:* or textmd:* or textmd_kdk:* or mix:* or audiomd:* or videomd:*)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(premis:object or addml:* or textmd:* or textmd_kdk:* or mix:* or audiomd:* or videomd:*)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M49"/></axsl:template><axsl:template match="text()" priority="-1" mode="M49"/><axsl:template match="@*|node()" priority="-2" mode="M49"><axsl:apply-templates select="@*|*" mode="M49"/></axsl:template>

<!--PATTERN digiprovmd_no_tech-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdWrap/mets:xmlData[(true())]" priority="1000" mode="M50"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdWrap/mets:xmlData[(true())]"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./premis:object or addml:* or textmd:* or textmd_kdk:* or mix:* or audiomd:* or videomd:*)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./premis:object or addml:* or textmd:* or textmd_kdk:* or mix:* or audiomd:* or videomd:*)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(premis:object or addml:* or textmd:* or textmd_kdk:* or mix:* or audiomd:* or videomd:*)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M50"/></axsl:template><axsl:template match="text()" priority="-1" mode="M50"/><axsl:template match="@*|node()" priority="-2" mode="M50"><axsl:apply-templates select="@*|*" mode="M50"/></axsl:template>

<!--PATTERN dmdsec_no_digiprov-->


	<!--RULE -->
<axsl:template match="mets:dmdSec/mets:mdWrap/mets:xmlData[(true())]" priority="1000" mode="M51"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:dmdSec/mets:mdWrap/mets:xmlData[(true())]"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./premis:agent or premis:event)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./premis:agent or premis:event)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(premis:agent or premis:event)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M51"/></axsl:template><axsl:template match="text()" priority="-1" mode="M51"/><axsl:template match="@*|node()" priority="-2" mode="M51"><axsl:apply-templates select="@*|*" mode="M51"/></axsl:template>

<!--PATTERN techmd_no_digiprov-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData[(true())]" priority="1000" mode="M52"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData[(true())]"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./premis:agent or premis:event)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./premis:agent or premis:event)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(premis:agent or premis:event)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M52"/></axsl:template><axsl:template match="text()" priority="-1" mode="M52"/><axsl:template match="@*|node()" priority="-2" mode="M52"><axsl:apply-templates select="@*|*" mode="M52"/></axsl:template>

<!--PATTERN rights_no_digiprov-->


	<!--RULE -->
<axsl:template match="mets:rightsMD/mets:mdWrap/mets:xmlData[(true())]" priority="1000" mode="M53"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:rightsMD/mets:mdWrap/mets:xmlData[(true())]"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./premis:agent or premis:event)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./premis:agent or premis:event)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(premis:agent or premis:event)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M53"/></axsl:template><axsl:template match="text()" priority="-1" mode="M53"/><axsl:template match="@*|node()" priority="-2" mode="M53"><axsl:apply-templates select="@*|*" mode="M53"/></axsl:template>

<!--PATTERN techmd_no_descriptive-->


	<!--RULE -->
<axsl:template match="mets:techMD/mets:mdWrap/mets:xmlData[(true())]" priority="1000" mode="M54"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:techMD/mets:mdWrap/mets:xmlData[(true())]"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./lido:* or ead:* or ead3:* or vra:* or mods:* or marc21:* or dc:* or dcterms:* or dcmitype:* or ddilc32:* or ddilc31:* or ddicb25:* or ddicb21:*)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./lido:* or ead:* or ead3:* or vra:* or mods:* or marc21:* or dc:* or dcterms:* or dcmitype:* or ddilc32:* or ddilc31:* or ddicb25:* or ddicb21:*)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(lido:* or ead:* or ead3:* or vra:* or mods:* or marc21:* or dc:* or dcterms:* or dcmitype:* or ddilc32:* or ddilc31:* or ddicb25:* or ddicb21:*)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M54"/></axsl:template><axsl:template match="text()" priority="-1" mode="M54"/><axsl:template match="@*|node()" priority="-2" mode="M54"><axsl:apply-templates select="@*|*" mode="M54"/></axsl:template>

<!--PATTERN rights_no_descriptive-->


	<!--RULE -->
<axsl:template match="mets:rightsMD/mets:mdWrap/mets:xmlData[(true())]" priority="1000" mode="M55"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:rightsMD/mets:mdWrap/mets:xmlData[(true())]"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./lido:* or ead:* or ead3:* or vra:* or mods:* or marc21:* or dc:* or dcterms:* or dcmitype:* or ddilc32:* or ddilc31:* or ddicb25:* or ddicb21:*)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./lido:* or ead:* or ead3:* or vra:* or mods:* or marc21:* or dc:* or dcterms:* or dcmitype:* or ddilc32:* or ddilc31:* or ddicb25:* or ddicb21:*)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(lido:* or ead:* or ead3:* or vra:* or mods:* or marc21:* or dc:* or dcterms:* or dcmitype:* or ddilc32:* or ddilc31:* or ddicb25:* or ddicb21:*)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M55"/></axsl:template><axsl:template match="text()" priority="-1" mode="M55"/><axsl:template match="@*|node()" priority="-2" mode="M55"><axsl:apply-templates select="@*|*" mode="M55"/></axsl:template>

<!--PATTERN digiprovmd_no_descriptive-->


	<!--RULE -->
<axsl:template match="mets:digiprovMD/mets:mdWrap/mets:xmlData[(true())]" priority="1000" mode="M56"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:digiprovMD/mets:mdWrap/mets:xmlData[(true())]"/><axsl:variable name="section_context" select="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/><axsl:variable name="section_string" select="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(not(./lido:* or ead:* or ead3:* or vra:* or mods:* or marc21:* or dc:* or dcterms:* or dcmitype:* or ddilc32:* or ddilc31:* or ddicb25:* or ddicb21:*)) or not(normalize-space(string(''))=''    or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))    or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(not(./lido:* or ead:* or ead3:* or vra:* or mods:* or marc21:* or dc:* or dcterms:* or dcmitype:* or ddilc32:* or ddilc31:* or ddicb25:* or ddicb21:*)) or not(normalize-space(string(''))='' or ((normalize-space(substring(string(''),1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after(string(''),':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))) or ((normalize-space(substring(string(''),1,4))!='not:') and ((contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space(string('')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Element '<axsl:text/><axsl:value-of select="name(lido:* or ead:* or ead3:* or vra:* or mods:* or marc21:* or dc:* or dcterms:* or dcmitype:* or ddilc32:* or ddilc31:* or ddicb25:* or ddicb21:*)"/><axsl:text/>' is not allowed in element '<axsl:text/><axsl:value-of select="name(.)"/><axsl:text/>'. <axsl:text/><axsl:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/><axsl:text/>
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M56"/></axsl:template><axsl:template match="text()" priority="-1" mode="M56"/><axsl:template match="@*|node()" priority="-2" mode="M56"><axsl:apply-templates select="@*|*" mode="M56"/></axsl:template><axsl:param name="premis_file_id" select="/mets:mets/mets:amdSec/mets:techMD[normalize-space(.//premis:object/@xsi:type)='premis:file']/@ID"/><axsl:param name="premis_file_count" select="count(sets:distinct(exsl:node-set($premis_file_id)))"/>

<!--PATTERN premis_file_requirement-->


	<!--RULE -->
<axsl:template match="mets:file" priority="1000" mode="M59"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:file"/><axsl:variable name="admids" select="normalize-space(@ADMID)"/><axsl:variable name="countadm" select="count(sets:distinct(str:tokenize($admids, ' ')))"/><axsl:variable name="countfilescomb" select="count(sets:distinct(exsl:node-set($premis_file_id) | str:tokenize($admids, ' ')))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="($premis_file_count+$countadm) &gt; $countfilescomb"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="($premis_file_count+$countadm) &gt; $countfilescomb"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Linking between PREMIS:OBJECT metadata and file '<axsl:text/><axsl:value-of select="./mets:FLocat/@xlink:href"/><axsl:text/>' is required.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M59"/></axsl:template><axsl:template match="text()" priority="-1" mode="M59"/><axsl:template match="@*|node()" priority="-2" mode="M59"><axsl:apply-templates select="@*|*" mode="M59"/></axsl:template><axsl:param name="premis_stream_id" select="/mets:mets/mets:amdSec/mets:techMD[normalize-space(.//premis:object/@xsi:type)='premis:bitstream']/@ID"/><axsl:param name="premis_stream_count" select="count(sets:distinct(exsl:node-set($premis_stream_id)))"/>

<!--PATTERN premis_file_requirement-->


	<!--RULE -->
<axsl:template match="mets:stream" priority="1000" mode="M62"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:stream"/><axsl:variable name="admids" select="normalize-space(@ADMID)"/><axsl:variable name="countadm" select="count(sets:distinct(str:tokenize($admids, ' ')))"/><axsl:variable name="countfilescomb" select="count(sets:distinct(exsl:node-set($premis_stream_id) | str:tokenize($admids, ' ')))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="($premis_stream_count+$countadm) &gt; $countfilescomb"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="($premis_stream_count+$countadm) &gt; $countfilescomb"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Linking between PREMIS:OBJECT metadata and stream in file '<axsl:text/><axsl:value-of select="../mets:FLocat/@xlink:href"/><axsl:text/>' is required.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M62"/></axsl:template><axsl:template match="text()" priority="-1" mode="M62"/><axsl:template match="@*|node()" priority="-2" mode="M62"><axsl:apply-templates select="@*|*" mode="M62"/></axsl:template><axsl:param name="audiomd_fileid_stream" select="/mets:mets/mets:amdSec/mets:techMD[contains(concat(' ', $audiomd_types, ' '), concat(' ', normalize-space(.//premis:formatName), ' ')) and normalize-space(.//premis:object/@xsi:type)='premis:bitstream']/@ID"/><axsl:param name="audiomd_mdids" select="/mets:mets/mets:amdSec/mets:techMD[./mets:mdWrap/mets:xmlData/audiomd:*]/@ID"/><axsl:param name="audiomd_countfiles_stream" select="count(sets:distinct(exsl:node-set($audiomd_fileid_stream)))"/><axsl:param name="audiomd_countmd" select="count(sets:distinct(exsl:node-set($audiomd_mdids)))"/>

<!--PATTERN audiomd_requirement_stream-->


	<!--RULE -->
<axsl:template match="mets:stream" priority="1000" mode="M67"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:stream"/><axsl:variable name="admids" select="normalize-space(@ADMID)"/><axsl:variable name="countadm" select="count(sets:distinct(str:tokenize($admids, ' ')))"/><axsl:variable name="countfilescomb" select="count(sets:distinct(exsl:node-set($audiomd_fileid_stream) | str:tokenize($admids, ' ')))"/><axsl:variable name="countmdcomb" select="count(sets:distinct(exsl:node-set($audiomd_mdids) | str:tokenize($admids, ' ')))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(($audiomd_countfiles_stream+$countadm)=$countfilescomb) or not(($audiomd_countmd+$countadm)=$countmdcomb)    or contains(' 1.4 1.4.1 1.5.0 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 1.5.0 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(($audiomd_countfiles_stream+$countadm)=$countfilescomb) or not(($audiomd_countmd+$countadm)=$countmdcomb) or contains(' 1.4 1.4.1 1.5.0 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 1.5.0 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Linking between AudioMD metadata and stream in file '<axsl:text/><axsl:value-of select="../mets:FLocat/@xlink:href"/><axsl:text/>' is required.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M67"/></axsl:template><axsl:template match="text()" priority="-1" mode="M67"/><axsl:template match="@*|node()" priority="-2" mode="M67"><axsl:apply-templates select="@*|*" mode="M67"/></axsl:template><axsl:param name="videomd_fileid_stream" select="/mets:mets/mets:amdSec/mets:techMD[contains(concat(' ', $videomd_types, ' '), concat(' ', normalize-space(.//premis:formatName), ' ')) and normalize-space(.//premis:object/@xsi:type)='premis:bitstream']/@ID"/><axsl:param name="videomd_mdids" select="/mets:mets/mets:amdSec/mets:techMD[./mets:mdWrap/mets:xmlData/videomd:*]/@ID"/><axsl:param name="videomd_countfiles_stream" select="count(sets:distinct(exsl:node-set($videomd_fileid_stream)))"/><axsl:param name="videomd_countmd" select="count(sets:distinct(exsl:node-set($videomd_mdids)))"/>

<!--PATTERN videomd_requirement_stream-->


	<!--RULE -->
<axsl:template match="mets:stream" priority="1000" mode="M72"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:stream"/><axsl:variable name="admids" select="normalize-space(@ADMID)"/><axsl:variable name="countadm" select="count(sets:distinct(str:tokenize($admids, ' ')))"/><axsl:variable name="countfilescomb" select="count(sets:distinct(exsl:node-set($videomd_fileid_stream) | str:tokenize($admids, ' ')))"/><axsl:variable name="countmdcomb" select="count(sets:distinct(exsl:node-set($videomd_mdids) | str:tokenize($admids, ' ')))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(($videomd_countfiles_stream+$countadm)=$countfilescomb) or not(($videomd_countmd+$countadm)=$countmdcomb)    or contains(' 1.4 1.4.1 1.5.0 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 1.5.0 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(($videomd_countfiles_stream+$countadm)=$countfilescomb) or not(($videomd_countmd+$countadm)=$countmdcomb) or contains(' 1.4 1.4.1 1.5.0 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 1.5.0 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Linking between VideoMD metadata and stream in file '<axsl:text/><axsl:value-of select="../mets:FLocat/@xlink:href"/><axsl:text/>' is required.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M72"/></axsl:template><axsl:template match="text()" priority="-1" mode="M72"/><axsl:template match="@*|node()" priority="-2" mode="M72"><axsl:apply-templates select="@*|*" mode="M72"/></axsl:template><axsl:param name="addml_fileid" select="/mets:mets/mets:amdSec/mets:techMD[contains(concat(' ', $addml_types, ' '), concat(' ', normalize-space(.//premis:formatName), ' ')) and normalize-space(.//premis:object/@xsi:type)='premis:file']/@ID"/><axsl:param name="addml_mdids" select="/mets:mets/mets:amdSec/mets:techMD[./mets:mdWrap/mets:xmlData/addml:*]/@ID"/><axsl:param name="addml_countfiles" select="count(sets:distinct(exsl:node-set($addml_fileid)))"/><axsl:param name="addml_countmd" select="count(sets:distinct(exsl:node-set($addml_mdids)))"/>

<!--PATTERN addml_requirement-->


	<!--RULE -->
<axsl:template match="mets:file" priority="1000" mode="M77"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:file"/><axsl:variable name="admids" select="normalize-space(@ADMID)"/><axsl:variable name="countadm" select="count(sets:distinct(str:tokenize($admids, ' ')))"/><axsl:variable name="countfilescomb" select="count(sets:distinct(exsl:node-set($addml_fileid) | str:tokenize($admids, ' ')))"/><axsl:variable name="countmdcomb" select="count(sets:distinct(exsl:node-set($addml_mdids) | str:tokenize($admids, ' ')))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(($addml_countfiles+$countadm)=$countfilescomb) or not(($addml_countmd+$countadm)=$countmdcomb)    or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(($addml_countfiles+$countadm)=$countfilescomb) or not(($addml_countmd+$countadm)=$countmdcomb) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Linking between ADDML metadata and file '<axsl:text/><axsl:value-of select="./mets:FLocat/@xlink:href"/><axsl:text/>' is required.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M77"/></axsl:template><axsl:template match="text()" priority="-1" mode="M77"/><axsl:template match="@*|node()" priority="-2" mode="M77"><axsl:apply-templates select="@*|*" mode="M77"/></axsl:template><axsl:param name="audiomd_fileid" select="/mets:mets/mets:amdSec/mets:techMD[contains(concat(' ', $audiomd_types, ' '), concat(' ', normalize-space(.//premis:formatName), ' ')) and normalize-space(.//premis:object/@xsi:type)='premis:file']/@ID"/><axsl:param name="audiomd_countfiles" select="count(sets:distinct(exsl:node-set($audiomd_fileid)))"/>

<!--PATTERN audiomd_requirement-->


	<!--RULE -->
<axsl:template match="mets:file" priority="1000" mode="M80"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:file"/><axsl:variable name="admids" select="normalize-space(@ADMID)"/><axsl:variable name="countadm" select="count(sets:distinct(str:tokenize($admids, ' ')))"/><axsl:variable name="countfilescomb" select="count(sets:distinct(exsl:node-set($audiomd_fileid) | str:tokenize($admids, ' ')))"/><axsl:variable name="countmdcomb" select="count(sets:distinct(exsl:node-set($audiomd_mdids) | str:tokenize($admids, ' ')))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(($audiomd_countfiles+$countadm)=$countfilescomb) or not(($audiomd_countmd+$countadm)=$countmdcomb)    or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(($audiomd_countfiles+$countadm)=$countfilescomb) or not(($audiomd_countmd+$countadm)=$countmdcomb) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Linking between AudioMD metadata and file '<axsl:text/><axsl:value-of select="./mets:FLocat/@xlink:href"/><axsl:text/>' is required.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M80"/></axsl:template><axsl:template match="text()" priority="-1" mode="M80"/><axsl:template match="@*|node()" priority="-2" mode="M80"><axsl:apply-templates select="@*|*" mode="M80"/></axsl:template><axsl:param name="videomd_fileid" select="/mets:mets/mets:amdSec/mets:techMD[contains(concat(' ', $videomd_types, ' '), concat(' ', normalize-space(.//premis:formatName), ' ')) and normalize-space(.//premis:object/@xsi:type)='premis:file']/@ID"/><axsl:param name="videomd_countfiles" select="count(sets:distinct(exsl:node-set($videomd_fileid)))"/>

<!--PATTERN videomd_requirement-->


	<!--RULE -->
<axsl:template match="mets:file" priority="1000" mode="M83"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:file"/><axsl:variable name="admids" select="normalize-space(@ADMID)"/><axsl:variable name="countadm" select="count(sets:distinct(str:tokenize($admids, ' ')))"/><axsl:variable name="countfilescomb" select="count(sets:distinct(exsl:node-set($videomd_fileid) | str:tokenize($admids, ' ')))"/><axsl:variable name="countmdcomb" select="count(sets:distinct(exsl:node-set($videomd_mdids) | str:tokenize($admids, ' ')))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(($videomd_countfiles+$countadm)=$countfilescomb) or not(($videomd_countmd+$countadm)=$countmdcomb)    or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(($videomd_countfiles+$countadm)=$countfilescomb) or not(($videomd_countmd+$countadm)=$countmdcomb) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Linking between VideoMD metadata and file '<axsl:text/><axsl:value-of select="./mets:FLocat/@xlink:href"/><axsl:text/>' is required.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M83"/></axsl:template><axsl:template match="text()" priority="-1" mode="M83"/><axsl:template match="@*|node()" priority="-2" mode="M83"><axsl:apply-templates select="@*|*" mode="M83"/></axsl:template><axsl:param name="mix_fileid" select="/mets:mets/mets:amdSec/mets:techMD[contains(concat(' ', $mix_types, ' '), concat(' ', normalize-space(.//premis:formatName), ' ')) and normalize-space(.//premis:object/@xsi:type)='premis:file']/@ID"/><axsl:param name="mix_mdids" select="/mets:mets/mets:amdSec/mets:techMD[./mets:mdWrap/mets:xmlData/mix:*]/@ID"/><axsl:param name="mix_countfiles" select="count(sets:distinct(exsl:node-set($mix_fileid)))"/><axsl:param name="mix_countmd" select="count(sets:distinct(exsl:node-set($mix_mdids)))"/>

<!--PATTERN mix_requirement-->


	<!--RULE -->
<axsl:template match="mets:file" priority="1000" mode="M88"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:file"/><axsl:variable name="admids" select="normalize-space(@ADMID)"/><axsl:variable name="countadm" select="count(sets:distinct(str:tokenize($admids, ' ')))"/><axsl:variable name="countfilescomb" select="count(sets:distinct(exsl:node-set($mix_fileid) | str:tokenize($admids, ' ')))"/><axsl:variable name="countmdcomb" select="count(sets:distinct(exsl:node-set($mix_mdids) | str:tokenize($admids, ' ')))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(($mix_countfiles+$countadm)=$countfilescomb) or not(($mix_countmd+$countadm)=$countmdcomb)    or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(($mix_countfiles+$countadm)=$countfilescomb) or not(($mix_countmd+$countadm)=$countmdcomb) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' '))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Linking between NISOIMG (MIX) metadata and file '<axsl:text/><axsl:value-of select="./mets:FLocat/@xlink:href"/><axsl:text/>' is required.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M88"/></axsl:template><axsl:template match="text()" priority="-1" mode="M88"/><axsl:template match="@*|node()" priority="-2" mode="M88"><axsl:apply-templates select="@*|*" mode="M88"/></axsl:template><axsl:param name="textmd_fileid" select="/mets:mets/mets:amdSec/mets:techMD[contains(concat(' ', $textmd_types, ' '), concat(' ', normalize-space(.//premis:formatName), ' '))]/@ID"/><axsl:param name="textmd14_mdids" select="/mets:mets/mets:amdSec/mets:techMD[.//textmd_kdk:*]/@ID"/><axsl:param name="textmd_countfiles" select="count(sets:distinct(exsl:node-set($textmd_fileid)))"/><axsl:param name="textmd14_countmd" select="count(sets:distinct(exsl:node-set($textmd14_mdids)))"/>

<!--PATTERN textmd_requirement14-->


	<!--RULE -->
<axsl:template match="mets:file" priority="1000" mode="M93"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:file"/><axsl:variable name="admids" select="normalize-space(@ADMID)"/><axsl:variable name="countadm" select="count(sets:distinct(str:tokenize($admids, ' ')))"/><axsl:variable name="countfilescomb" select="count(sets:distinct(exsl:node-set($textmd_fileid) | str:tokenize($admids, ' ')))"/><axsl:variable name="countmdcomb" select="count(sets:distinct(exsl:node-set($textmd14_mdids) | str:tokenize($admids, ' ')))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(($textmd_countfiles+$countadm)=$countfilescomb) or not(($textmd14_countmd+$countadm)=$countmdcomb)    or not(contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' ')))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(($textmd_countfiles+$countadm)=$countfilescomb) or not(($textmd14_countmd+$countadm)=$countmdcomb) or not(contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' ')))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Linking between TextMD metadata and file '<axsl:text/><axsl:value-of select="./mets:FLocat/@xlink:href"/><axsl:text/>' is required.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M93"/></axsl:template><axsl:template match="text()" priority="-1" mode="M93"/><axsl:template match="@*|node()" priority="-2" mode="M93"><axsl:apply-templates select="@*|*" mode="M93"/></axsl:template><axsl:param name="addml14_mdids" select="/mets:mets/mets:amdSec/mets:techMD[.//addml:*]/@ID"/><axsl:param name="addml14_countmd" select="count(sets:distinct(exsl:node-set($addml14_mdids)))"/>

<!--PATTERN addml_requirement14-->


	<!--RULE -->
<axsl:template match="mets:file" priority="1000" mode="M96"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:file"/><axsl:variable name="admids" select="normalize-space(@ADMID)"/><axsl:variable name="countadm" select="count(sets:distinct(str:tokenize($admids, ' ')))"/><axsl:variable name="countfilescomb" select="count(sets:distinct(exsl:node-set($addml_fileid) | str:tokenize($admids, ' ')))"/><axsl:variable name="countmdcomb" select="count(sets:distinct(exsl:node-set($addml14_mdids) | str:tokenize($admids, ' ')))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(($addml_countfiles+$countadm)=$countfilescomb) or not(($addml14_countmd+$countadm)=$countmdcomb)    or not(contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' ')))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(($addml_countfiles+$countadm)=$countfilescomb) or not(($addml14_countmd+$countadm)=$countmdcomb) or not(contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' ')))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Linking between ADDML metadata and file '<axsl:text/><axsl:value-of select="./mets:FLocat/@xlink:href"/><axsl:text/>' is required.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M96"/></axsl:template><axsl:template match="text()" priority="-1" mode="M96"/><axsl:template match="@*|node()" priority="-2" mode="M96"><axsl:apply-templates select="@*|*" mode="M96"/></axsl:template><axsl:param name="audiomd14_mdids" select="/mets:mets/mets:amdSec/mets:techMD[.//audiomd:*]/@ID"/><axsl:param name="audiomd14_countmd" select="count(sets:distinct(exsl:node-set($audiomd14_mdids)))"/>

<!--PATTERN audiomd_requirement14-->


	<!--RULE -->
<axsl:template match="mets:file" priority="1000" mode="M99"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:file"/><axsl:variable name="admids" select="normalize-space(@ADMID)"/><axsl:variable name="countadm" select="count(sets:distinct(str:tokenize($admids, ' ')))"/><axsl:variable name="countfilescomb" select="count(sets:distinct(exsl:node-set($audiomd_fileid) | str:tokenize($admids, ' ')))"/><axsl:variable name="countmdcomb" select="count(sets:distinct(exsl:node-set($audiomd14_mdids) | str:tokenize($admids, ' ')))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(($audiomd_countfiles+$countadm)=$countfilescomb) or not(($audiomd14_countmd+$countadm)=$countmdcomb)    or not(contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' ')))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(($audiomd_countfiles+$countadm)=$countfilescomb) or not(($audiomd14_countmd+$countadm)=$countmdcomb) or not(contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' ')))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Linking between AudioMD metadata and file '<axsl:text/><axsl:value-of select="./mets:FLocat/@xlink:href"/><axsl:text/>' is required.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M99"/></axsl:template><axsl:template match="text()" priority="-1" mode="M99"/><axsl:template match="@*|node()" priority="-2" mode="M99"><axsl:apply-templates select="@*|*" mode="M99"/></axsl:template><axsl:param name="videomd14_mdids" select="/mets:mets/mets:amdSec/mets:techMD[.//videomd:*]/@ID"/><axsl:param name="videomd14_countmd" select="count(sets:distinct(exsl:node-set($videomd14_mdids)))"/>

<!--PATTERN videomd_requirement14-->


	<!--RULE -->
<axsl:template match="mets:file" priority="1000" mode="M102"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:file"/><axsl:variable name="admids" select="normalize-space(@ADMID)"/><axsl:variable name="countadm" select="count(sets:distinct(str:tokenize($admids, ' ')))"/><axsl:variable name="countfilescomb" select="count(sets:distinct(exsl:node-set($videomd_fileid) | str:tokenize($admids, ' ')))"/><axsl:variable name="countmdcomb" select="count(sets:distinct(exsl:node-set($videomd14_mdids) | str:tokenize($admids, ' ')))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(($videomd_countfiles+$countadm)=$countfilescomb) or not(($videomd14_countmd+$countadm)=$countmdcomb)    or not(contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' ')))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(($videomd_countfiles+$countadm)=$countfilescomb) or not(($videomd14_countmd+$countadm)=$countmdcomb) or not(contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' ')))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Linking between VideoMD metadata and file '<axsl:text/><axsl:value-of select="./mets:FLocat/@xlink:href"/><axsl:text/>' is required.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M102"/></axsl:template><axsl:template match="text()" priority="-1" mode="M102"/><axsl:template match="@*|node()" priority="-2" mode="M102"><axsl:apply-templates select="@*|*" mode="M102"/></axsl:template><axsl:param name="mix14_mdids" select="/mets:mets/mets:amdSec/mets:techMD[.//mix:*]/@ID"/><axsl:param name="mix14_countmd" select="count(sets:distinct(exsl:node-set($mix14_mdids)))"/>

<!--PATTERN mix_requirement14-->


	<!--RULE -->
<axsl:template match="mets:file" priority="1000" mode="M105"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="mets:file"/><axsl:variable name="admids" select="normalize-space(@ADMID)"/><axsl:variable name="countadm" select="count(sets:distinct(str:tokenize($admids, ' ')))"/><axsl:variable name="countfilescomb" select="count(sets:distinct(exsl:node-set($mix_fileid) | str:tokenize($admids, ' ')))"/><axsl:variable name="countmdcomb" select="count(sets:distinct(exsl:node-set($mix14_mdids) | str:tokenize($admids, ' ')))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(($mix_countfiles+$countadm)=$countfilescomb) or not(($mix14_countmd+$countadm)=$countmdcomb)    or not(contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' ')))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:saxon="http://icl.com/saxon" test="(($mix_countfiles+$countadm)=$countfilescomb) or not(($mix14_countmd+$countadm)=$countmdcomb) or not(contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),' ')) or contains(' 1.4 1.4.1 ', concat(' ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),' ')))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:line-number><axsl:value-of select="saxon:line-number()"/></svrl:line-number><svrl:text>
				Linking between NISOIMG (MIX) metadata and file '<axsl:text/><axsl:value-of select="./mets:FLocat/@xlink:href"/><axsl:text/>' is required.
			</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M105"/></axsl:template><axsl:template match="text()" priority="-1" mode="M105"/><axsl:template match="@*|node()" priority="-2" mode="M105"><axsl:apply-templates select="@*|*" mode="M105"/></axsl:template></axsl:stylesheet>
