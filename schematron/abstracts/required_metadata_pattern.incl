<?xml version="1.0" encoding="UTF-8"?>

	<!--
	Require metadata in METS.
	required_metadata - @MDTYPE/@OTHERMDTYPE condition
	metadata_name - Name of the metadata.
	context_condition - Rule launched only, if this condition is true.
	profiles - METS profiles for which the rule is launched.
		If empty, launch by default. Do not use profile parameters.
	specifications - Catalog/specification versions for which the rule is launched.
		List the affected versions with semicolon+space delimiter.
		If begins with "not:", rule is launched with other but given versions.  
		If empty, launch rule by default.
	-->
	<sch:pattern id="required_metadata_pattern" abstract="true" xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:mets="http://www.loc.gov/METS/" xmlns:fi="http://www.kdk.fi/standards/mets/kdk-extensions" xmlns:exsl="http://exslt.org/common" xmlns:sets="http://exslt.org/sets" xmlns:str="http://exslt.org/strings">
		<sch:rule context="mets:mets[($context_condition)]">
	    		<sch:let name="given_profile" value="str:split(normalize-space(/mets:mets/@PROFILE), '?')"/>
			<sch:assert test="(.//$required_metadata) 
			or not(str:concat($profiles)='' or count($profiles) = count(sets:distinct(exsl:node-set($given_profile[1]) | $profiles))) or not(normalize-space($specifications)=''
			or ((normalize-space(substring($specifications,1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after($specifications,':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after($specifications,':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))
			or ((normalize-space(substring($specifications,1,4))!='not:') and ((contains(concat('; ',normalize-space($specifications),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space($specifications),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))">
				<sch:value-of select="$metadata_name"/> metadata is required in METS.
			</sch:assert>
		</sch:rule> 
	</sch:pattern>
