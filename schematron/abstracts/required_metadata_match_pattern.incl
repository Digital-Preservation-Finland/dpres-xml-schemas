<?xml version="1.0" encoding="UTF-8"?>

	<!--
	Require that mdWrap contains given metadata.
	required_condition - Condition which does the check
	used_attribute - @MDTYPE or @OTHERMDTYPE
	context_condition - Rule launched only, if this condition is true.
	specifications - Catalog/specification versions for which the rule is launched.
		List the affected versions with semicolon+space delimiter.
		If begins with "not:", rule is launched with other but given versions.  
		If empty, launch rule by default.
	-->
	<sch:pattern id="required_metadata_match_pattern" abstract="true" xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:mets="http://www.loc.gov/METS/" xmlns:fi="http://digitalpreservation.fi/schemas/mets/fi-extensions" xmlns:fikdk="http://www.kdk.fi/standards/mets/kdk-extensions" xmlns:exsl="http://exslt.org/common" xmlns:sets="http://exslt.org/sets" xmlns:str="http://exslt.org/strings">
		<sch:rule context="mets:mdWrap[($context_condition)]">
			<sch:let name="given_specification" value="substring-before(concat(normalize-space(concat(normalize-space(/mets:mets/@fi:CATALOG), ' ', normalize-space(/mets:mets/@fikdk:CATALOG), ' ', normalize-space(/mets:mets/@fi:SPECIFICATION), ' ', normalize-space(/mets:mets/@fikdk:SPECIFICATION))), ' '), ' ')"/>
			<sch:assert test="($required_condition) or not(normalize-space($specifications)=''
			or ((normalize-space(substring($specifications,1,4))='not:') and (not(contains(concat('; ',normalize-space(substring-after($specifications,':')),'; '), concat('; ', $given_specification, '; ')))))
			or ((normalize-space(substring($specifications,1,4))!='not:') and (contains(concat('; ',normalize-space($specifications),'; '), concat('; ', $given_specification,'; ')))))">
				Mismatch between given metadata type '<sch:value-of select="$used_attribute"/>' and actual contained metadata. (ID of the metadata section '<sch:value-of select="name(..)"/>' is '<sch:value-of select="../@ID"/>')
			</sch:assert>
		</sch:rule> 
	</sch:pattern>
