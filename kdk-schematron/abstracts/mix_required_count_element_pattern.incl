<?xml version="1.0" encoding="UTF-8"?>

	<!--
	Require same number of values in an element as the value in another element. Accepts also single value.
	context_element - Element containing value list (separated with comma), or a single value
	count_element - Element containing number of values in the list
	context_condition - Rule launched only, if this condition is true.
	specifications - Catalog/specification versions for which the rule is launched.
		List the affected versions with space+semicolon delimiter.
		If begins with "not:", rule is launched with other but given versions.  
		If empty, launch rule by default.
	-->
	<sch:pattern name="mix_required_count_element_pattern" abstract="true" xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:mets="http://www.loc.gov/METS/" xmlns:mix="http://www.loc.gov/mix/v20" xmlns:str="http://exslt.org/strings">
		<sch:rule context="$context_element[($context_condition)]">
			<sch:let name="countValues" value="count(str:tokenize(.,','))"/>
			<sch:let name="section_context" value="ancestor-or-self::*[self::mets:dmdSec or self::mets:techMD or self::mets:rightsMD or self::mets:sourceMD or self::mets:digiprovMD]"/>
			<sch:let name="section_string" value="concat('(ID of the metadata section ', name($section_context), ' is ', $section_context/@ID, ')')"/>
			<sch:assert test="($countValues = number($count_element) or $countValues=1) or not(normalize-space($specifications)=''
			or ((normalize-space(substring($specifications,1,4))='not:') and ((not(contains(concat('; ',normalize-space(substring-after($specifications,':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; ')))) and not(contains(concat('; ',normalize-space(substring-after($specifications,':')),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; ')))))
			or ((normalize-space(substring($specifications,1,4))!='not:') and ((contains(concat('; ',normalize-space($specifications),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:CATALOG),'; '))) or (contains(concat('; ',normalize-space($specifications),'; '), concat('; ',normalize-space(ancestor-or-self::mets:mets/@fi:SPECIFICATION),'; '))))))">
				Element '<sch:value-of select="$context_element"/>' must have same count of values (separated with comma characters) as the value is in '<sch:value-of select="$count_element"/>'. <sch:value-of select="substring($section_string,1,number($section_context)*string-length($section_string))"/>
			</sch:assert>
		</sch:rule>
	</sch:pattern>